diff -r 484d3f8e5978 sys/src/9/pc/etheralc.c
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/sys/src/9/pc/etheralc.c	Fri Oct 09 08:48:49 2020 +0300
@@ -0,0 +1,2087 @@
+/* this code is ported from openbsd if_alc.c */
+/* by Peter Kosyh */
+
+/* Original copyright message: */
+/*-
+ * Copyright (c) 2009, Pyun YongHyeon <yongari@FreeBSD.org>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice unmodified, this list of conditions, and the following
+ *    disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include "u.h"
+#include "../port/lib.h"
+#include "mem.h"
+#include "dat.h"
+#include "fns.h"
+#include "io.h"
+#include "../port/pci.h"
+#include "../port/error.h"
+#include "../port/netif.h"
+#include "../port/etherif.h"
+#include "../port/ethermii.h"
+#include "../pc/etheralc.h"
+
+#define DSCN	64 /* ring len, 256 is maximum */
+
+#define letoh32(x)	(x)
+#define htole32(x)      (x)
+#define	LO(x)		((uvlong) (x) & 0xFFFFFFFF)
+#define	HI(x)		((uvlong) (x) >> 32)
+
+enum {
+	attansic_l1e = (0x1026<<16)|0x1969,
+	attansic_l1 = (0x1048<<16)|0x1969,
+	attansic_l2c = (0x1062<<16)|0x1969,
+	attansic_l1c = (0x1063<<16)|0x1969,
+	attansic_l1d = (0x1073<<16)|0x1969,
+	attansic_l1d_1 = (0x1083<<16)|0x1969,
+	attansic_ar8162	= (0x1090<<16)|0x1969,
+	attansic_ar8161	= (0x1091<<16)|0x1969,
+	attansic_ar8172	= (0x10a0<<16)|0x1969,
+	attansic_ar8171	= (0x10a1<<16)|0x1969,
+	attansic_l2 = (0x2048<<16)|0x1969,
+	attansic_l2c_1 = (0x2060<<16)|0x1969,
+	attansic_l2c_2 = (0x2062<<16)|0x1969,
+	attansic_e2200 = (0xe091<<16)|0x1969,
+	attansic_e2400 = (0xe0a1<<16)|0x1969,
+	attansic_e2500 = (0xe0b1<<16)|0x1969,
+};
+
+enum {
+	alcfl_e2x00 = 1,
+	alcfl_link_war = 0x2,
+	alcfl_ar816x = 0x4,
+	alcfl_fasteth = 0x8,
+	alcfl_aps = 0x10,
+	alcfl_jumbo = 0x20,
+	alcfl_msi = 0x40,
+	alcfl_link = 0x80,
+	alcfl_pcie = 0x100,
+	alcfl_l0s = 0x200,
+	alcfl_l1s = 0x400,
+};
+
+/* Tx descriptor */
+typedef struct tx_desc {
+	uint len;
+	uint flags;
+	uvlong addr;
+} TxDesc;
+
+/* Rx free descriptor */
+typedef struct rx_desc {
+	uvlong addr;
+} RxDesc;
+
+/* Rx return descriptor */
+typedef struct rx_rdesc {
+	uint rdinfo;
+	uint rss;
+	uint vtag;
+	uint status;
+} RxRdesc;
+
+typedef struct Ctlr Ctlr;
+typedef struct Ctlr {
+	Ether *edev;
+	uvlong	port;
+	Pcidev *pcidev;
+	QLock	alock;			/* attach */
+	QLock	slock;
+	Lock	imlock;
+	Lock	tlock;
+	Ctlr   *next;
+	int	*mem;
+	uint	did;
+	uchar   rid;
+	uchar	phy;
+	int	excap;
+	int	active;
+	int	flags;
+	int	rcb;
+	int	dma_wr_burst;
+	int	dma_rd_burst;
+	Block	**tb;
+	Block	**rb;
+	int	rdfree;
+	int	tdfree;
+	int	rdh;
+	int	rdt;
+	int	tdh;
+	int	tdt;
+	TxDesc	*tx_ring;
+	RxDesc	*rx_ring;
+	RxRdesc *rrx_ring;
+	Mii	*mii;
+	int	lim;
+	int	rim;
+	Rendez	rrendez;
+	Rendez	lrendez;
+	uchar	ra[Eaddrlen];		/* receive address */
+} Ctlr;
+
+static Ctlr* alcctlrhead;
+static Ctlr* alcctlrtail;
+
+static uint
+csr32r(Ctlr *c, int r)
+{
+	uint v;
+	v = *(c->mem+(r/4));
+	return v;
+}
+static void
+csr32w(Ctlr *c, int r, uint v)
+{
+	*(c->mem+(r/4)) = v;
+}
+
+static uint
+csr16r(Ctlr *c, int r)
+{
+	uint v;
+	v = *(ushort*)(c->mem+(r/4));
+	return v;
+}
+
+static void
+csr16w(Ctlr *c, int r, ushort v)
+{
+	*((ushort *)(c->mem+(r/4))) = v;
+}
+
+static void
+mii_write_816x(Ctlr *ctlr, int phy, int reg, int val)
+{
+	uint clk, v;
+	int i;
+
+	if ((ctlr->flags & alcfl_link) != 0)
+		clk = MDIO_CLK_25_128;
+	else
+		clk = MDIO_CLK_25_4;
+	csr32w(ctlr, ALC_MDIO, MDIO_OP_EXECUTE | MDIO_OP_WRITE |
+	    ((val & MDIO_DATA_MASK) << MDIO_DATA_SHIFT) | MDIO_REG_ADDR(reg) |
+	    MDIO_SUP_PREAMBLE | clk);
+	for (i = ALC_PHY_TIMEOUT; i > 0; i--) {
+		microdelay(5);
+		v = csr32r(ctlr, ALC_MDIO);
+		if ((v & MDIO_OP_BUSY) == 0)
+			break;
+	}
+	if (i == 0)
+		print("%s: phy write timeout: phy %d, reg %d\n", ctlr->edev->name, phy, reg);
+}
+
+static void
+mii_write_813x(Ctlr *ctlr, int phy, int reg, int val)
+{
+	uint v;
+	int i;
+
+	csr32w(ctlr, ALC_MDIO, MDIO_OP_EXECUTE | MDIO_OP_WRITE |
+	    (val & MDIO_DATA_MASK) << MDIO_DATA_SHIFT |
+	    MDIO_SUP_PREAMBLE | MDIO_CLK_25_4 | MDIO_REG_ADDR(reg));
+	for (i = ALC_PHY_TIMEOUT; i > 0; i--) {
+		microdelay(5);
+		v = csr32r(ctlr, ALC_MDIO);
+		if ((v & (MDIO_OP_EXECUTE | MDIO_OP_BUSY)) == 0)
+			break;
+	}
+	if (i == 0)
+		print("%s: phy write timeout: phy %d, reg %d\n", ctlr->edev->name, phy, reg);
+}
+
+static void
+mii_write(Ctlr *ctlr, int phy, int reg, int val)
+{
+	if (phy != ctlr->phy)
+		return;
+
+	if ((ctlr->flags & alcfl_ar816x) != 0)
+		mii_write_816x(ctlr, phy, reg, val);
+	else
+		mii_write_813x(ctlr, phy, reg, val);
+}
+
+static int
+mii_read_813x(Ctlr *ctlr, int phy, int reg)
+{
+	uint v = 0;
+	int i;
+
+	/*
+	 * For AR8132 fast ethernet controller, do not report 1000baseT
+	 * capability to mii(4). Even though AR8132 uses the same
+	 * model/revision number of F1 gigabit PHY, the PHY has no
+	 * ability to establish 1000baseT link.
+	 */
+	if ((ctlr->flags & alcfl_fasteth) != 0 &&
+	    reg == Esr)
+		return (0);
+
+	csr32w(ctlr, ALC_MDIO, MDIO_OP_EXECUTE | MDIO_OP_READ |
+	    MDIO_SUP_PREAMBLE | MDIO_CLK_25_4 | MDIO_REG_ADDR(reg));
+	for (i = ALC_PHY_TIMEOUT; i > 0; i--) {
+		microdelay(5);
+		v = csr32r(ctlr, ALC_MDIO);
+		if ((v & (MDIO_OP_EXECUTE | MDIO_OP_BUSY)) == 0)
+			break;
+	}
+	if (i == 0) {
+		print("%s: phy read timeout: phy %d, reg %d\n", ctlr->edev->name, phy, reg);
+		return 0;
+	}
+
+	return ((v & MDIO_DATA_MASK) >> MDIO_DATA_SHIFT);
+}
+
+static int
+mii_read_816x(Ctlr *ctlr, int phy, int reg)
+{
+	uint clk, v = 0;
+	int i;
+	if ((ctlr->flags & alcfl_link) != 0)
+		clk = MDIO_CLK_25_128;
+	else
+		clk = MDIO_CLK_25_4;
+	csr32w(ctlr, ALC_MDIO, MDIO_OP_EXECUTE | MDIO_OP_READ |
+		MDIO_SUP_PREAMBLE | clk | MDIO_REG_ADDR(reg));
+	for (i = ALC_PHY_TIMEOUT; i > 0; i--) {
+		microdelay(5);
+		v = csr32r(ctlr, ALC_MDIO);
+		if ((v & MDIO_OP_BUSY) == 0)
+			break;
+	}
+
+	if (i == 0) {
+		print("%s: phy read timeout: phy %d, reg %d\n", ctlr->edev->name, phy, reg);
+		return (0);
+	}
+	return ((v & MDIO_DATA_MASK) >> MDIO_DATA_SHIFT);
+}
+
+static int
+mii_read(Ctlr *ctlr, int phy, int reg)
+{
+	uint v;
+
+	if (phy != ctlr->phy)
+		return 0;
+
+	if ((ctlr->flags & alcfl_ar816x) != 0)
+		v = mii_read_816x(ctlr, phy, reg);
+	else
+		v = mii_read_813x(ctlr, phy, reg);
+	return v;
+}
+static int
+phy_mii_read(Mii* mii, int pa, int ra)
+{
+	return mii_read(mii->ctlr, pa, ra);
+}
+
+static int
+phy_mii_write(Mii* mii, int pa, int ra, int data)
+{
+	mii_write(mii->ctlr, pa, ra, data);
+	return 0;
+}
+
+static int
+miidbg_read(Ctlr *ctlr, int reg)
+{
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, reg);
+	return mii_read(ctlr, ctlr->phy, ALC_MII_DBG_DATA);
+}
+
+static void
+miidbg_write(Ctlr *ctlr, int reg, int val)
+{
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR,
+	    reg);
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA,
+	    val);
+}
+
+static int
+miiext_read(Ctlr *ctlr, int devaddr, int reg)
+{
+	uint clk, v = 0;
+	int i;
+
+	csr32w(ctlr, ALC_EXT_MDIO, EXT_MDIO_REG(reg) |
+	    EXT_MDIO_DEVADDR(devaddr));
+	if ((ctlr->flags & alcfl_link) != 0)
+		clk = MDIO_CLK_25_128;
+	else
+		clk = MDIO_CLK_25_4;
+	csr32w(ctlr, ALC_MDIO, MDIO_OP_EXECUTE | MDIO_OP_READ |
+	    MDIO_SUP_PREAMBLE | clk | MDIO_MODE_EXT);
+	for (i = ALC_PHY_TIMEOUT; i > 0; i--) {
+		microdelay(5);
+		v = csr32r(ctlr, ALC_MDIO);
+		if ((v & MDIO_OP_BUSY) == 0)
+			break;
+	}
+
+	if (i == 0) {
+		print("%s: phy ext read timeout: phy %d, reg %d\n",
+		    ctlr->edev->name, devaddr, reg);
+		return 0;
+	}
+	return ((v & MDIO_DATA_MASK) >> MDIO_DATA_SHIFT);
+}
+
+static void
+miiext_write(Ctlr *ctlr, int devaddr, int reg, int val)
+{
+	uint clk, v;
+	int i;
+
+	csr32w(ctlr, ALC_EXT_MDIO, EXT_MDIO_REG(reg) |
+	    EXT_MDIO_DEVADDR(devaddr));
+	if ((ctlr->flags & alcfl_link) != 0)
+		clk = MDIO_CLK_25_128;
+	else
+		clk = MDIO_CLK_25_4;
+	csr32w(ctlr, ALC_MDIO, MDIO_OP_EXECUTE | MDIO_OP_WRITE |
+	    ((val & MDIO_DATA_MASK) << MDIO_DATA_SHIFT) |
+	    MDIO_SUP_PREAMBLE | clk | MDIO_MODE_EXT);
+	for (i = ALC_PHY_TIMEOUT; i > 0; i--) {
+		microdelay(5);
+		v = csr32r(ctlr, ALC_MDIO);
+		if ((v & MDIO_OP_BUSY) == 0)
+			break;
+	}
+	if (i == 0)
+		print("%s: phy ext write timeout: phy %d, reg %d\n", ctlr->edev->name, devaddr, reg);
+}
+
+
+static void
+phy_reset_816x(Ctlr *ctlr)
+{
+	uint val;
+
+	val = csr32r(ctlr, ALC_GPHY_CFG);
+	val &= ~(GPHY_CFG_EXT_RESET | GPHY_CFG_LED_MODE |
+	    GPHY_CFG_GATE_25M_ENB | GPHY_CFG_PHY_IDDQ | GPHY_CFG_PHY_PLL_ON |
+	    GPHY_CFG_PWDOWN_HW | GPHY_CFG_100AB_ENB);
+	val |= GPHY_CFG_SEL_ANA_RESET;
+	/* Disable PHY hibernation. */
+	val &= ~(GPHY_CFG_HIB_PULSE | GPHY_CFG_HIB_EN);
+	csr32w(ctlr, ALC_GPHY_CFG, val);
+	microdelay(10);
+	csr32w(ctlr, ALC_GPHY_CFG, val | GPHY_CFG_EXT_RESET);
+	microdelay(800);
+	/* Vendor PHY magic. */
+	/* Disable PHY hibernation. */
+	miidbg_write(ctlr, MII_DBG_LEGCYPS,
+	    DBG_LEGCYPS_DEFAULT & ~DBG_LEGCYPS_ENB);
+	miidbg_write(ctlr, MII_DBG_HIBNEG, DBG_HIBNEG_DEFAULT &
+	    ~(DBG_HIBNEG_PSHIB_EN | DBG_HIBNEG_HIB_PULSE));
+	miidbg_write(ctlr, MII_DBG_GREENCFG, DBG_GREENCFG_DEFAULT);
+	/* XXX Disable EEE. */
+	val = csr32r(ctlr, ALC_LPI_CTL);
+	val &= ~LPI_CTL_ENB;
+	csr32w(ctlr, ALC_LPI_CTL, val);
+	miiext_write(ctlr, MII_EXT_ANEG, MII_EXT_ANEG_LOCAL_EEEADV, 0);
+	/* PHY power saving. */
+	miidbg_write(ctlr, MII_DBG_TST10BTCFG, DBG_TST10BTCFG_DEFAULT);
+	miidbg_write(ctlr, MII_DBG_SRDSYSMOD, DBG_SRDSYSMOD_DEFAULT);
+	miidbg_write(ctlr, MII_DBG_TST100BTCFG, DBG_TST100BTCFG_DEFAULT);
+	miidbg_write(ctlr, MII_DBG_ANACTL, DBG_ANACTL_DEFAULT);
+	val = miidbg_read(ctlr, MII_DBG_GREENCFG2);
+	val &= ~DBG_GREENCFG2_GATE_DFSE_EN;
+	miidbg_write(ctlr, MII_DBG_GREENCFG2, val);
+	/* RTL8139C, 120m issue. */
+	miiext_write(ctlr, MII_EXT_ANEG, MII_EXT_ANEG_NLP78,
+	    ANEG_NLP78_120M_DEFAULT);
+	miiext_write(ctlr, MII_EXT_ANEG, MII_EXT_ANEG_S3DIG10,
+	    ANEG_S3DIG10_DEFAULT);
+	if ((ctlr->flags & alcfl_link_war) != 0) {
+		/* Turn off half amplitude. */
+		val = miiext_read(ctlr, MII_EXT_PCS, MII_EXT_CLDCTL3);
+		val |= EXT_CLDCTL3_BP_CABLE1TH_DET_GT;
+		miiext_write(ctlr, MII_EXT_PCS, MII_EXT_CLDCTL3, val);
+		/* Turn off Green feature. */
+		val = miidbg_read(ctlr, MII_DBG_GREENCFG2);
+		val |= DBG_GREENCFG2_BP_GREEN;
+		miidbg_write(ctlr, MII_DBG_GREENCFG2, val);
+		/* Turn off half bias. */
+		val = miiext_read(ctlr, MII_EXT_PCS, MII_EXT_CLDCTL5);
+		val |= EXT_CLDCTL5_BP_VD_HLFBIAS;
+		miiext_write(ctlr, MII_EXT_PCS, MII_EXT_CLDCTL5, val);
+	}
+}
+
+static void
+phy_reset_813x(Ctlr *ctlr)
+{
+	uint data;
+
+	/* Reset magic from Linux. */
+	csr16w(ctlr, ALC_GPHY_CFG, GPHY_CFG_SEL_ANA_RESET);
+	csr16r(ctlr, ALC_GPHY_CFG);
+	microdelay(10 * 1000);
+
+	csr16w(ctlr, ALC_GPHY_CFG, GPHY_CFG_EXT_RESET |
+	    GPHY_CFG_SEL_ANA_RESET);
+	csr16r(ctlr, ALC_GPHY_CFG);
+	microdelay(10 * 1000);
+
+	/* DSP fixup, Vendor magic. */
+	if (ctlr->did == attansic_l2c_1) {
+		mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, 0x000A);
+		data = mii_read(ctlr, ctlr->phy, ALC_MII_DBG_DATA);
+		mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, data & 0xDFFF);
+	}
+	if (ctlr->did == attansic_l1d ||
+	    ctlr->did == attansic_l1d_1 ||
+	    ctlr->did == attansic_l2c_1 ||
+	    ctlr->did == attansic_l2c_2) {
+		mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, 0x003B);
+		data = mii_read(ctlr, ctlr->phy, ALC_MII_DBG_DATA);
+		mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, data & 0xFFF7);
+		microdelay(20 * 1000);
+	}
+	if (ctlr->did == attansic_l1d) {
+		mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, 0x0029);
+		mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, 0x929D);
+	}
+	if (ctlr->did == attansic_l1c ||
+	    ctlr->did == attansic_l2c ||
+	    ctlr->did == attansic_l1d_1 ||
+	    ctlr->did == attansic_l2c_2) {
+		mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, 0x0029);
+		mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, 0xB6DD);
+	}
+
+	/* Load DSP codes, vendor magic. */
+	data = ANA_LOOP_SEL_10BT | ANA_EN_MASK_TB | ANA_EN_10BT_IDLE |
+	    ((1 << ANA_INTERVAL_SEL_TIMER_SHIFT) & ANA_INTERVAL_SEL_TIMER_MASK);
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, MII_ANA_CFG18);
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, data);
+
+	data = ((2 << ANA_SERDES_CDR_BW_SHIFT) & ANA_SERDES_CDR_BW_MASK) |
+	    ANA_SERDES_EN_DEEM | ANA_SERDES_SEL_HSP | ANA_SERDES_EN_PLL |
+	    ANA_SERDES_EN_LCKDT;
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, MII_ANA_CFG5);
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, data);
+
+	data = ((44 << ANA_LONG_CABLE_TH_100_SHIFT) &
+	    ANA_LONG_CABLE_TH_100_MASK) |
+	    ((33 << ANA_SHORT_CABLE_TH_100_SHIFT) &
+	    ANA_SHORT_CABLE_TH_100_SHIFT) |
+	    ANA_BP_BAD_LINK_ACCUM | ANA_BP_SMALL_BW;
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, MII_ANA_CFG54);
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, data);
+
+	data = ((11 << ANA_IECHO_ADJ_3_SHIFT) & ANA_IECHO_ADJ_3_MASK) |
+	    ((11 << ANA_IECHO_ADJ_2_SHIFT) & ANA_IECHO_ADJ_2_MASK) |
+	    ((8 << ANA_IECHO_ADJ_1_SHIFT) & ANA_IECHO_ADJ_1_MASK) |
+	    ((8 << ANA_IECHO_ADJ_0_SHIFT) & ANA_IECHO_ADJ_0_MASK);
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, MII_ANA_CFG4);
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, data);
+
+	data = ((7 & ANA_MANUL_SWICH_ON_SHIFT) & ANA_MANUL_SWICH_ON_MASK) |
+	    ANA_RESTART_CAL | ANA_MAN_ENABLE | ANA_SEL_HSP | ANA_EN_HB |
+	    ANA_OEN_125M;
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, MII_ANA_CFG0);
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, data);
+	microdelay(1000);
+
+	/* Disable hibernation. */
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, 0x0029);
+	data = mii_read(ctlr, ctlr->phy, ALC_MII_DBG_DATA);
+	data &= ~0x8000;
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, data);
+
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, 0x000B);
+	data = mii_read(ctlr, ctlr->phy, ALC_MII_DBG_DATA);
+	data &= ~0x8000;
+	mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, data);
+}
+
+static void
+phy_reset(Ctlr *ctlr)
+{
+	if (ctlr->flags & alcfl_ar816x)
+		phy_reset_816x(ctlr);
+	else
+		phy_reset_813x(ctlr);
+	mii_write(ctlr, ctlr->phy, 0x12, 0xc00); /* enable phy interrupts */
+}
+
+static void
+get_mac_par(Ctlr *ctlr)
+{
+	uint ea[2];
+
+	ea[0] = csr32r(ctlr, ALC_PAR0);
+	ea[1] = csr32r(ctlr, ALC_PAR1);
+	ctlr->ra[0] = (ea[1] >> 8) & 0xFF;
+	ctlr->ra[1] = (ea[1] >> 0) & 0xFF;
+	ctlr->ra[2] = (ea[0] >> 24) & 0xFF;
+	ctlr->ra[3] = (ea[0] >> 16) & 0xFF;
+	ctlr->ra[4] = (ea[0] >> 8) & 0xFF;
+	ctlr->ra[5] = (ea[0] >> 0) & 0xFF;
+}
+
+
+static void
+get_mac_816x(Ctlr *ctlr)
+{
+	uint reg = 0;
+	int i, reloaded;
+
+	reloaded = 0;
+	/* Try to reload station address via TWSI. */
+	for (i = 100; i > 0; i--) {
+		reg = csr32r(ctlr, ALC_SLD);
+		if ((reg & (SLD_PROGRESS | SLD_START)) == 0)
+			break;
+		microdelay(1000);
+	}
+	if (i != 0) {
+		csr32w(ctlr, ALC_SLD, reg | SLD_START);
+		for (i = 100; i > 0; i--) {
+			microdelay(1000);
+			reg = csr32r(ctlr, ALC_SLD);
+			if ((reg & SLD_START) == 0)
+				break;
+		}
+		if (i != 0)
+			reloaded++;
+		else
+			print("%s: reloading station address via TWSI timed"
+			    "out!\n", ctlr->edev->name);
+	}
+
+	/* Try to reload station address from EEPROM or FLASH. */
+	if (reloaded == 0) {
+		reg = csr32r(ctlr, ALC_EEPROM_LD);
+		if ((reg & (EEPROM_LD_EEPROM_EXIST |
+		    EEPROM_LD_FLASH_EXIST)) != 0) {
+			for (i = 100; i > 0; i--) {
+				reg = csr32r(ctlr, ALC_EEPROM_LD);
+				if ((reg & (EEPROM_LD_PROGRESS |
+				    EEPROM_LD_START)) == 0)
+					break;
+				microdelay(1000);
+			}
+			if (i != 0) {
+				csr32w(ctlr, ALC_EEPROM_LD, reg |
+				    EEPROM_LD_START);
+				for (i = 100; i > 0; i--) {
+					microdelay(1000);
+					reg = csr32r(ctlr, ALC_EEPROM_LD);
+					if ((reg & EEPROM_LD_START) == 0)
+						break;
+				}
+			} else
+				print("%s: reloading EEPROM/FLASH timed out!\n",
+				    ctlr->edev->name);
+		}
+	}
+	get_mac_par(ctlr);
+}
+
+static void
+get_mac_813x(Ctlr *ctlr)
+{
+	uint opt;
+	ushort val;
+	int eeprom, i;
+
+	eeprom = 0;
+	opt = csr32r(ctlr, ALC_OPT_CFG);
+	if ((csr32r(ctlr, ALC_MASTER_CFG) & MASTER_OTP_SEL) != 0 &&
+	    (csr32r(ctlr, ALC_TWSI_DEBUG) & TWSI_DEBUG_DEV_EXIST) != 0) {
+		/*
+		 * EEPROM found, let TWSI reload EEPROM configuration.
+		 * This will set ethernet address of controller.
+		 */
+		eeprom++;
+		switch (ctlr->did) {
+		case attansic_l1c:
+		case attansic_l2c:
+			if ((opt & OPT_CFG_CLK_ENB) == 0) {
+				opt |= OPT_CFG_CLK_ENB;
+				csr32w(ctlr, ALC_OPT_CFG, opt);
+				csr32r(ctlr, ALC_OPT_CFG);
+				microdelay(1000);
+			}
+			break;
+		case attansic_l1d:
+		case attansic_l1d_1:
+		case attansic_l2c_1:
+		case attansic_l2c_2:
+			mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, 0x00);
+			val = mii_read(ctlr, ctlr->phy, ALC_MII_DBG_DATA);
+			mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, val & 0xFF7F);
+			mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, 0x3B);
+			val = mii_read(ctlr, ctlr->phy, ALC_MII_DBG_DATA);
+			mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, val | 0x0008);
+			microdelay(20);
+			break;
+		}
+
+		csr32w(ctlr, ALC_LTSSM_ID_CFG,
+		    csr32r(ctlr, ALC_LTSSM_ID_CFG) & ~LTSSM_ID_WRO_ENB);
+		csr32w(ctlr, ALC_WOL_CFG, 0);
+		csr32r(ctlr, ALC_WOL_CFG);
+
+		csr32w(ctlr, ALC_TWSI_CFG, csr32r(ctlr, ALC_TWSI_CFG) |
+		    TWSI_CFG_SW_LD_START);
+		for (i = 100; i > 0; i--) {
+			microdelay(1000);
+			if ((csr32r(ctlr, ALC_TWSI_CFG) &
+			    TWSI_CFG_SW_LD_START) == 0)
+				break;
+		}
+		if (i == 0)
+			print("%s: reloading EEPROM timeout!\n",
+			    ctlr->edev->name);
+	} else {
+		print("%s: EEPROM not found!\n", ctlr->edev->name);
+	}
+	if (eeprom != 0) {
+		switch (ctlr->did) {
+		case attansic_l1c:
+		case attansic_l2c:
+			if ((opt & OPT_CFG_CLK_ENB) != 0) {
+				opt &= ~OPT_CFG_CLK_ENB;
+				csr32w(ctlr, ALC_OPT_CFG, opt);
+				csr32r(ctlr, ALC_OPT_CFG);
+				microdelay(1000);
+			}
+			break;
+		case attansic_l1d:
+		case attansic_l1d_1:
+		case attansic_l2c_1:
+		case attansic_l2c_2:
+			mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, 0x00);
+			val = mii_read(ctlr, ctlr->phy, ALC_MII_DBG_DATA);
+			mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, val | 0x0080);
+			mii_write(ctlr, ctlr->phy, ALC_MII_DBG_ADDR, 0x3B);
+			val = mii_read(ctlr, ctlr->phy, ALC_MII_DBG_DATA);
+			mii_write(ctlr, ctlr->phy, ALC_MII_DBG_DATA, val & 0xFFF7);
+			microdelay(20);
+			break;
+		}
+	}
+	get_mac_par(ctlr);
+}
+
+static void
+get_mac(Ctlr *ctlr)
+{
+	if (ctlr->flags & alcfl_ar816x)
+		get_mac_816x(ctlr);
+	else
+		get_mac_813x(ctlr);
+}
+
+static void
+queue_start(Ctlr *ctlr)
+{
+	uint qcfg[] = {
+		0,
+		RXQ_CFG_QUEUE0_ENB,
+		RXQ_CFG_QUEUE0_ENB | RXQ_CFG_QUEUE1_ENB,
+		RXQ_CFG_QUEUE0_ENB | RXQ_CFG_QUEUE1_ENB | RXQ_CFG_QUEUE2_ENB,
+		RXQ_CFG_ENB
+	};
+	uint cfg;
+
+	/* Enable RxQ. */
+	cfg = csr32r(ctlr, ALC_RXQ_CFG);
+	if ((ctlr->flags & alcfl_ar816x) == 0) {
+		cfg &= ~RXQ_CFG_ENB;
+		cfg |= qcfg[1];
+	} else
+		cfg |= RXQ_CFG_QUEUE0_ENB;
+
+	csr32w(ctlr, ALC_RXQ_CFG, cfg);
+	/* Enable TxQ. */
+	cfg = csr32r(ctlr, ALC_TXQ_CFG);
+	cfg |= TXQ_CFG_ENB;
+	csr32w(ctlr, ALC_TXQ_CFG, cfg);
+}
+
+static void
+queue_stop(Ctlr *ctlr)
+{
+	uint reg;
+	int i;
+
+	/* Disable RxQ. */
+	reg = csr32r(ctlr, ALC_RXQ_CFG);
+	if ((ctlr->flags & alcfl_ar816x) == 0) {
+		if ((reg & RXQ_CFG_ENB) != 0) {
+			reg &= ~RXQ_CFG_ENB;
+			csr32w(ctlr, ALC_RXQ_CFG, reg);
+		}
+	} else {
+		if ((reg & RXQ_CFG_QUEUE0_ENB) != 0) {
+			reg &= ~RXQ_CFG_QUEUE0_ENB;
+			csr32w(ctlr, ALC_RXQ_CFG, reg);
+		}
+	}
+	/* Disable TxQ. */
+	reg = csr32r(ctlr, ALC_TXQ_CFG);
+	if ((reg & TXQ_CFG_ENB) != 0) {
+		reg &= ~TXQ_CFG_ENB;
+		csr32w(ctlr, ALC_TXQ_CFG, reg);
+	}
+	microdelay(40);
+	for (i = ALC_TIMEOUT; i > 0; i--) {
+		reg = csr32r(ctlr, ALC_IDLE_STATUS);
+		if ((reg & (IDLE_STATUS_RXQ | IDLE_STATUS_TXQ)) == 0)
+			break;
+		microdelay(10);
+	}
+	if (i == 0)
+		print("%s: could not disable RxQ/TxQ (0x%08x)!\n", ctlr->edev->name, reg);
+}
+
+static void
+mac_config(Ctlr *ctlr)
+{
+	uint reg;
+	MiiPhy *phy;
+	phy = ctlr->mii->curphy;
+	if (phy == nil)
+		return;
+	reg = csr32r(ctlr, ALC_MAC_CFG);
+	reg &= ~(MAC_CFG_FULL_DUPLEX | MAC_CFG_TX_FC | MAC_CFG_RX_FC |
+	    MAC_CFG_SPEED_MASK);
+	if ((ctlr->did == attansic_l1d ||
+	    ctlr->did == attansic_l1d_1 ||
+	    ctlr->did == attansic_l2c_2 ||
+	    ctlr->flags & alcfl_ar816x) != 0)
+		reg |= MAC_CFG_HASH_ALG_CRC32 | MAC_CFG_SPEED_MODE_SW;
+	/* Reprogram MAC with resolved speed/duplex. */
+	switch (phy->speed) {
+	case 10:
+	case 100:
+		reg |= MAC_CFG_SPEED_10_100;
+		break;
+	case 1000:
+		reg |= MAC_CFG_SPEED_1000;
+		break;
+	}
+	if (phy->fd) {
+		reg |= MAC_CFG_FULL_DUPLEX;
+		if (phy->tfc != 0)
+			reg |= MAC_CFG_TX_FC;
+		if (phy->rfc != 0)
+			reg |= MAC_CFG_RX_FC;
+	}
+	csr32w(ctlr, ALC_MAC_CFG, reg);
+}
+
+
+static void
+mac_stop(Ctlr *ctlr)
+{
+	uint reg;
+	int i;
+
+	queue_stop(ctlr);
+	/* Disable Rx/Tx MAC. */
+	reg = csr32r(ctlr, ALC_MAC_CFG);
+	if ((reg & (MAC_CFG_TX_ENB | MAC_CFG_RX_ENB)) != 0) {
+		reg &= ~(MAC_CFG_TX_ENB | MAC_CFG_RX_ENB);
+		csr32w(ctlr, ALC_MAC_CFG, reg);
+	}
+	for (i = ALC_TIMEOUT; i > 0; i--) {
+		reg = csr32r(ctlr, ALC_IDLE_STATUS);
+		if ((reg & (IDLE_STATUS_RXMAC | IDLE_STATUS_TXMAC)) == 0)
+			break;
+		microdelay(10);
+	}
+	if (i == 0)
+		print("%s: could not disable Rx/Tx MAC(0x%08x)!\n", ctlr->edev->name, reg);
+}
+
+static void
+osc_reset(Ctlr *ctlr)
+{
+	uint reg;
+
+	reg = csr32r(ctlr, ALC_MISC3);
+	reg &= ~MISC3_25M_BY_SW;
+	reg |= MISC3_25M_NOTO_INTNL;
+	csr32w(ctlr, ALC_MISC3, reg);
+	reg = csr32r(ctlr, ALC_MISC);
+	if ((ctlr->rid>>3) >= AR816X_REV_B0) {
+		/*
+		 * Restore over-current protection default value.
+		 * This value could be reset by MAC reset.
+		 */
+		reg &= ~MISC_PSW_OCP_MASK;
+		reg |= (MISC_PSW_OCP_DEFAULT << MISC_PSW_OCP_SHIFT);
+		reg &= ~MISC_INTNLOSC_OPEN;
+		csr32w(ctlr, ALC_MISC, reg);
+		csr32w(ctlr, ALC_MISC, reg | MISC_INTNLOSC_OPEN);
+		reg = csr32r(ctlr, ALC_MISC2);
+		reg &= ~MISC2_CALB_START;
+		csr32w(ctlr, ALC_MISC2, reg);
+		csr32w(ctlr, ALC_MISC2, reg | MISC2_CALB_START);
+	} else {
+		reg &= ~MISC_INTNLOSC_OPEN;
+		/* Disable isolate for revision A devices. */
+		if ((ctlr->rid>>3) <= AR816X_REV_A1)
+			reg &= ~MISC_ISO_ENB;
+		csr32w(ctlr, ALC_MISC, reg | MISC_INTNLOSC_OPEN);
+		csr32w(ctlr, ALC_MISC, reg);
+	}
+	microdelay(20);
+}
+
+static void
+alc_reset(Ctlr *ctlr)
+{
+	uint reg, pmcfg = 0;
+	int i;
+	if ((ctlr->flags & alcfl_ar816x) != 0) {
+		/* Reset workaround. */
+	        csr32w(ctlr, ALC_MBOX_RD0_PROD_IDX, 1);
+		if ((ctlr->rid>>3) <= AR816X_REV_A1 &&
+		    ((ctlr->rid>>3) & 0x01) != 0) {
+			/* Disable L0s/L1s before reset. */
+			pmcfg = csr32r(ctlr, ALC_PM_CFG);
+			if ((pmcfg & (PM_CFG_ASPM_L0S_ENB |
+			    PM_CFG_ASPM_L1_ENB))!= 0) {
+				pmcfg &= ~(PM_CFG_ASPM_L0S_ENB |
+				    PM_CFG_ASPM_L1_ENB);
+				csr32w(ctlr, ALC_PM_CFG, pmcfg);
+			}
+		}
+	}
+	reg = csr32r(ctlr, ALC_MASTER_CFG);
+	reg |= MASTER_OOB_DIS_OFF | MASTER_RESET;
+	csr32w(ctlr, ALC_MASTER_CFG, reg);
+
+	if ((ctlr->flags & alcfl_ar816x) != 0) {
+		for (i = ALC_RESET_TIMEOUT; i > 0; i--) {
+			microdelay(10);
+			if (csr32r(ctlr, ALC_MBOX_RD0_PROD_IDX) == 0)
+				break;
+		}
+		if (i == 0)
+			print("MAC reset timeout!\n");
+	}
+	for (i = ALC_RESET_TIMEOUT; i > 0; i--) {
+		microdelay(10);
+		if ((csr32r(ctlr, ALC_MASTER_CFG) & MASTER_RESET) == 0)
+			break;
+	}
+	if (i == 0)
+		print("%s: master reset timeout!\n", ctlr->edev->name);
+
+	for (i = ALC_RESET_TIMEOUT; i > 0; i--) {
+		reg = csr32r(ctlr, ALC_IDLE_STATUS);
+		if ((reg & (IDLE_STATUS_RXMAC | IDLE_STATUS_TXMAC |
+		    IDLE_STATUS_RXQ | IDLE_STATUS_TXQ)) == 0)
+			break;
+		microdelay(10);
+	}
+
+	if (i == 0)
+		print("%s: reset timeout(0x%08x)!\n", ctlr->edev->name, reg);
+
+	if ((ctlr->flags & alcfl_ar816x) != 0) {
+		if ((ctlr->rid>>3) <= AR816X_REV_A1 &&
+		    ((ctlr->rid>>3) & 0x01) != 0) {
+			reg = csr32r(ctlr, ALC_MASTER_CFG);
+			reg |= MASTER_CLK_SEL_DIS;
+			csr32w(ctlr, ALC_MASTER_CFG, reg);
+			/* Restore L0s/L1s config. */
+			if ((pmcfg & (PM_CFG_ASPM_L0S_ENB |
+			    PM_CFG_ASPM_L1_ENB)) != 0)
+				csr32w(ctlr, ALC_PM_CFG, pmcfg);
+		}
+		osc_reset(ctlr);
+		reg = csr32r(ctlr, ALC_MISC3);
+		reg &= ~MISC3_25M_BY_SW;
+		reg |= MISC3_25M_NOTO_INTNL;
+		csr32w(ctlr, ALC_MISC3, reg);
+		reg = csr32r(ctlr, ALC_MISC);
+		reg &= ~MISC_INTNLOSC_OPEN;
+		if ((ctlr->rid>>3) <= AR816X_REV_A1)
+			reg &= ~MISC_ISO_ENB;
+		csr32w(ctlr, ALC_MISC, reg);
+		microdelay(20);
+	}
+	if ((ctlr->flags & alcfl_ar816x) != 0 ||
+	    ctlr->did == attansic_l2c_1 ||
+	    ctlr->did == attansic_l2c_2)
+		csr32w(ctlr, ALC_SERDES_LOCK,
+		    csr32r(ctlr, ALC_SERDES_LOCK) |
+		    SERDES_MAC_CLK_SLOWDOWN | SERDES_PHY_CLK_SLOWDOWN);
+}
+
+static int
+reset(Ctlr *ctlr)
+{
+	phy_reset(ctlr);
+	mac_stop(ctlr);
+	get_mac(ctlr);
+	alc_reset(ctlr);
+	return 0;
+}
+
+static void
+disable_l0s_l1(Ctlr *ctlr)
+{
+	uint pmcfg;
+	if ((ctlr->flags & alcfl_ar816x) != 0) {
+		return;
+	}
+	/* Another magic from vendor. */
+	pmcfg = csr32r(ctlr, ALC_PM_CFG);
+	pmcfg &= ~(PM_CFG_L1_ENTRY_TIMER_MASK | PM_CFG_CLK_SWH_L1 |
+		   PM_CFG_ASPM_L0S_ENB | PM_CFG_ASPM_L1_ENB |
+		   PM_CFG_MAC_ASPM_CHK | PM_CFG_SERDES_PD_EX_L1);
+	pmcfg |= PM_CFG_SERDES_BUDS_RX_L1_ENB |
+		PM_CFG_SERDES_PLL_L1_ENB | PM_CFG_SERDES_L1_ENB;
+	csr32w(ctlr, ALC_PM_CFG, pmcfg);
+}
+
+static uint dma_burst[] = { 128, 256, 512, 1024, 2048, 4096, 0, 0 };
+
+static void
+pcie_init(Ctlr *ctlr, int base)
+{
+	const char *aspm_state[] = { "L0s/L1", "L0s", "L1", "L0s/L1" };
+	uint val;
+	int state;
+
+	/* Clear data link and flow-control protocol error. */
+	val = csr32r(ctlr, ALC_PEX_UNC_ERR_SEV);
+	val &= ~(PEX_UNC_ERR_SEV_DLP | PEX_UNC_ERR_SEV_FCP);
+	csr32w(ctlr, ALC_PEX_UNC_ERR_SEV, val);
+
+	if ((ctlr->flags & alcfl_ar816x) == 0) {
+		uint cap, ctl;
+		csr32w(ctlr, ALC_LTSSM_ID_CFG,
+		    csr32r(ctlr, ALC_LTSSM_ID_CFG) & ~LTSSM_ID_WRO_ENB);
+		csr32w(ctlr, ALC_PCIE_PHYMISC,
+		    csr32r(ctlr, ALC_PCIE_PHYMISC) |
+		    PCIE_PHYMISC_FORCE_RCV_DET);
+		if (ctlr->did == attansic_l2c_1 &&
+		    ctlr->rid == ATHEROS_AR8152_B_V10) {
+			val = csr32r(ctlr, ALC_PCIE_PHYMISC2);
+			val &= ~(PCIE_PHYMISC2_SERDES_CDR_MASK |
+			    PCIE_PHYMISC2_SERDES_TH_MASK);
+			val |= 3 << PCIE_PHYMISC2_SERDES_CDR_SHIFT;
+			val |= 3 << PCIE_PHYMISC2_SERDES_TH_SHIFT;
+			csr32w(ctlr, ALC_PCIE_PHYMISC2, val);
+		}
+		/* Disable ASPM L0S and L1. */
+		cap = pcicfgr32(ctlr->pcidev, base + 0xc) >> 16;
+		if ((cap & 0x00000c00) != 0) {
+			ctl = pcicfgr32(ctlr->pcidev, base + 0x10) >> 16;
+			if ((ctl & 0x08) != 0)
+				ctlr->rcb = DMA_CFG_RCB_128;
+			print("%s: RCB %d bytes\n",
+			      ctlr->edev->name,
+			      ctlr->rcb == DMA_CFG_RCB_64 ? 64 : 128);
+			state = ctl & 0x03;
+			if (state & 0x01)
+				ctlr->flags |= alcfl_l0s;
+			if (state & 0x02)
+				ctlr->flags |= alcfl_l1s;
+			print("%s: ASPM %s %s\n",
+			      ctlr->edev->name,
+			      aspm_state[state],
+			      state == 0 ? "disabled" : "enabled");
+			disable_l0s_l1(ctlr);
+		}
+	} else {
+		val = csr32r(ctlr, ALC_PDLL_TRNS1);
+		val &= ~PDLL_TRNS1_D3PLLOFF_ENB;
+		csr32w(ctlr, ALC_PDLL_TRNS1, val);
+		val = csr32r(ctlr, ALC_MASTER_CFG);
+		if (AR816X_REV(ctlr->rid) <= AR816X_REV_A1 &&
+		    (ctlr->rid & 0x01) != 0) {
+			if ((val & MASTER_WAKEN_25M) == 0 ||
+			    (val & MASTER_CLK_SEL_DIS) == 0) {
+				val |= MASTER_WAKEN_25M | MASTER_CLK_SEL_DIS;
+				csr32w(ctlr, ALC_MASTER_CFG, val);
+			}
+		} else {
+			if ((val & MASTER_WAKEN_25M) == 0 ||
+			    (val & MASTER_CLK_SEL_DIS) != 0) {
+				val |= MASTER_WAKEN_25M;
+				val &= ~MASTER_CLK_SEL_DIS;
+				csr32w(ctlr, ALC_MASTER_CFG, val);
+			}
+		}
+	}
+}
+
+static void
+alcpci(Ether *edev)
+{
+	MiiPhy *phy;
+	Pcidev *p;
+	Ctlr *ctlr;
+	void *mem;
+	int flags, burst;
+	int capoff;
+	p = nil;
+	while(p = pcimatch(p, 0, 0)){
+		if(p->ccrb != 0x02 || p->ccru != 0)
+			continue;
+		if(p->mem[0].bar & 1)
+			continue;
+		flags = 0;
+		switch((p->did<<16)|p->vid){
+		default:
+			continue;
+		case attansic_e2200:
+		case attansic_e2400:
+		case attansic_e2500:
+			flags |= alcfl_e2x00;
+		case attansic_ar8161:
+			if ((p->rid>>3) == 0)
+				flags |= alcfl_link_war;
+		case attansic_ar8171:
+			flags |= alcfl_ar816x;
+			break;
+		case attansic_ar8162:
+		case attansic_ar8172:
+			flags |= alcfl_fasteth | alcfl_ar816x;
+			break;
+		case attansic_l2c_1:
+		case attansic_l2c_2:
+			flags |= alcfl_aps;
+		case attansic_l2c: /* eeepc 1000px */
+			flags |= alcfl_fasteth;
+			break;
+		case attansic_l1d:
+		case attansic_l1d_1:
+			flags |= alcfl_aps;
+		case attansic_l1e:
+		case attansic_l1:
+		case attansic_l1c:
+		case attansic_l2:
+			break;
+		}
+		flags |= alcfl_jumbo;
+		mem = vmap(p->mem[0].bar & ~0xF, p->mem[0].size);
+		if(mem == nil){
+			print("alc: can't map %llux\n", p->mem[0].bar & ~0xF);
+			continue;
+		}
+		ctlr = malloc(sizeof(Ctlr));
+		if (ctlr == nil) {
+			print("alc: can't allocate memory\n");
+			continue;
+		}
+		ctlr->edev = edev;
+		ctlr->flags = flags;
+		ctlr->phy = 0;
+		ctlr->port = p->mem[0].bar & ~0x0F;
+		ctlr->pcidev = p;
+		ctlr->did = (p->did<<16)|p->vid;
+		pcienable(p);
+		//		ctlr->cls = p->cls*4;
+		ctlr->mem = mem;
+		ctlr->rid = p->rid;
+		capoff = pcicap(p, PciCapPCIe);
+		if (capoff >=0) {
+			ctlr->flags |= alcfl_pcie;
+			ctlr->excap = capoff;
+			burst = csr16r(ctlr, capoff + 0x08);
+			ctlr->dma_rd_burst = (burst & 0x7000) >> 12;
+			ctlr->dma_wr_burst = (burst & 0x00e0) >> 5;
+			if (dma_burst[ctlr->dma_rd_burst] > 1024)
+				ctlr->dma_rd_burst = 3;
+			if (dma_burst[ctlr->dma_wr_burst] > 1024)
+				ctlr->dma_wr_burst = 3;
+			if ((ctlr->flags & alcfl_e2x00) != 0)
+				ctlr->dma_wr_burst = 0;
+			pcie_init(ctlr, capoff);
+		}
+		if (reset(ctlr)) {
+			free(ctlr);
+			vunmap(mem, p->mem[0].size);
+			continue;
+		}
+		ctlr->mii = malloc(sizeof(Mii));
+		if (ctlr->mii == nil) {
+			print("alc: can not allocate memory\n");
+			free(ctlr);
+			vunmap(mem, p->mem[0].size);
+			continue;
+		}
+		ctlr->mii->ctlr = ctlr;
+		ctlr->mii->mir = phy_mii_read;
+		ctlr->mii->miw = phy_mii_write;
+		if (mii(ctlr->mii, 1) == 0 || (phy = ctlr->mii->curphy) == nil) {
+			print("alc: can not found phy\n");
+			free(ctlr->mii);
+			free(ctlr);
+			vunmap(mem, p->mem[0].size);
+			continue;
+		}
+		USED(phy);
+		pcisetbme(p);
+		if (alcctlrhead != nil)
+			alcctlrtail->next = ctlr;
+		else
+			alcctlrhead = ctlr;
+		alcctlrtail = ctlr;
+	}
+}
+
+static void
+rxrefill(Ctlr* ctlr)
+{
+	RxDesc *rd;
+	int rdt;
+	Block *bp;
+
+	rdt = ctlr->rdt;
+	while (NEXT(rdt, DSCN) != ctlr->rdh) {
+		rd = &ctlr->rx_ring[rdt];
+		if (ctlr->rb[rdt] == nil) {
+			bp = allocb(RX_BUF_SIZE_MAX);
+			bp->rp = bp->lim - RX_BUF_SIZE_MAX;
+			bp->wp = bp->rp;
+			ctlr->rb[rdt] = bp;
+			rd->addr = PCIWADDR(bp->rp); /* todo le/be? */
+		}
+		memset(&ctlr->rrx_ring[rdt], 0, sizeof(RxRdesc));
+		coherence();
+		rdt = NEXT(rdt, DSCN);
+		ctlr->rdfree++;
+	}
+	ctlr->rdt = rdt;
+	if ((ctlr->flags & alcfl_ar816x) != 0) {
+		csr16w(ctlr, ALC_MBOX_RD0_PROD_IDX, (ushort)ctlr->rdt);
+	} else {
+		csr32w(ctlr, ALC_MBOX_RD0_PROD_IDX, ctlr->rdt);
+	}
+}
+
+static int
+rxinit(Ctlr *ctlr)
+{
+	int i;
+	Block *bp;
+
+	for (i=0; i<DSCN; i++) {
+		if ((bp = ctlr->rb[i]) != nil) {
+			ctlr->rb[i] = nil;
+			freeb(bp);
+		}
+		memset(&ctlr->rx_ring[i], 0, sizeof(RxDesc));
+		memset(&ctlr->rrx_ring[i], 0, sizeof(RxRdesc));
+	}
+	ctlr->rdfree = 0;
+	rxrefill(ctlr);
+	return 0;
+}
+
+static int
+txinit(Ctlr *ctlr)
+{
+	int i;
+	Block *bp;
+
+	for (i=0; i<DSCN; i++) {
+		if ((bp = ctlr->tb[i]) != nil) {
+			ctlr->tb[i] = nil;
+			freeb(bp);
+		}
+		memset(&ctlr->tx_ring[i], 0, sizeof(TxDesc));
+	}
+	ctlr->tdfree = DSCN;
+	return 0;
+}
+
+static void
+stats_clear(Ctlr *ctlr)
+{
+	int i;
+	for (i = 0; i < 24; i++) {
+		csr32r(ctlr, ALC_RX_MIB_BASE + i*4);
+	}
+	/* Read Tx statistics. */
+	for (i = 0; i < 25; i++) {
+		csr32r(ctlr, ALC_TX_MIB_BASE + i*4);
+	}
+}
+
+static void
+alc_promisc(void *arg, int on)
+{
+	int rxcfg;
+	Ctlr *ctlr;
+	Ether *edev;
+	edev = arg;
+	ctlr = edev->ctlr;
+	rxcfg = csr32r(ctlr, ALC_MAC_CFG);
+	if (on) {
+		rxcfg |= MAC_CFG_PROMISC;
+	} else {
+		rxcfg &= ~MAC_CFG_PROMISC;
+	}
+	csr32w(ctlr, ALC_MAC_CFG, rxcfg);
+}
+
+static int
+alclim(void* ctlr)
+{
+	return ((Ctlr*)ctlr)->lim != 0;
+}
+
+static int
+alcrim(void* ctlr)
+{
+	return ((Ctlr*)ctlr)->rim != 0;
+}
+
+static void
+rproc(void *arg)
+{
+	RxRdesc *rrd;
+	Block *bp;
+	Ctlr *ctlr;
+	int rdh, nsegs;
+	uint status;
+	Ether *edev;
+
+	edev = arg;
+	ctlr = edev->ctlr;
+
+	for(;;) {
+		ctlr->rim = 0;
+		sleep(&ctlr->rrendez, alcrim, ctlr);
+		rdh = ctlr->rdh;
+		for(;;) {
+			rrd = &ctlr->rrx_ring[rdh];
+			status = letoh32(rrd->status);
+			if ((status & RRD_VALID) == 0)
+				break;
+			nsegs = RRD_RD_CNT(letoh32(rrd->rdinfo));
+			if (nsegs != 1) {
+				print("%s: unexpected segment count\n", ctlr->edev->name);
+				continue;
+			}
+			if ((status &
+			     (RRD_ERR_CRC | RRD_ERR_ALIGN |
+			      RRD_ERR_TRUNC | RRD_ERR_RUNT)) == 0) {
+				bp = ctlr->rb[rdh];
+				ctlr->rb[rdh] = nil;
+				bp->wp += RRD_BYTES(status);
+				bp->next = nil;
+				etheriq(edev, bp);
+			} else if (ctlr->rb[rdh] != nil) {
+				freeb(ctlr->rb[rdh]);
+				ctlr->rb[rdh] = nil;
+			}
+			rrd->status = 0;
+			memset(&ctlr->rx_ring[rdh], 0, sizeof(RxDesc));
+			coherence();
+			ctlr->rdfree --;
+			rdh = NEXT(rdh, DSCN);
+		}
+		ctlr->rdh = rdh;
+		if (ctlr->rdfree < DSCN/2)
+			rxrefill(ctlr);
+	}
+}
+
+static void
+aspm_813x(Ctlr *ctlr, int speed)
+{
+	uint pmcfg;
+	uint linkcfg;
+
+	pmcfg = csr32r(ctlr, ALC_PM_CFG);
+	if ((ctlr->flags & (alcfl_aps | alcfl_pcie)) ==
+	    (alcfl_aps | alcfl_pcie))
+		linkcfg = csr16r(ctlr, ctlr->excap + 0x10);
+	else
+		linkcfg = 0;
+	pmcfg &= ~PM_CFG_SERDES_PD_EX_L1;
+	pmcfg &= ~(PM_CFG_L1_ENTRY_TIMER_MASK | PM_CFG_LCKDET_TIMER_MASK);
+	pmcfg |= PM_CFG_MAC_ASPM_CHK;
+	pmcfg |= (PM_CFG_LCKDET_TIMER_DEFAULT << PM_CFG_LCKDET_TIMER_SHIFT);
+	pmcfg &= ~(PM_CFG_ASPM_L1_ENB | PM_CFG_ASPM_L0S_ENB);
+
+	if ((ctlr->flags & alcfl_aps) != 0) {
+		/* Disable extended sync except AR8152 B v1.0 */
+		linkcfg &= ~0x80;
+		if (ctlr->did == attansic_l2c_1 &&
+		    ctlr->rid == ATHEROS_AR8152_B_V10)
+			linkcfg |= 0x80;
+		csr16w(ctlr, ctlr->excap + 0x10, linkcfg);
+		pmcfg &= ~(PM_CFG_EN_BUFS_RX_L0S | PM_CFG_SA_DLY_ENB |
+		    PM_CFG_HOTRST);
+		pmcfg |= (PM_CFG_L1_ENTRY_TIMER_DEFAULT <<
+		    PM_CFG_L1_ENTRY_TIMER_SHIFT);
+		pmcfg &= ~PM_CFG_PM_REQ_TIMER_MASK;
+		pmcfg |= (PM_CFG_PM_REQ_TIMER_DEFAULT <<
+		    PM_CFG_PM_REQ_TIMER_SHIFT);
+		pmcfg |= PM_CFG_SERDES_PD_EX_L1 | PM_CFG_PCIE_RECV;
+	}
+
+	if ((ctlr->flags & alcfl_link) != 0) {
+		if ((ctlr->flags & alcfl_l0s) != 0)
+			pmcfg |= PM_CFG_ASPM_L0S_ENB;
+		if ((ctlr->flags & alcfl_l1s) != 0)
+			pmcfg |= PM_CFG_ASPM_L1_ENB;
+		if ((ctlr->flags & alcfl_aps) != 0) {
+			if (ctlr->did == attansic_l2c_1)
+				pmcfg &= ~PM_CFG_ASPM_L0S_ENB;
+			pmcfg &= ~(PM_CFG_SERDES_L1_ENB |
+			    PM_CFG_SERDES_PLL_L1_ENB |
+			    PM_CFG_SERDES_BUDS_RX_L1_ENB);
+			pmcfg |= PM_CFG_CLK_SWH_L1;
+			if (speed == 100 || speed == 1000) {
+				pmcfg &= ~PM_CFG_L1_ENTRY_TIMER_MASK;
+				switch (ctlr->did) {
+				case attansic_l2c_1:
+					pmcfg |= (7 <<
+					    PM_CFG_L1_ENTRY_TIMER_SHIFT);
+					break;
+				case attansic_l1d_1:
+				case attansic_l2c_2:
+					pmcfg |= (4 <<
+					    PM_CFG_L1_ENTRY_TIMER_SHIFT);
+					break;
+				default:
+					pmcfg |= (15 <<
+					    PM_CFG_L1_ENTRY_TIMER_SHIFT);
+					break;
+				}
+			}
+		} else {
+			pmcfg |= PM_CFG_SERDES_L1_ENB |
+			    PM_CFG_SERDES_PLL_L1_ENB |
+			    PM_CFG_SERDES_BUDS_RX_L1_ENB;
+			pmcfg &= ~(PM_CFG_CLK_SWH_L1 |
+			    PM_CFG_ASPM_L1_ENB | PM_CFG_ASPM_L0S_ENB);
+		}
+	} else {
+		pmcfg &= ~(PM_CFG_SERDES_BUDS_RX_L1_ENB | PM_CFG_SERDES_L1_ENB |
+		    PM_CFG_SERDES_PLL_L1_ENB);
+		pmcfg |= PM_CFG_CLK_SWH_L1;
+		if ((ctlr->flags & alcfl_l1s) != 0)
+			pmcfg |= PM_CFG_ASPM_L1_ENB;
+	}
+	csr32w(ctlr, ALC_PM_CFG, pmcfg);
+}
+
+static void
+aspm_816x(Ctlr *ctlr, int init)
+{
+	uint pmcfg;
+
+	pmcfg = csr32r(ctlr, ALC_PM_CFG);
+	pmcfg &= ~PM_CFG_L1_ENTRY_TIMER_816X_MASK;
+	pmcfg |= PM_CFG_L1_ENTRY_TIMER_816X_DEFAULT;
+	pmcfg &= ~PM_CFG_PM_REQ_TIMER_MASK;
+	pmcfg |= PM_CFG_PM_REQ_TIMER_816X_DEFAULT;
+	pmcfg &= ~PM_CFG_LCKDET_TIMER_MASK;
+	pmcfg |= PM_CFG_LCKDET_TIMER_DEFAULT;
+	pmcfg |= PM_CFG_SERDES_PD_EX_L1 | PM_CFG_CLK_SWH_L1 | PM_CFG_PCIE_RECV;
+	pmcfg &= ~(PM_CFG_RX_L1_AFTER_L0S | PM_CFG_TX_L1_AFTER_L0S |
+	    PM_CFG_ASPM_L1_ENB | PM_CFG_ASPM_L0S_ENB |
+	    PM_CFG_SERDES_L1_ENB | PM_CFG_SERDES_PLL_L1_ENB |
+	    PM_CFG_SERDES_BUDS_RX_L1_ENB | PM_CFG_SA_DLY_ENB |
+	    PM_CFG_MAC_ASPM_CHK | PM_CFG_HOTRST);
+	if (AR816X_REV(ctlr->rid) <= AR816X_REV_A1 &&
+	    (ctlr->rid & 0x01) != 0)
+		pmcfg |= PM_CFG_SERDES_L1_ENB | PM_CFG_SERDES_PLL_L1_ENB;
+	if ((ctlr->flags & alcfl_link) != 0) {
+		/* Link up, enable both L0s, L1s. */
+		pmcfg |= PM_CFG_ASPM_L0S_ENB | PM_CFG_ASPM_L1_ENB |
+		    PM_CFG_MAC_ASPM_CHK;
+	} else {
+		if (init != 0)
+			pmcfg |= PM_CFG_ASPM_L0S_ENB | PM_CFG_ASPM_L1_ENB |
+			    PM_CFG_MAC_ASPM_CHK;
+		else
+			pmcfg |= PM_CFG_ASPM_L1_ENB | PM_CFG_MAC_ASPM_CHK;
+	}
+	csr32w(ctlr, ALC_PM_CFG, pmcfg);
+}
+
+static void
+aspm(Ctlr *ctlr, int init, int speed)
+{
+	if ((ctlr->flags & alcfl_ar816x) != 0)
+		aspm_816x(ctlr, init);
+	else
+		aspm_813x(ctlr, speed);
+}
+
+static void
+lproc(void *arg)
+{
+	Ctlr *ctlr;
+	Ether *edev;
+	MiiPhy *phy;
+	//	int ctrl, r;
+	uint reg;
+
+	edev = arg;
+	ctlr = edev->ctlr;
+	for(;;){
+		if(ctlr->mii == nil || ctlr->mii->curphy == nil)
+			goto skip;
+		miistatus(ctlr->mii);
+		mac_stop(ctlr);
+		phy = ctlr->mii->curphy;
+		if (phy->link) {
+			ctlr->flags |= alcfl_link;
+			// print("%s: link up\n", edev->name);
+		} else {
+			ctlr->flags &= ~alcfl_link;
+			// print("%s: link down\n", edev->name);
+		}
+		if ((ctlr->flags & alcfl_link) != 0) {
+			queue_start(ctlr);
+			mac_config(ctlr);
+			reg = csr32r(ctlr, ALC_MAC_CFG);
+			reg |= MAC_CFG_TX_ENB | MAC_CFG_RX_ENB;
+			csr32w(ctlr, ALC_MAC_CFG, reg);
+		}
+		aspm(ctlr, 0, phy->speed);
+	skip:
+		ctlr->lim = 0;
+		sleep(&ctlr->lrendez, alclim, ctlr);
+	}
+}
+#define	TD_EOP	0x80000000
+
+static void
+alc_transmit(Ether* edev)
+{
+	TxDesc *td;
+	Block *bp;
+	Ctlr *ctlr;
+	int tdh, tdt, prod;
+
+	ctlr = edev->ctlr;
+
+	ilock(&ctlr->tlock);
+
+	/*
+	 * Free any completed packets
+	 */
+	tdh = ctlr->tdh;
+	if ((ctlr->flags & alcfl_ar816x) != 0) {
+		prod = csr16r(ctlr, ALC_MBOX_TD_PRI0_CONS_IDX);
+	} else {
+		prod = csr32r(ctlr, ALC_MBOX_TD_CONS_IDX);
+		prod = (prod & MBOX_TD_CONS_LO_IDX_MASK) >>
+			MBOX_TD_CONS_LO_IDX_SHIFT;
+	}
+	while (NEXT(tdh, DSCN) != prod) {
+		if((bp = ctlr->tb[tdh]) != nil){
+			ctlr->tb[tdh] = nil;
+			freeb(bp);
+		}
+		memset(&ctlr->tx_ring[tdh], 0, sizeof(TxDesc));
+		tdh = NEXT(tdh, DSCN);
+	}
+	ctlr->tdh = tdh;
+
+	/*
+	 * Try to fill the ring back up.
+	 */
+	tdt = ctlr->tdt;
+	prod = 0;
+	while(NEXT(tdt, DSCN) != tdh){
+		if((bp = qget(edev->oq)) == nil)
+			break;
+		prod ++;
+		td = &ctlr->tx_ring[tdt];
+		td->addr = PCIWADDR(bp->rp);
+		td->len = htole32(BLEN(bp));
+		td->flags = 0;
+		ctlr->tb[tdt] = bp;
+		tdt = NEXT(tdt, DSCN);
+		ctlr->tdt = tdt;
+		td = &ctlr->tx_ring[(tdt + DSCN - 1) % DSCN];
+		td->flags |= htole32(TD_EOP);
+	}
+	if (prod > 0) {
+		if ((ctlr->flags & alcfl_ar816x) != 0)
+			csr16w(ctlr, ALC_MBOX_TD_PRI0_PROD_IDX, tdt);
+		else
+			csr32w(ctlr, ALC_MBOX_TD_PROD_IDX,
+			       (tdt << MBOX_TD_PROD_LO_IDX_SHIFT) &
+			       MBOX_TD_PROD_LO_IDX_MASK);
+	}
+	iunlock(&ctlr->tlock);
+}
+
+static void
+alc_attach(Ether *edev)
+{
+	Ctlr *ctlr;
+	ulong pa;
+	uint reg, rxf_lo, rxf_hi;
+	uchar *eaddr;
+	char name[KNAMELEN];
+	ctlr = edev->ctlr;
+	qlock(&ctlr->alock);
+	if (ctlr->tx_ring != nil) {
+		qunlock(&ctlr->alock);
+		return;
+	}
+	ctlr->tx_ring = mallocalign(sizeof(TxDesc) * DSCN, 8, 0, 0);
+	if (ctlr->tx_ring == nil)
+		goto memerr;
+	ctlr->rx_ring = mallocalign(sizeof(RxDesc) * DSCN, 8, 0, 0);
+	if (ctlr->rx_ring == nil)
+		goto memerr;
+	ctlr->rrx_ring = mallocalign(sizeof(RxRdesc) * DSCN, 8, 0, 0);
+	if (ctlr->rrx_ring == nil)
+		goto memerr;
+	ctlr->tb = malloc(sizeof(Block*) * DSCN);
+	if (ctlr->tb == nil)
+		goto memerr;
+	ctlr->rb = malloc(sizeof(Block*) * DSCN);
+	if (ctlr->rb == nil)
+		goto memerr;
+	if (rxinit(ctlr) || txinit(ctlr)) {
+		print("%s: can not init queues\n", ctlr->edev->name);
+		goto out;
+	}
+	snprint(name, KNAMELEN, "#l%dlproc", edev->ctlrno);
+	kproc(name, lproc, edev);
+
+	snprint(name, KNAMELEN, "#l%drproc", edev->ctlrno);
+	kproc(name, rproc, edev);
+
+	csr32w(ctlr, ALC_MBOX_RD0_PROD_IDX, DSCN - 1);
+
+	/* Enable all clocks. */
+	if ((ctlr->flags & alcfl_ar816x) != 0) {
+		csr32w(ctlr, ALC_CLK_GATING_CFG, CLK_GATING_DMAW_ENB |
+		    CLK_GATING_DMAR_ENB | CLK_GATING_TXQ_ENB |
+		    CLK_GATING_RXQ_ENB | CLK_GATING_TXMAC_ENB |
+		    CLK_GATING_RXMAC_ENB);
+		if (AR816X_REV(ctlr->rid) >= AR816X_REV_B0)
+			csr32w(ctlr, ALC_IDLE_DECISN_TIMER,
+			    IDLE_DECISN_TIMER_DEFAULT_1MS);
+	} else
+		csr32w(ctlr, ALC_CLK_GATING_CFG, 0);
+	/* Reprogram the station address. */
+	eaddr = ctlr->ra;
+	csr32w(ctlr, ALC_PAR0, eaddr[2] << 24 | eaddr[3] << 16 | eaddr[4] << 8 | eaddr[5]);
+	csr32w(ctlr, ALC_PAR1, eaddr[0] << 8 | eaddr[1]);
+	/*
+	 * Clear WOL status and disable all WOL feature as WOL
+	 * would interfere Rx operation under normal environments.
+	 */
+	csr32r(ctlr, ALC_WOL_CFG);
+	csr32w(ctlr, ALC_WOL_CFG, 0);
+	/* Set Tx descriptor base addresses. */
+	pa = PCIWADDR(ctlr->tx_ring);
+	csr32w(ctlr, ALC_TX_BASE_ADDR_HI, HI(pa));
+	csr32w(ctlr, ALC_TDL_HEAD_ADDR_LO, LO(pa));
+	/* We don't use high priority ring. */
+	csr32w(ctlr, ALC_TDH_HEAD_ADDR_LO, 0);
+	/* Set Tx descriptor counter. */
+	csr32w(ctlr, ALC_TD_RING_CNT,
+	       (DSCN << TD_RING_CNT_SHIFT) & TD_RING_CNT_MASK);
+	/* Set Rx descriptor base addresses. */
+	pa = PCIWADDR(ctlr->rx_ring);
+	csr32w(ctlr, ALC_RX_BASE_ADDR_HI, HI(pa));
+	csr32w(ctlr, ALC_RD0_HEAD_ADDR_LO, LO(pa));
+	if ((ctlr->flags & alcfl_ar816x) == 0) {
+		/* We use one Rx ring. */
+		csr32w(ctlr, ALC_RD1_HEAD_ADDR_LO, 0);
+		csr32w(ctlr, ALC_RD2_HEAD_ADDR_LO, 0);
+		csr32w(ctlr, ALC_RD3_HEAD_ADDR_LO, 0);
+	}
+	/* Set Rx descriptor counter. */
+	csr32w(ctlr, ALC_RD_RING_CNT,
+	    (DSCN << RD_RING_CNT_SHIFT) & RD_RING_CNT_MASK);
+
+	csr32w(ctlr, ALC_RX_BUF_SIZE, RX_BUF_SIZE_MAX);
+	pa = PCIWADDR(ctlr->rrx_ring);
+
+	/* Set Rx return descriptor base addresses. */
+	csr32w(ctlr, ALC_RRD0_HEAD_ADDR_LO, LO(pa));
+	if ((ctlr->flags & alcfl_ar816x) == 0) {
+		/* We use one Rx return ring. */
+		csr32w(ctlr, ALC_RRD1_HEAD_ADDR_LO, 0);
+		csr32w(ctlr, ALC_RRD2_HEAD_ADDR_LO, 0);
+		csr32w(ctlr, ALC_RRD3_HEAD_ADDR_LO, 0);
+	}
+
+	/* Set Rx return descriptor counter. */
+	csr32w(ctlr, ALC_RRD_RING_CNT,
+	    (DSCN << RRD_RING_CNT_SHIFT) & RRD_RING_CNT_MASK);
+
+	if (ctlr->did == attansic_l2c_1) {
+		/* Reconfigure SRAM - Vendor magic. */
+	        csr32w(ctlr, ALC_SRAM_RX_FIFO_LEN, 0x000002A0);
+		csr32w(ctlr, ALC_SRAM_TX_FIFO_LEN, 0x00000100);
+		csr32w(ctlr, ALC_SRAM_RX_FIFO_ADDR, 0x029F0000);
+		csr32w(ctlr, ALC_SRAM_RD0_ADDR, 0x02BF02A0);
+		csr32w(ctlr, ALC_SRAM_TX_FIFO_ADDR, 0x03BF02C0);
+		csr32w(ctlr, ALC_SRAM_TD_ADDR, 0x03DF03C0);
+		csr32w(ctlr, ALC_TXF_WATER_MARK, 0x00000000);
+		csr32w(ctlr, ALC_RD_DMA_CFG, 0x00000000);
+	}
+
+	/* Tell hardware that we're ready to load DMA blocks. */
+	csr32w(ctlr, ALC_DMA_BLOCK, DMA_BLOCK_LOAD);
+
+	/* Configure interrupt moderation timer. */
+	reg = ALC_USECS(ALC_IM_RX_TIMER_DEFAULT) << IM_TIMER_RX_SHIFT;
+	if ((ctlr->flags & alcfl_ar816x) == 0)
+	    reg |= ALC_USECS(ALC_IM_TX_TIMER_DEFAULT) << IM_TIMER_TX_SHIFT;
+	csr32w(ctlr, ALC_IM_TIMER, reg);
+	/*
+	 * We don't want to automatic interrupt clear as task queue
+	 * for the interrupt should know interrupt status.
+	 */
+	reg = csr32r(ctlr, ALC_MASTER_CFG);
+	reg &= ~(MASTER_IM_RX_TIMER_ENB | MASTER_IM_TX_TIMER_ENB);
+	reg |= MASTER_SA_TIMER_ENB;
+	reg |= MASTER_IM_RX_TIMER_ENB;
+	if ((ctlr->flags & alcfl_ar816x) == 0)
+		reg |= MASTER_IM_TX_TIMER_ENB;
+	csr32w(ctlr, ALC_MASTER_CFG, reg);
+	/*
+	 * Disable interrupt re-trigger timer. We don't want automatic
+	 * re-triggering of un-ACKed interrupts.
+	 */
+	csr32w(ctlr, ALC_INTR_RETRIG_TIMER, ALC_USECS(0));
+	/* Configure CMB. */
+	if ((ctlr->flags & alcfl_ar816x) != 0) {
+		csr32w(ctlr, ALC_CMB_TD_THRESH, 0);
+	}
+	csr32w(ctlr, ALC_CMB_TX_TIMER, ALC_USECS(0));
+	csr32w(ctlr, ALC_SMB_STAT_TIMER, ALC_USECS(0));
+	/* Clear MAC statistics. */
+	stats_clear(ctlr);
+	csr32w(ctlr, ALC_FRAME_SIZE, RX_BUF_SIZE_MAX);
+
+	if ((ctlr->flags & alcfl_ar816x) == 0) {
+		/* Disable header split(?) */
+		csr32w(ctlr, ALC_HDS_CFG, 0);
+		/* Configure IPG/IFG parameters. */
+		csr32w(ctlr, ALC_IPG_IFG_CFG,
+		    ((IPG_IFG_IPGT_DEFAULT << IPG_IFG_IPGT_SHIFT) &
+		    IPG_IFG_IPGT_MASK) |
+		    ((IPG_IFG_MIFG_DEFAULT << IPG_IFG_MIFG_SHIFT) &
+		    IPG_IFG_MIFG_MASK) |
+		    ((IPG_IFG_IPG1_DEFAULT << IPG_IFG_IPG1_SHIFT) &
+		    IPG_IFG_IPG1_MASK) |
+		    ((IPG_IFG_IPG2_DEFAULT << IPG_IFG_IPG2_SHIFT) &
+		    IPG_IFG_IPG2_MASK));
+		/* Set parameters for half-duplex media. */
+		csr32w(ctlr, ALC_HDPX_CFG,
+		    ((HDPX_CFG_LCOL_DEFAULT << HDPX_CFG_LCOL_SHIFT) &
+		    HDPX_CFG_LCOL_MASK) |
+		    ((HDPX_CFG_RETRY_DEFAULT << HDPX_CFG_RETRY_SHIFT) &
+		    HDPX_CFG_RETRY_MASK) | HDPX_CFG_EXC_DEF_EN |
+		    ((HDPX_CFG_ABEBT_DEFAULT << HDPX_CFG_ABEBT_SHIFT) &
+		    HDPX_CFG_ABEBT_MASK) |
+		    ((HDPX_CFG_JAMIPG_DEFAULT << HDPX_CFG_JAMIPG_SHIFT) &
+		    HDPX_CFG_JAMIPG_MASK));
+	}
+
+	/*
+	 * Set TSO/checksum offload threshold. For frames that is
+	 * larger than this threshold, hardware wouldn't do
+	 * TSO/checksum offloading.
+	 */
+	reg = (RX_BUF_SIZE_MAX >> TSO_OFFLOAD_THRESH_UNIT_SHIFT) &
+	    TSO_OFFLOAD_THRESH_MASK;
+	if ((ctlr->flags & alcfl_ar816x) != 0)
+		reg |= TSO_OFFLOAD_ERRLGPKT_DROP_ENB;
+	csr32w(ctlr, ALC_TSO_OFFLOAD_THRESH, reg);
+	/* Configure TxQ. */
+	reg = (dma_burst[ctlr->dma_rd_burst] <<
+	    TXQ_CFG_TX_FIFO_BURST_SHIFT) & TXQ_CFG_TX_FIFO_BURST_MASK;
+	if (ctlr->did == attansic_l2c_1 ||
+	    ctlr->did == attansic_l2c_2)
+		reg >>= 1;
+	reg |= (TXQ_CFG_TD_BURST_DEFAULT << TXQ_CFG_TD_BURST_SHIFT) &
+	    TXQ_CFG_TD_BURST_MASK;
+	reg |= TXQ_CFG_IP_OPTION_ENB | TXQ_CFG_8023_ENB;
+	csr32w(ctlr, ALC_TXQ_CFG, reg | TXQ_CFG_ENHANCED_MODE);
+	if ((ctlr->flags & alcfl_ar816x) != 0) {
+		reg = (TXQ_CFG_TD_BURST_DEFAULT << HQTD_CFG_Q1_BURST_SHIFT |
+		    TXQ_CFG_TD_BURST_DEFAULT << HQTD_CFG_Q2_BURST_SHIFT |
+		    TXQ_CFG_TD_BURST_DEFAULT << HQTD_CFG_Q3_BURST_SHIFT |
+		    HQTD_CFG_BURST_ENB);
+		csr32w(ctlr, ALC_HQTD_CFG, reg);
+		reg = WRR_PRI_RESTRICT_NONE;
+		reg |= (WRR_PRI_DEFAULT << WRR_PRI0_SHIFT |
+		    WRR_PRI_DEFAULT << WRR_PRI1_SHIFT |
+		    WRR_PRI_DEFAULT << WRR_PRI2_SHIFT |
+		    WRR_PRI_DEFAULT << WRR_PRI3_SHIFT);
+		csr32w(ctlr, ALC_WRR, reg);
+	} else {
+		/* Configure Rx free descriptor pre-fetching. */
+		csr32w(ctlr, ALC_RX_RD_FREE_THRESH,
+		    ((RX_RD_FREE_THRESH_HI_DEFAULT <<
+		    RX_RD_FREE_THRESH_HI_SHIFT) & RX_RD_FREE_THRESH_HI_MASK) |
+		    ((RX_RD_FREE_THRESH_LO_DEFAULT <<
+		    RX_RD_FREE_THRESH_LO_SHIFT) & RX_RD_FREE_THRESH_LO_MASK));
+	}
+
+	/*
+	 * Configure flow control parameters.
+	 * XON  : 80% of Rx FIFO
+	 * XOFF : 30% of Rx FIFO
+	 */
+	if ((ctlr->flags & alcfl_ar816x) != 0) {
+		reg = csr32r(ctlr, ALC_SRAM_RX_FIFO_LEN);
+		reg &= SRAM_RX_FIFO_LEN_MASK;
+		reg *= 8;
+		if (reg > 8 * 1024)
+			reg -= RX_FIFO_PAUSE_816X_RSVD;
+		else
+		    reg -= RX_BUF_SIZE_MAX;
+		reg /= 8;
+		csr32w(ctlr, ALC_RX_FIFO_PAUSE_THRESH,
+		    ((reg << RX_FIFO_PAUSE_THRESH_LO_SHIFT) &
+		    RX_FIFO_PAUSE_THRESH_LO_MASK) |
+		    (((RX_FIFO_PAUSE_816X_RSVD / 8) <<
+		    RX_FIFO_PAUSE_THRESH_HI_SHIFT) &
+		    RX_FIFO_PAUSE_THRESH_HI_MASK));
+	} else if (ctlr->did == attansic_l1c ||
+		   ctlr->did == attansic_l2c) {
+		reg = csr32r(ctlr, ALC_SRAM_RX_FIFO_LEN);
+		rxf_hi = (reg * 8) / 10;
+		rxf_lo = (reg * 3) / 10;
+		csr32w(ctlr, ALC_RX_FIFO_PAUSE_THRESH,
+		    ((rxf_lo << RX_FIFO_PAUSE_THRESH_LO_SHIFT) &
+		    RX_FIFO_PAUSE_THRESH_LO_MASK) |
+		    ((rxf_hi << RX_FIFO_PAUSE_THRESH_HI_SHIFT) &
+		    RX_FIFO_PAUSE_THRESH_HI_MASK));
+	}
+
+	if ((ctlr->flags & alcfl_ar816x) == 0) {
+		csr32w(ctlr, ALC_RSS_IDT_TABLE0, 0);
+		csr32w(ctlr, ALC_RSS_CPU, 0);
+	}
+
+	/* Configure RxQ. */
+	reg = (RXQ_CFG_RD_BURST_DEFAULT << RXQ_CFG_RD_BURST_SHIFT) &
+	    RXQ_CFG_RD_BURST_MASK;
+	reg |= RXQ_CFG_RSS_MODE_DIS;
+	if ((ctlr->flags & alcfl_ar816x) != 0) {
+		reg |= (RXQ_CFG_816X_IDT_TBL_SIZE_DEFAULT <<
+		    RXQ_CFG_816X_IDT_TBL_SIZE_SHIFT) &
+		    RXQ_CFG_816X_IDT_TBL_SIZE_MASK;
+		if ((ctlr->flags & alcfl_fasteth) == 0)
+			reg |= RXQ_CFG_ASPM_THROUGHPUT_LIMIT_100M;
+	} else {
+		if ((ctlr->flags & alcfl_fasteth) == 0 &&
+		    ctlr->did != attansic_l1d_1)
+			reg |= RXQ_CFG_ASPM_THROUGHPUT_LIMIT_100M;
+	}
+	csr32w(ctlr, ALC_RXQ_CFG, reg);
+
+	/* Configure DMA parameters. */
+	reg = DMA_CFG_OUT_ORDER | DMA_CFG_RD_REQ_PRI;
+	reg |= ctlr->rcb;
+	reg |= DMA_CFG_SMB_DIS;
+	reg |= (ctlr->dma_rd_burst & DMA_CFG_RD_BURST_MASK) <<
+	    DMA_CFG_RD_BURST_SHIFT;
+	reg |= (ctlr->dma_wr_burst & DMA_CFG_WR_BURST_MASK) <<
+	    DMA_CFG_WR_BURST_SHIFT;
+	reg |= (DMA_CFG_RD_DELAY_CNT_DEFAULT << DMA_CFG_RD_DELAY_CNT_SHIFT) &
+	    DMA_CFG_RD_DELAY_CNT_MASK;
+	reg |= (DMA_CFG_WR_DELAY_CNT_DEFAULT << DMA_CFG_WR_DELAY_CNT_SHIFT) &
+	    DMA_CFG_WR_DELAY_CNT_MASK;
+	if ((ctlr->flags & alcfl_ar816x) != 0) {
+		switch (AR816X_REV(ctlr->rid)) {
+		case AR816X_REV_A0:
+		case AR816X_REV_A1:
+			reg |= DMA_CFG_RD_CHNL_SEL_2;
+			break;
+		case AR816X_REV_B0:
+		default:
+			reg |= DMA_CFG_RD_CHNL_SEL_4;
+			break;
+		}
+	}
+	csr32w(ctlr, ALC_DMA_CFG, reg);
+
+	/*
+	 * Configure Tx/Rx MACs.
+	 *  - Auto-padding for short frames.
+	 *  - Enable CRC generation.
+	 *  Actual reconfiguration of MAC for resolved speed/duplex
+	 *  is followed after detection of link establishment.
+	 *  AR813x/AR815x always does checksum computation regardless
+	 *  of MAC_CFG_RXCSUM_ENB bit. Also the controller is known to
+	 *  have bug in protocol field in Rx return structure so
+	 *  these controllers can't handle fragmented frames. Disable
+	 *  Rx checksum offloading until there is a newer controller
+	 *  that has sane implementation.
+	 */
+	reg = MAC_CFG_TX_CRC_ENB | MAC_CFG_TX_AUTO_PAD | MAC_CFG_FULL_DUPLEX |
+	    ((MAC_CFG_PREAMBLE_DEFAULT << MAC_CFG_PREAMBLE_SHIFT) &
+	    MAC_CFG_PREAMBLE_MASK);
+	if ((ctlr->flags & alcfl_ar816x) != 0 ||
+	    ctlr->did == attansic_l1d ||
+	    ctlr->did == attansic_l1d_1 ||
+	    ctlr->did == attansic_l2c_2)
+		reg |= MAC_CFG_HASH_ALG_CRC32 | MAC_CFG_SPEED_MODE_SW;
+	if ((ctlr->flags & alcfl_fasteth) != 0)
+		reg |= MAC_CFG_SPEED_10_100;
+	else
+		reg |= MAC_CFG_SPEED_1000;
+	csr32w(ctlr, ALC_MAC_CFG, reg);
+
+	reg = csr32r(ctlr, ALC_MAC_CFG);
+	reg &= ~(MAC_CFG_ALLMULTI | MAC_CFG_BCAST | MAC_CFG_PROMISC);
+	reg |= MAC_CFG_BCAST;
+	csr32w(ctlr, ALC_MAC_CFG, reg);
+
+	reg = csr32r(ctlr, ALC_MAC_CFG);
+	reg &= ~MAC_CFG_VLAN_TAG_STRIP;
+	csr32w(ctlr, ALC_MAC_CFG, reg);
+
+	/* Acknowledge all pending interrupts and clear it. */
+	csr32w(ctlr, ALC_INTR_MASK, ALC_INTRS);
+	csr32w(ctlr, ALC_INTR_STATUS, 0xFFFFFFFF);
+	csr32w(ctlr, ALC_INTR_STATUS, 0);
+
+ out:
+	qunlock(&ctlr->alock);
+	return;
+ memerr:
+	qunlock(&ctlr->alock);
+	print("%s: can not allocate memory\n", ctlr->edev->name);
+	return;
+}
+static void
+interrupt(Ureg*, void* arg)
+{
+	Ctlr *ctlr;
+	Ether *edev;
+	uint status;
+	edev = arg;
+	ctlr = edev->ctlr;
+	ilock(&ctlr->imlock);
+	status = csr32r(ctlr, ALC_INTR_STATUS);
+	if ((status & ALC_INTRS) == 0)
+		goto out;
+	/* Disable interrupts. */
+	csr32w(ctlr, ALC_INTR_STATUS, INTR_DIS_INT);
+	status = csr32r(ctlr, ALC_INTR_STATUS);
+	if ((status & ALC_INTRS) == 0)
+		goto back;
+	/* Acknowledge and disable interrupts. */
+	csr32w(ctlr, ALC_INTR_STATUS, status | INTR_DIS_INT);
+	if (status & INTR_GPHY) {
+		mii_read(ctlr, ctlr->phy, 0x13); /* clean phy interrupts */
+		ctlr->lim = INTR_GPHY;
+		wakeup(&ctlr->lrendez);
+	}
+	if (status & INTR_RX_PKT) {
+		ctlr->rim = INTR_RX_PKT;
+		wakeup(&ctlr->rrendez);
+	}
+	if (status & (INTR_DMA_RD_TO_RST | INTR_DMA_WR_TO_RST |
+		      INTR_TXQ_TO_RST)) {
+		if (status & INTR_DMA_RD_TO_RST)
+			print("%s: DMA read error!\n",
+			       ctlr->edev->name);
+		if (status & INTR_DMA_WR_TO_RST)
+			print("%s: DMA write error!\n",
+			       ctlr->edev->name);
+		if (status & INTR_TXQ_TO_RST)
+			print("%s: TxQ reset!\n",
+			       ctlr->edev->name);
+	}
+
+ back:
+	csr32w(ctlr, ALC_INTR_STATUS, 0x7fffffff);
+ out:
+	iunlock(&ctlr->imlock);
+	alc_transmit(edev);
+}
+
+static char *stat_rx[] =  {
+	/* Rx stats. */
+	"rx_frames",
+	"rx_bcast_frames",
+	"rx_mcast_frames",
+	"rx_pause_frames",
+	"rx_control_frames",
+	"rx_crcerrs",
+	"rx_lenerrs",
+	"rx_bytes",
+	"rx_runts",
+	"rx_fragments",
+	"rx_pkts_64",
+	"rx_pkts_65_127",
+	"rx_pkts_128_255",
+	"rx_pkts_256_511",
+	"rx_pkts_512_1023",
+	"rx_pkts_1024_1518",
+	"rx_pkts_1519_max",
+	"rx_pkts_truncated",
+	"rx_fifo_oflows",
+	"rx_rrs_errs",
+	"rx_alignerrs",
+	"rx_bcast_bytes",
+	"rx_mcast_bytes",
+	"rx_pkts_filtered" };
+
+static char *stat_tx[] =  {
+	/* Tx stats. */
+	"tx_frames",
+	"tx_bcast_frames",
+	"tx_mcast_frames",
+	"tx_pause_frames",
+	"tx_excess_defer",
+	"tx_control_frames",
+	"tx_deferred",
+	"tx_bytes",
+	"tx_pkts_64",
+	"tx_pkts_65_127",
+	"tx_pkts_128_255",
+	"tx_pkts_256_511",
+	"tx_pkts_512_1023",
+	"tx_pkts_1024_1518",
+	"tx_pkts_1519_max",
+	"tx_single_colls",
+	"tx_multi_colls",
+	"tx_late_colls",
+	"tx_excess_colls",
+	"tx_underrun",
+	"tx_desc_underrun",
+	"tx_lenerrs",
+	"tx_pkts_truncated",
+	"tx_bcast_bytes",
+	"tx_mcast_bytes"
+};
+
+static long
+alc_ifstat(Ether *edev, void* a, long n, ulong offset)
+{
+	Ctlr *ctlr;
+	char *p;
+	int i, l, r;
+
+	p = smalloc(READSTR);
+	l = 0;
+	ctlr = edev->ctlr;
+	qlock(&ctlr->slock);
+	for(i = 0; i < sizeof(stat_rx) / sizeof(char*); i++) {
+		r = csr32r(ctlr, ALC_RX_MIB_BASE + i*4);
+		l += snprint(p+l, READSTR-l, "%s: %ud\n",
+			     stat_rx[i], r);
+		i++;
+	}
+	for(i = 0; i < sizeof(stat_tx) / sizeof(char*); i++) {
+		r = csr32r(ctlr, ALC_TX_MIB_BASE + i*4);
+		l += snprint(p+l, READSTR-l, "%s: %ud\n",
+			     stat_tx[i], r);
+		i++;
+	}
+	if(ctlr->mii != nil && ctlr->mii->curphy != nil){
+		l += snprint(p+l, READSTR-l, "phy:   ");
+		for(i = 0; i < NMiiPhyr; i++){
+			if(i && ((i & 0x07) == 0))
+				l += snprint(p+l, READSTR-l, "\n       ");
+			r = miimir(ctlr->mii, i);
+			l += snprint(p+l, READSTR-l, " %4.4uX", r);
+		}
+		snprint(p+l, READSTR-l, "\n");
+	}
+	n = readstr(offset, a, n, p);
+	free(p);
+	qunlock(&ctlr->slock);
+	return n;
+}
+
+static int
+alcpnp(Ether* edev)
+{
+	Ctlr *ctlr;
+
+	if(alcctlrhead == nil)
+		alcpci(edev);
+
+	/*
+	 * Any adapter matches if no edev->port is supplied,
+	 * otherwise the ports must match.
+	 */
+	for(ctlr = alcctlrhead; ctlr != nil; ctlr = ctlr->next){
+		if(ctlr->active)
+			continue;
+		if(edev->port == 0 || edev->port == ctlr->port){
+			ctlr->active = 1;
+			break;
+		}
+	}
+	if(ctlr == nil)
+		return -1;
+	edev->ctlr = ctlr;
+	edev->port = ctlr->port;
+	edev->irq = ctlr->pcidev->intl;
+	edev->tbdf = ctlr->pcidev->tbdf;
+	edev->mbps = 1000;
+	memmove(edev->ea, ctlr->ra, Eaddrlen);
+
+	/*
+	 * Linkage to the generic ethernet driver.
+	 */
+	edev->attach = alc_attach;
+	edev->transmit = alc_transmit;
+	edev->ifstat = alc_ifstat;
+
+	edev->arg = edev;
+	edev->promiscuous = alc_promisc;
+	// TODO edev->shutdown
+	// TODO edev->multicast
+
+	intrenable(edev->irq, interrupt, edev, edev->tbdf, edev->name);
+
+	return 0;
+}
+
+void
+etheralclink(void)
+{
+	addethercard("alc", alcpnp);
+}
diff -r 484d3f8e5978 sys/src/9/pc/etheralc.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/sys/src/9/pc/etheralc.h	Fri Oct 09 08:48:49 2020 +0300
@@ -0,0 +1,1155 @@
+/* Taken from if_alcreg.h from OpenBSD */
+
+/*-
+ * Copyright (c) 2009, Pyun YongHyeon <yongari@FreeBSD.org>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice unmodified, this list of conditions, and the following
+ *    disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * $FreeBSD: src/sys/dev/alc/if_alcreg.h,v 1.1 2009/06/10 02:07:58 yongari Exp $
+ */
+
+#define	ALC_PCIR_BAR			0x10
+
+#define	ATHEROS_AR8152_B_V10		0xC0
+#define	ATHEROS_AR8152_B_V11		0xC1
+
+/*
+ * Atheros AR816x/AR817x revisions
+ */
+#define	AR816X_REV_A0			0
+#define	AR816X_REV_A1			1
+#define	AR816X_REV_B0			2
+#define	AR816X_REV_C0			3
+
+#define	AR816X_REV_SHIFT		3
+#define	AR816X_REV(x)			((x) >> AR816X_REV_SHIFT)
+
+/* 0x0000 - 0x02FF : PCIe configuration space */
+
+#define	ALC_PEX_UNC_ERR_SEV		0x10C
+#define	PEX_UNC_ERR_SEV_TRN		0x00000001
+#define	PEX_UNC_ERR_SEV_DLP		0x00000010
+#define	PEX_UNC_ERR_SEV_PSN_TLP		0x00001000
+#define	PEX_UNC_ERR_SEV_FCP		0x00002000
+#define	PEX_UNC_ERR_SEV_CPL_TO		0x00004000
+#define	PEX_UNC_ERR_SEV_CA		0x00008000
+#define	PEX_UNC_ERR_SEV_UC		0x00010000
+#define	PEX_UNC_ERR_SEV_ROV		0x00020000
+#define	PEX_UNC_ERR_SEV_MLFP		0x00040000
+#define	PEX_UNC_ERR_SEV_ECRC		0x00080000
+#define	PEX_UNC_ERR_SEV_UR		0x00100000
+
+#define	ALC_EEPROM_LD			0x204	/* AR816x */
+#define	EEPROM_LD_START			0x00000001
+#define	EEPROM_LD_IDLE			0x00000010
+#define	EEPROM_LD_DONE			0x00000000
+#define	EEPROM_LD_PROGRESS		0x00000020
+#define	EEPROM_LD_EXIST			0x00000100
+#define	EEPROM_LD_EEPROM_EXIST		0x00000200
+#define	EEPROM_LD_FLASH_EXIST		0x00000400
+#define	EEPROM_LD_FLASH_END_ADDR_MASK	0x03FF0000
+#define	EEPROM_LD_FLASH_END_ADDR_SHIFT	16
+
+#define	ALC_TWSI_CFG			0x218
+#define	TWSI_CFG_SW_LD_START		0x00000800
+#define	TWSI_CFG_HW_LD_START		0x00001000
+#define	TWSI_CFG_LD_EXIST		0x00400000
+
+#define	ALC_SLD				0x218	/* AR816x */
+#define	SLD_START			0x00000800
+#define	SLD_PROGRESS			0x00001000
+#define	SLD_IDLE			0x00002000
+#define	SLD_SLVADDR_MASK		0x007F0000
+#define	SLD_EXIST			0x00800000
+#define	SLD_FREQ_MASK			0x03000000
+#define	SLD_FREQ_100K			0x00000000
+#define	SLD_FREQ_200K			0x01000000
+#define	SLD_FREQ_300K			0x02000000
+#define	SLD_FREQ_400K			0x03000000
+
+#define	PCIEM_LINK_CAP_ASPM		0x00000c00
+#define	PCIEM_LINK_CTL_RCB		0x0008
+#define	PCIEM_LINK_CTL_ASPMC_DIS	0x0000
+#define	PCIEM_LINK_CTL_ASPMC_L0S	0x0001
+#define	PCIEM_LINK_CTL_ASPMC_L1		0x0002
+#define	PCIEM_LINK_CTL_ASPMC		0x0003
+
+#define	ALC_PCIE_PHYMISC		0x1000
+#define	PCIE_PHYMISC_FORCE_RCV_DET	0x00000004
+
+#define	ALC_PCIE_PHYMISC2		0x1004
+#define	PCIE_PHYMISC2_SERDES_CDR_MASK	0x00030000
+#define	PCIE_PHYMISC2_SERDES_TH_MASK	0x000C0000
+#define	PCIE_PHYMISC2_SERDES_CDR_SHIFT	16
+#define	PCIE_PHYMISC2_SERDES_TH_SHIFT	18
+
+#define	ALC_PDLL_TRNS1			0x1104
+#define	PDLL_TRNS1_D3PLLOFF_ENB		0x00000800
+
+#define	ALC_TWSI_DEBUG			0x1108
+#define	TWSI_DEBUG_DEV_EXIST		0x20000000
+
+#define	ALC_EEPROM_CFG			0x12C0
+#define	EEPROM_CFG_DATA_HI_MASK		0x0000FFFF
+#define	EEPROM_CFG_ADDR_MASK		0x03FF0000
+#define	EEPROM_CFG_ACK			0x40000000
+#define	EEPROM_CFG_RW			0x80000000
+#define	EEPROM_CFG_DATA_HI_SHIFT	0
+#define	EEPROM_CFG_ADDR_SHIFT		16
+
+#define	ALC_EEPROM_DATA_LO		0x12C4
+
+#define	ALC_OPT_CFG			0x12F0
+#define	OPT_CFG_CLK_ENB			0x00000002
+
+#define	ALC_PM_CFG			0x12F8
+#define	PM_CFG_SERDES_ENB		0x00000001
+#define	PM_CFG_RBER_ENB			0x00000002
+#define	PM_CFG_CLK_REQ_ENB		0x00000004
+#define	PM_CFG_ASPM_L1_ENB		0x00000008
+#define	PM_CFG_SERDES_L1_ENB		0x00000010
+#define	PM_CFG_SERDES_PLL_L1_ENB	0x00000020
+#define	PM_CFG_SERDES_PD_EX_L1		0x00000040
+#define	PM_CFG_SERDES_BUDS_RX_L1_ENB	0x00000080
+#define	PM_CFG_L0S_ENTRY_TIMER_MASK	0x00000F00
+#define	PM_CFG_RX_L1_AFTER_L0S		0x00000800
+#define	PM_CFG_ASPM_L0S_ENB		0x00001000
+#define	PM_CFG_CLK_SWH_L1		0x00002000
+#define	PM_CFG_CLK_PWM_VER1_1		0x00004000
+#define	PM_CFG_PCIE_RECV		0x00008000
+#define	PM_CFG_L1_ENTRY_TIMER_MASK	0x000F0000
+#define	PM_CFG_L1_ENTRY_TIMER_816X_MASK	0x00070000
+#define	PM_CFG_TX_L1_AFTER_L0S		0x00080000
+#define	PM_CFG_PM_REQ_TIMER_MASK	0x00F00000
+#define	PM_CFG_LCKDET_TIMER_MASK	0x0F000000
+#define	PM_CFG_EN_BUFS_RX_L0S		0x10000000
+#define	PM_CFG_SA_DLY_ENB		0x20000000
+#define	PM_CFG_MAC_ASPM_CHK		0x40000000
+#define	PM_CFG_HOTRST			0x80000000
+#define	PM_CFG_L0S_ENTRY_TIMER_SHIFT	8
+#define	PM_CFG_L1_ENTRY_TIMER_SHIFT	16
+#define	PM_CFG_PM_REQ_TIMER_SHIFT	20
+#define	PM_CFG_LCKDET_TIMER_SHIFT	24
+
+#define	PM_CFG_L0S_ENTRY_TIMER_DEFAULT	6
+#define	PM_CFG_L1_ENTRY_TIMER_DEFAULT	1
+#define	PM_CFG_L1_ENTRY_TIMER_816X_DEFAULT	4
+#define	PM_CFG_LCKDET_TIMER_DEFAULT	12
+#define	PM_CFG_PM_REQ_TIMER_DEFAULT	12
+#define	PM_CFG_PM_REQ_TIMER_816X_DEFAULT	15
+
+#define	ALC_LTSSM_ID_CFG		0x12FC
+#define	LTSSM_ID_WRO_ENB		0x00001000
+
+#define	ALC_MASTER_CFG			0x1400
+#define	MASTER_RESET			0x00000001
+#define	MASTER_TEST_MODE_MASK		0x0000000C
+#define	MASTER_BERT_START		0x00000010
+#define	MASTER_OOB_DIS_OFF		0x00000040
+#define	MASTER_SA_TIMER_ENB		0x00000080
+#define	MASTER_MTIMER_ENB		0x00000100
+#define	MASTER_MANUAL_INTR_ENB		0x00000200
+#define	MASTER_IM_TX_TIMER_ENB		0x00000400
+#define	MASTER_IM_RX_TIMER_ENB		0x00000800
+#define	MASTER_CLK_SEL_DIS		0x00001000
+#define	MASTER_CLK_SWH_MODE		0x00002000
+#define	MASTER_INTR_RD_CLR		0x00004000
+#define	MASTER_CHIP_REV_MASK		0x00FF0000
+#define	MASTER_CHIP_ID_MASK		0x7F000000
+#define	MASTER_OTP_SEL			0x80000000
+#define	MASTER_TEST_MODE_SHIFT		2
+#define	MASTER_CHIP_REV_SHIFT		16
+#define	MASTER_CHIP_ID_SHIFT		24
+
+/* Number of ticks per usec for AR813x/AR815x. */
+#define	ALC_TICK_USECS			2
+#define	ALC_USECS(x)			((x) / ALC_TICK_USECS)
+
+#define	ALC_MANUAL_TIMER		0x1404
+
+#define	ALC_IM_TIMER			0x1408
+#define	IM_TIMER_TX_MASK		0x0000FFFF
+#define	IM_TIMER_RX_MASK		0xFFFF0000
+#define	IM_TIMER_TX_SHIFT		0
+#define	IM_TIMER_RX_SHIFT		16
+#define	ALC_IM_TIMER_MIN		0
+#define	ALC_IM_TIMER_MAX		130000	/* 130ms */
+/*
+ * 100us will ensure alc(4) wouldn't generate more than 10000 Rx
+ * interrupts in a second.
+ */
+#define	ALC_IM_RX_TIMER_DEFAULT		100	/* 100us */
+/*
+ * alc(4) does not rely on Tx completion interrupts, so set it
+ * somewhat large value to reduce Tx completion interrupts.
+ */
+#define	ALC_IM_TX_TIMER_DEFAULT		1000	/* 1ms */
+
+#define	ALC_GPHY_CFG			0x140C	/* 16 bits, 32 bits on AR816x */
+
+#define	GPHY_CFG_EXT_RESET		0x0001
+#define	GPHY_CFG_RTL_MODE		0x0002
+#define	GPHY_CFG_LED_MODE		0x0004
+#define	GPHY_CFG_ANEG_NOW		0x0008
+#define	GPHY_CFG_RECV_ANEG		0x0010
+#define	GPHY_CFG_GATE_25M_ENB		0x0020
+#define	GPHY_CFG_LPW_EXIT		0x0040
+#define	GPHY_CFG_PHY_IDDQ		0x0080
+#define	GPHY_CFG_PHY_IDDQ_DIS		0x0100
+#define	GPHY_CFG_PCLK_SEL_DIS		0x0200
+#define	GPHY_CFG_HIB_EN			0x0400
+#define	GPHY_CFG_HIB_PULSE		0x0800
+#define	GPHY_CFG_SEL_ANA_RESET		0x1000
+#define	GPHY_CFG_PHY_PLL_ON		0x2000
+#define	GPHY_CFG_PWDOWN_HW		0x4000
+#define	GPHY_CFG_PHY_PLL_BYPASS		0x8000
+#define	GPHY_CFG_100AB_ENB		0x00020000
+
+#define	ALC_IDLE_STATUS			0x1410
+#define	IDLE_STATUS_RXMAC		0x00000001
+#define	IDLE_STATUS_TXMAC		0x00000002
+#define	IDLE_STATUS_RXQ			0x00000004
+#define	IDLE_STATUS_TXQ			0x00000008
+#define	IDLE_STATUS_DMARD		0x00000010
+#define	IDLE_STATUS_DMAWR		0x00000020
+#define	IDLE_STATUS_SMB			0x00000040
+#define	IDLE_STATUS_CMB			0x00000080
+
+#define	ALC_MDIO			0x1414
+#define	MDIO_DATA_MASK			0x0000FFFF
+#define	MDIO_REG_ADDR_MASK		0x001F0000
+#define	MDIO_OP_READ			0x00200000
+#define	MDIO_OP_WRITE			0x00000000
+#define	MDIO_SUP_PREAMBLE		0x00400000
+#define	MDIO_OP_EXECUTE			0x00800000
+#define	MDIO_CLK_25_4			0x00000000
+#define	MDIO_CLK_25_6			0x02000000
+#define	MDIO_CLK_25_8			0x03000000
+#define	MDIO_CLK_25_10			0x04000000
+#define	MDIO_CLK_25_14			0x05000000
+#define	MDIO_CLK_25_20			0x06000000
+#define	MDIO_CLK_25_128			0x07000000
+#define	MDIO_OP_BUSY			0x08000000
+#define	MDIO_AP_ENB			0x10000000
+#define	MDIO_MODE_EXT			0x40000000
+#define	MDIO_DATA_SHIFT			0
+#define	MDIO_REG_ADDR_SHIFT		16
+
+#define	MDIO_REG_ADDR(x)	\
+	(((x) << MDIO_REG_ADDR_SHIFT) & MDIO_REG_ADDR_MASK)
+/* Default PHY address. */
+#define	ALC_PHY_ADDR			0
+
+#define	ALC_PHY_STATUS			0x1418
+#define	PHY_STATUS_RECV_ENB		0x00000001
+#define	PHY_STATUS_GENERAL_MASK		0x0000FFFF
+#define	PHY_STATUS_OE_PWSP_MASK		0x07FF0000
+#define	PHY_STATUS_LPW_STATE		0x80000000
+#define	PHY_STATIS_OE_PWSP_SHIFT	16
+
+/* Packet memory BIST. */
+#define	ALC_BIST0			0x141C
+#define	BIST0_ENB			0x00000001
+#define	BIST0_SRAM_FAIL			0x00000002
+#define	BIST0_FUSE_FLAG			0x00000004
+
+/* PCIe retry buffer BIST. */
+#define	ALC_BIST1			0x1420
+#define	BIST1_ENB			0x00000001
+#define	BIST1_SRAM_FAIL			0x00000002
+#define	BIST1_FUSE_FLAG			0x00000004
+
+#define	ALC_SERDES_LOCK			0x1424
+#define	SERDES_LOCK_DET			0x00000001
+#define	SERDES_LOCK_DET_ENB		0x00000002
+#define	SERDES_MAC_CLK_SLOWDOWN		0x00020000
+#define	SERDES_PHY_CLK_SLOWDOWN		0x00040000
+
+#define	ALC_LPI_CTL			0x1440
+#define	LPI_CTL_ENB			0x00000001
+
+#define	ALC_EXT_MDIO			0x1448
+#define	EXT_MDIO_REG_MASK		0x0000FFFF
+#define	EXT_MDIO_DEVADDR_MASK		0x001F0000
+#define	EXT_MDIO_REG_SHIFT		0
+#define	EXT_MDIO_DEVADDR_SHIFT		16
+
+#define	EXT_MDIO_REG(x)		\
+	(((x) << EXT_MDIO_REG_SHIFT) & EXT_MDIO_REG_MASK)
+#define	EXT_MDIO_DEVADDR(x)	\
+	(((x) << EXT_MDIO_DEVADDR_SHIFT) & EXT_MDIO_DEVADDR_MASK)
+
+#define	ALC_IDLE_DECISN_TIMER		0x1474
+#define	IDLE_DECISN_TIMER_DEFAULT_1MS	0x400
+
+#define	ALC_MAC_CFG			0x1480
+#define	MAC_CFG_TX_ENB			0x00000001
+#define	MAC_CFG_RX_ENB			0x00000002
+#define	MAC_CFG_TX_FC			0x00000004
+#define	MAC_CFG_RX_FC			0x00000008
+#define	MAC_CFG_LOOP			0x00000010
+#define	MAC_CFG_FULL_DUPLEX		0x00000020
+#define	MAC_CFG_TX_CRC_ENB		0x00000040
+#define	MAC_CFG_TX_AUTO_PAD		0x00000080
+#define	MAC_CFG_TX_LENCHK		0x00000100
+#define	MAC_CFG_RX_JUMBO_ENB		0x00000200
+#define	MAC_CFG_PREAMBLE_MASK		0x00003C00
+#define	MAC_CFG_VLAN_TAG_STRIP		0x00004000
+#define	MAC_CFG_PROMISC			0x00008000
+#define	MAC_CFG_TX_PAUSE		0x00010000
+#define	MAC_CFG_SCNT			0x00020000
+#define	MAC_CFG_SYNC_RST_TX		0x00040000
+#define	MAC_CFG_SIM_RST_TX		0x00080000
+#define	MAC_CFG_SPEED_MASK		0x00300000
+#define	MAC_CFG_SPEED_10_100		0x00100000
+#define	MAC_CFG_SPEED_1000		0x00200000
+#define	MAC_CFG_DBG_TX_BACKOFF		0x00400000
+#define	MAC_CFG_TX_JUMBO_ENB		0x00800000
+#define	MAC_CFG_RXCSUM_ENB		0x01000000
+#define	MAC_CFG_ALLMULTI		0x02000000
+#define	MAC_CFG_BCAST			0x04000000
+#define	MAC_CFG_DBG			0x08000000
+#define	MAC_CFG_SINGLE_PAUSE_ENB	0x10000000
+#define	MAC_CFG_HASH_ALG_CRC32		0x20000000
+#define	MAC_CFG_SPEED_MODE_SW		0x40000000
+#define	MAC_CFG_FAST_PAUSE		0x80000000
+#define	MAC_CFG_PREAMBLE_SHIFT		10
+#define	MAC_CFG_PREAMBLE_DEFAULT	7
+
+#define	ALC_IPG_IFG_CFG			0x1484
+#define	IPG_IFG_IPGT_MASK		0x0000007F
+#define	IPG_IFG_MIFG_MASK		0x0000FF00
+#define	IPG_IFG_IPG1_MASK		0x007F0000
+#define	IPG_IFG_IPG2_MASK		0x7F000000
+#define	IPG_IFG_IPGT_SHIFT		0
+#define	IPG_IFG_IPGT_DEFAULT		0x60
+#define	IPG_IFG_MIFG_SHIFT		8
+#define	IPG_IFG_MIFG_DEFAULT		0x50
+#define	IPG_IFG_IPG1_SHIFT		16
+#define	IPG_IFG_IPG1_DEFAULT		0x40
+#define	IPG_IFG_IPG2_SHIFT		24
+#define	IPG_IFG_IPG2_DEFAULT		0x60
+
+/* Station address. */
+#define	ALC_PAR0			0x1488
+#define	ALC_PAR1			0x148C
+
+/* 64bit multicast hash register. */
+#define	ALC_MAR0			0x1490
+#define	ALC_MAR1			0x1494
+
+/* half-duplex parameter configuration. */
+#define	ALC_HDPX_CFG			0x1498
+#define	HDPX_CFG_LCOL_MASK		0x000003FF
+#define	HDPX_CFG_RETRY_MASK		0x0000F000
+#define	HDPX_CFG_EXC_DEF_EN		0x00010000
+#define	HDPX_CFG_NO_BACK_C		0x00020000
+#define	HDPX_CFG_NO_BACK_P		0x00040000
+#define	HDPX_CFG_ABEBE			0x00080000
+#define	HDPX_CFG_ABEBT_MASK		0x00F00000
+#define	HDPX_CFG_JAMIPG_MASK		0x0F000000
+#define	HDPX_CFG_LCOL_SHIFT		0
+#define	HDPX_CFG_LCOL_DEFAULT		0x37
+#define	HDPX_CFG_RETRY_SHIFT		12
+#define	HDPX_CFG_RETRY_DEFAULT		0x0F
+#define	HDPX_CFG_ABEBT_SHIFT		20
+#define	HDPX_CFG_ABEBT_DEFAULT		0x0A
+#define	HDPX_CFG_JAMIPG_SHIFT		24
+#define	HDPX_CFG_JAMIPG_DEFAULT		0x07
+
+#define	ALC_FRAME_SIZE			0x149C
+
+#define	ALC_WOL_CFG			0x14A0
+#define	WOL_CFG_PATTERN			0x00000001
+#define	WOL_CFG_PATTERN_ENB		0x00000002
+#define	WOL_CFG_MAGIC			0x00000004
+#define	WOL_CFG_MAGIC_ENB		0x00000008
+#define	WOL_CFG_LINK_CHG		0x00000010
+#define	WOL_CFG_LINK_CHG_ENB		0x00000020
+#define	WOL_CFG_PATTERN_DET		0x00000100
+#define	WOL_CFG_MAGIC_DET		0x00000200
+#define	WOL_CFG_LINK_CHG_DET		0x00000400
+#define	WOL_CFG_CLK_SWITCH_ENB		0x00008000
+#define	WOL_CFG_PATTERN0		0x00010000
+#define	WOL_CFG_PATTERN1		0x00020000
+#define	WOL_CFG_PATTERN2		0x00040000
+#define	WOL_CFG_PATTERN3		0x00080000
+#define	WOL_CFG_PATTERN4		0x00100000
+#define	WOL_CFG_PATTERN5		0x00200000
+#define	WOL_CFG_PATTERN6		0x00400000
+
+/* WOL pattern length. */
+#define	ALC_PATTERN_CFG0		0x14A4
+#define	PATTERN_CFG_0_LEN_MASK		0x0000007F
+#define	PATTERN_CFG_1_LEN_MASK		0x00007F00
+#define	PATTERN_CFG_2_LEN_MASK		0x007F0000
+#define	PATTERN_CFG_3_LEN_MASK		0x7F000000
+
+#define	ALC_PATTERN_CFG1		0x14A8
+#define	PATTERN_CFG_4_LEN_MASK		0x0000007F
+#define	PATTERN_CFG_5_LEN_MASK		0x00007F00
+#define	PATTERN_CFG_6_LEN_MASK		0x007F0000
+
+/* RSS */
+#define	ALC_RSS_KEY0			0x14B0
+
+#define	ALC_RSS_KEY1			0x14B4
+
+#define	ALC_RSS_KEY2			0x14B8
+
+#define	ALC_RSS_KEY3			0x14BC
+
+#define	ALC_RSS_KEY4			0x14C0
+
+#define	ALC_RSS_KEY5			0x14C4
+
+#define	ALC_RSS_KEY6			0x14C8
+
+#define	ALC_RSS_KEY7			0x14CC
+
+#define	ALC_RSS_KEY8			0x14D0
+
+#define	ALC_RSS_KEY9			0x14D4
+
+#define	ALC_RSS_IDT_TABLE0		0x14E0
+
+#define	ALC_TD_PRI2_HEAD_ADDR_LO	0x14E0	/* AR816x */
+
+#define	ALC_RSS_IDT_TABLE1		0x14E4
+
+#define	ALC_TD_PRI3_HEAD_ADDR_LO	0x14E4	/* AR816x */
+
+#define	ALC_RSS_IDT_TABLE2		0x14E8
+
+#define	ALC_RSS_IDT_TABLE3		0x14EC
+
+#define	ALC_RSS_IDT_TABLE4		0x14F0
+
+#define	ALC_RSS_IDT_TABLE5		0x14F4
+
+#define	ALC_RSS_IDT_TABLE6		0x14F8
+
+#define	ALC_RSS_IDT_TABLE7		0x14FC
+
+#define	ALC_SRAM_RD0_ADDR		0x1500
+
+#define	ALC_SRAM_RD1_ADDR		0x1504
+
+#define	ALC_SRAM_RD2_ADDR		0x1508
+
+#define	ALC_SRAM_RD3_ADDR		0x150C
+
+#define	RD_HEAD_ADDR_MASK		0x000003FF
+#define	RD_TAIL_ADDR_MASK		0x03FF0000
+#define	RD_HEAD_ADDR_SHIFT		0
+#define	RD_TAIL_ADDR_SHIFT		16
+
+#define	ALC_RD_NIC_LEN0			0x1510	/* 8 bytes unit */
+#define	RD_NIC_LEN_MASK			0x000003FF
+
+#define	ALC_RD_NIC_LEN1			0x1514
+
+#define	ALC_SRAM_TD_ADDR		0x1518
+#define	TD_HEAD_ADDR_MASK		0x000003FF
+#define	TD_TAIL_ADDR_MASK		0x03FF0000
+#define	TD_HEAD_ADDR_SHIFT		0
+#define	TD_TAIL_ADDR_SHIFT		16
+
+#define	ALC_SRAM_TD_LEN			0x151C	/* 8 bytes unit */
+#define	SRAM_TD_LEN_MASK		0x000003FF
+
+#define	ALC_SRAM_RX_FIFO_ADDR		0x1520
+
+#define	ALC_SRAM_RX_FIFO_LEN		0x1524
+#define	SRAM_RX_FIFO_LEN_MASK		0x00000FFF
+#define	SRAM_RX_FIFO_LEN_SHIFT		0
+
+#define	ALC_SRAM_TX_FIFO_ADDR		0x1528
+
+#define	ALC_SRAM_TX_FIFO_LEN		0x152C
+
+#define	ALC_SRAM_TCPH_ADDR		0x1530
+#define	SRAM_TCPH_ADDR_MASK		0x00000FFF
+#define	SRAM_PATH_ADDR_MASK		0x0FFF0000
+#define	SRAM_TCPH_ADDR_SHIFT		0
+#define	SRAM_PKTH_ADDR_SHIFT		16
+
+#define	ALC_DMA_BLOCK			0x1534
+#define	DMA_BLOCK_LOAD			0x00000001
+
+#define	ALC_RX_BASE_ADDR_HI		0x1540
+
+#define	ALC_TX_BASE_ADDR_HI		0x1544
+
+#define	ALC_SMB_BASE_ADDR_HI		0x1548
+
+#define	ALC_SMB_BASE_ADDR_LO		0x154C
+
+#define	ALC_RD0_HEAD_ADDR_LO		0x1550
+
+#define	ALC_RD1_HEAD_ADDR_LO		0x1554
+
+#define	ALC_RD2_HEAD_ADDR_LO		0x1558
+
+#define	ALC_RD3_HEAD_ADDR_LO		0x155C
+
+#define	ALC_RD_RING_CNT			0x1560
+#define	RD_RING_CNT_MASK		0x00000FFF
+#define	RD_RING_CNT_SHIFT		0
+
+#define	ALC_RX_BUF_SIZE			0x1564
+#define	RX_BUF_SIZE_MASK		0x0000FFFF
+/*
+ * If larger buffer size than 1536 is specified the controller
+ * will be locked up. This is hardware limitation.
+ */
+#define	RX_BUF_SIZE_MAX			1536
+
+#define	ALC_RRD0_HEAD_ADDR_LO		0x1568
+
+#define	ALC_RRD1_HEAD_ADDR_LO		0x156C
+
+#define	ALC_RRD2_HEAD_ADDR_LO		0x1570
+
+#define	ALC_RRD3_HEAD_ADDR_LO		0x1574
+
+#define	ALC_RRD_RING_CNT		0x1578
+#define	RRD_RING_CNT_MASK		0x00000FFF
+#define	RRD_RING_CNT_SHIFT		0
+
+#define	ALC_TDH_HEAD_ADDR_LO		0x157C
+
+#define	ALC_TD_PRI1_HEAD_ADDR_LO	0x157C	/* AR816x */
+
+#define	ALC_TDL_HEAD_ADDR_LO		0x1580
+
+#define	ALC_TD_PRI0_HEAD_ADDR_LO	0x1580	/* AR816x */
+
+#define	ALC_TD_RING_CNT			0x1584
+#define	TD_RING_CNT_MASK		0x0000FFFF
+#define	TD_RING_CNT_SHIFT		0
+
+#define	ALC_CMB_BASE_ADDR_LO		0x1588
+
+#define	ALC_TXQ_CFG			0x1590
+#define	TXQ_CFG_TD_BURST_MASK		0x0000000F
+#define	TXQ_CFG_IP_OPTION_ENB		0x00000010
+#define	TXQ_CFG_ENB			0x00000020
+#define	TXQ_CFG_ENHANCED_MODE		0x00000040
+#define	TXQ_CFG_8023_ENB		0x00000080
+#define	TXQ_CFG_TX_FIFO_BURST_MASK	0xFFFF0000
+#define	TXQ_CFG_TD_BURST_SHIFT		0
+#define	TXQ_CFG_TD_BURST_DEFAULT	5
+#define	TXQ_CFG_TX_FIFO_BURST_SHIFT	16
+
+#define	ALC_TSO_OFFLOAD_THRESH		0x1594	/* 8 bytes unit */
+#define	TSO_OFFLOAD_THRESH_MASK		0x000007FF
+#define	TSO_OFFLOAD_ERRLGPKT_DROP_ENB	0x00000800
+#define	TSO_OFFLOAD_THRESH_SHIFT	0
+#define	TSO_OFFLOAD_THRESH_UNIT		8
+#define	TSO_OFFLOAD_THRESH_UNIT_SHIFT	3
+
+#define	ALC_TXF_WATER_MARK		0x1598	/* 8 bytes unit */
+#define	TXF_WATER_MARK_HI_MASK		0x00000FFF
+#define	TXF_WATER_MARK_LO_MASK		0x0FFF0000
+#define	TXF_WATER_MARK_BURST_ENB	0x80000000
+#define	TXF_WATER_MARK_LO_SHIFT		0
+#define	TXF_WATER_MARK_HI_SHIFT		16
+
+#define	ALC_THROUGHPUT_MON		0x159C
+#define	THROUGHPUT_MON_RATE_MASK	0x00000003
+#define	THROUGHPUT_MON_ENB		0x00000080
+#define	THROUGHPUT_MON_RATE_SHIFT	0
+
+#define	ALC_RXQ_CFG			0x15A0
+#define	RXQ_CFG_ASPM_THROUGHPUT_LIMIT_MASK	0x00000003
+#define	RXQ_CFG_ASPM_THROUGHPUT_LIMIT_NONE	0x00000000
+#define	RXQ_CFG_ASPM_THROUGHPUT_LIMIT_1M	0x00000001
+#define	RXQ_CFG_ASPM_THROUGHPUT_LIMIT_10M	0x00000002
+#define	RXQ_CFG_ASPM_THROUGHPUT_LIMIT_100M	0x00000003
+#define	RXQ_CFG_QUEUE1_ENB		0x00000010
+#define	RXQ_CFG_QUEUE2_ENB		0x00000020
+#define	RXQ_CFG_QUEUE3_ENB		0x00000040
+#define	RXQ_CFG_IPV6_CSUM_ENB		0x00000080
+#define	RXQ_CFG_RSS_HASH_TBL_LEN_MASK	0x0000FF00
+#define	RXQ_CFG_RSS_HASH_IPV4		0x00010000
+#define	RXQ_CFG_RSS_HASH_IPV4_TCP	0x00020000
+#define	RXQ_CFG_RSS_HASH_IPV6		0x00040000
+#define	RXQ_CFG_RSS_HASH_IPV6_TCP	0x00080000
+#define	RXQ_CFG_RD_BURST_MASK		0x03F00000
+#define	RXQ_CFG_RSS_MODE_DIS		0x00000000
+#define	RXQ_CFG_RSS_MODE_SQSINT		0x04000000
+#define	RXQ_CFG_RSS_MODE_MQUESINT	0x08000000
+#define	RXQ_CFG_RSS_MODE_MQUEMINT	0x0C000000
+#define	RXQ_CFG_NIP_QUEUE_SEL_TBL	0x10000000
+#define	RXQ_CFG_RSS_HASH_ENB		0x20000000
+#define	RXQ_CFG_CUT_THROUGH_ENB		0x40000000
+#define	RXQ_CFG_QUEUE0_ENB		0x80000000
+#define	RXQ_CFG_RSS_HASH_TBL_LEN_SHIFT	8
+#define	RXQ_CFG_RD_BURST_DEFAULT	8
+#define	RXQ_CFG_RD_BURST_SHIFT		20
+#define	RXQ_CFG_ENB					\
+	(RXQ_CFG_QUEUE0_ENB | RXQ_CFG_QUEUE1_ENB |	\
+	 RXQ_CFG_QUEUE2_ENB | RXQ_CFG_QUEUE3_ENB)
+
+/* AR816x specific bits */
+#define	RXQ_CFG_816X_RSS_HASH_IPV4	0x00000004
+#define	RXQ_CFG_816X_RSS_HASH_IPV4_TCP	0x00000008
+#define	RXQ_CFG_816X_RSS_HASH_IPV6	0x00000010
+#define	RXQ_CFG_816X_RSS_HASH_IPV6_TCP	0x00000020
+#define	RXQ_CFG_816X_RSS_HASH_MASK	0x0000003C
+#define	RXQ_CFG_816X_IPV6_PARSE_ENB	0x00000080
+#define	RXQ_CFG_816X_IDT_TBL_SIZE_MASK	0x0001FF00
+#define	RXQ_CFG_816X_IDT_TBL_SIZE_SHIFT	8
+#define	RXQ_CFG_816X_IDT_TBL_SIZE_DEFAULT	0x100
+
+#define	ALC_RX_RD_FREE_THRESH		0x15A4	/* 8 bytes unit. */
+#define	RX_RD_FREE_THRESH_HI_MASK	0x0000003F
+#define	RX_RD_FREE_THRESH_LO_MASK	0x00000FC0
+#define	RX_RD_FREE_THRESH_HI_SHIFT	0
+#define	RX_RD_FREE_THRESH_LO_SHIFT	6
+#define	RX_RD_FREE_THRESH_HI_DEFAULT	16
+#define	RX_RD_FREE_THRESH_LO_DEFAULT	8
+
+#define	ALC_RX_FIFO_PAUSE_THRESH	0x15A8
+#define	RX_FIFO_PAUSE_THRESH_LO_MASK	0x00000FFF
+#define	RX_FIFO_PAUSE_THRESH_HI_MASK	0x0FFF0000
+#define	RX_FIFO_PAUSE_THRESH_LO_SHIFT	0
+#define	RX_FIFO_PAUSE_THRESH_HI_SHIFT	16
+
+/*
+ * Size = tx-packet(1522)  IPG(12) + SOF(8) + 64(Pause) + IPG(12) + SOF(8) +
+ * rx-packet(1522) + delay-of-link(64) = 3212.
+ */
+#define	RX_FIFO_PAUSE_816X_RSVD		3212
+
+#define	ALC_RD_DMA_CFG			0x15AC
+#define	RD_DMA_CFG_THRESH_MASK		0x00000FFF	/* 8 bytes unit */
+#define	RD_DMA_CFG_TIMER_MASK		0xFFFF0000
+#define	RD_DMA_CFG_THRESH_SHIFT		0
+#define	RD_DMA_CFG_TIMER_SHIFT		16
+#define	RD_DMA_CFG_THRESH_DEFAULT	0x100
+#define	RD_DMA_CFG_TIMER_DEFAULT	0
+#define	RD_DMA_CFG_TICK_USECS		8
+#define	ALC_RD_DMA_CFG_USECS(x)		((x) / RD_DMA_CFG_TICK_USECS)
+
+#define	ALC_RSS_HASH_VALUE		0x15B0
+
+#define	ALC_RSS_HASH_FLAG		0x15B4
+
+#define	ALC_RSS_CPU			0x15B8
+
+#define	ALC_DMA_CFG			0x15C0
+#define	DMA_CFG_IN_ORDER		0x00000001
+#define	DMA_CFG_ENH_ORDER		0x00000002
+#define	DMA_CFG_OUT_ORDER		0x00000004
+#define	DMA_CFG_RCB_64			0x00000000
+#define	DMA_CFG_RCB_128			0x00000008
+#define	DMA_CFG_RD_BURST_128		0x00000000
+#define	DMA_CFG_RD_BURST_256		0x00000010
+#define	DMA_CFG_RD_BURST_512		0x00000020
+#define	DMA_CFG_RD_BURST_1024		0x00000030
+#define	DMA_CFG_RD_BURST_2048		0x00000040
+#define	DMA_CFG_RD_BURST_4096		0x00000050
+#define	DMA_CFG_WR_BURST_128		0x00000000
+#define	DMA_CFG_WR_BURST_256		0x00000080
+#define	DMA_CFG_WR_BURST_512		0x00000100
+#define	DMA_CFG_WR_BURST_1024		0x00000180
+#define	DMA_CFG_WR_BURST_2048		0x00000200
+#define	DMA_CFG_WR_BURST_4096		0x00000280
+#define	DMA_CFG_RD_REQ_PRI		0x00000400
+#define	DMA_CFG_RD_DELAY_CNT_MASK	0x0000F800
+#define	DMA_CFG_WR_DELAY_CNT_MASK	0x000F0000
+#define	DMA_CFG_CMB_ENB			0x00100000
+#define	DMA_CFG_SMB_ENB			0x00200000
+#define	DMA_CFG_CMB_NOW			0x00400000
+#define	DMA_CFG_SMB_DIS			0x01000000
+#define	DMA_CFG_RD_CHNL_SEL_MASK	0x0C000000
+#define	DMA_CFG_RD_CHNL_SEL_1		0x00000000
+#define	DMA_CFG_RD_CHNL_SEL_2		0x04000000
+#define	DMA_CFG_RD_CHNL_SEL_3		0x08000000
+#define	DMA_CFG_RD_CHNL_SEL_4		0x0C000000
+#define	DMA_CFG_WSRAM_RDCTL		0x10000000
+#define	DMA_CFG_RD_PEND_CLR		0x20000000
+#define	DMA_CFG_WR_PEND_CLR		0x40000000
+#define	DMA_CFG_SMB_NOW			0x80000000
+#define	DMA_CFG_RD_BURST_MASK		0x07
+#define	DMA_CFG_RD_BURST_SHIFT		4
+#define	DMA_CFG_WR_BURST_MASK		0x07
+#define	DMA_CFG_WR_BURST_SHIFT		7
+#define	DMA_CFG_RD_DELAY_CNT_SHIFT	11
+#define	DMA_CFG_WR_DELAY_CNT_SHIFT	16
+#define	DMA_CFG_RD_DELAY_CNT_DEFAULT	15
+#define	DMA_CFG_WR_DELAY_CNT_DEFAULT	4
+
+#define	ALC_SMB_STAT_TIMER		0x15C4
+#define	SMB_STAT_TIMER_MASK		0x00FFFFFF
+#define	SMB_STAT_TIMER_SHIFT		0
+
+#define	ALC_CMB_TD_THRESH		0x15C8
+#define	CMB_TD_THRESH_MASK		0x0000FFFF
+#define	CMB_TD_THRESH_SHIFT		0
+
+#define	ALC_CMB_TX_TIMER		0x15CC
+#define	CMB_TX_TIMER_MASK		0x0000FFFF
+#define	CMB_TX_TIMER_SHIFT		0
+
+#define	ALC_MSI_MAP_TBL1		0x15D0
+
+#define	ALC_MSI_ID_MAP			0x15D4
+
+#define	ALC_MSI_MAP_TBL2		0x15D8
+
+#define	ALC_MBOX_RD0_PROD_IDX		0x15E0
+
+#define	ALC_MBOX_RD1_PROD_IDX		0x15E4
+
+#define	ALC_MBOX_RD2_PROD_IDX		0x15E8
+
+#define	ALC_MBOX_RD3_PROD_IDX		0x15EC
+
+#define	ALC_MBOX_RD_PROD_MASK		0x0000FFFF
+#define	MBOX_RD_PROD_SHIFT		0
+
+#define	ALC_MBOX_TD_PROD_IDX		0x15F0
+#define	MBOX_TD_PROD_HI_IDX_MASK	0x0000FFFF
+#define	MBOX_TD_PROD_LO_IDX_MASK	0xFFFF0000
+#define	MBOX_TD_PROD_HI_IDX_SHIFT	0
+#define	MBOX_TD_PROD_LO_IDX_SHIFT	16
+
+#define	ALC_MBOX_TD_PRI1_PROD_IDX	0x15F0	/* 16 bits AR816x */
+#define	ALC_MBOX_TD_PRI0_PROD_IDX	0x15F2	/* 16 bits AR816x */
+#define	ALC_MBOX_TD_CONS_IDX		0x15F4
+#define	MBOX_TD_CONS_HI_IDX_MASK	0x0000FFFF
+#define	MBOX_TD_CONS_LO_IDX_MASK	0xFFFF0000
+#define	MBOX_TD_CONS_HI_IDX_SHIFT	0
+#define	MBOX_TD_CONS_LO_IDX_SHIFT	16
+
+#define	ALC_MBOX_TD_PRI1_CONS_IDX	0x15F4	/* 16 bits AR816x */
+#define	ALC_MBOX_TD_PRI0_CONS_IDX	0x15F6	/* 16 bits AR816x */
+
+#define	ALC_MBOX_RD01_CONS_IDX		0x15F8
+#define	MBOX_RD0_CONS_IDX_MASK		0x0000FFFF
+#define	MBOX_RD1_CONS_IDX_MASK		0xFFFF0000
+#define	MBOX_RD0_CONS_IDX_SHIFT		0
+#define	MBOX_RD1_CONS_IDX_SHIFT		16
+
+#define	ALC_MBOX_RD23_CONS_IDX		0x15FC
+#define	MBOX_RD2_CONS_IDX_MASK		0x0000FFFF
+#define	MBOX_RD3_CONS_IDX_MASK		0xFFFF0000
+#define	MBOX_RD2_CONS_IDX_SHIFT		0
+#define	MBOX_RD3_CONS_IDX_SHIFT		16
+
+#define	ALC_INTR_STATUS			0x1600
+#define	INTR_SMB			0x00000001
+#define	INTR_TIMER			0x00000002
+#define	INTR_MANUAL_TIMER		0x00000004
+#define	INTR_RX_FIFO_OFLOW		0x00000008
+#define	INTR_RD0_UNDERRUN		0x00000010
+#define	INTR_RD1_UNDERRUN		0x00000020
+#define	INTR_RD2_UNDERRUN		0x00000040
+#define	INTR_RD3_UNDERRUN		0x00000080
+#define	INTR_TX_FIFO_UNDERRUN		0x00000100
+#define	INTR_DMA_RD_TO_RST		0x00000200
+#define	INTR_DMA_WR_TO_RST		0x00000400
+#define	INTR_TX_CREDIT			0x00000800
+#define	INTR_GPHY			0x00001000
+#define	INTR_GPHY_LOW_PW		0x00002000
+#define	INTR_TXQ_TO_RST			0x00004000
+#define	INTR_TX_PKT0			0x00008000
+#define	INTR_RX_PKT0			0x00010000
+#define	INTR_RX_PKT1			0x00020000
+#define	INTR_RX_PKT2			0x00040000
+#define	INTR_RX_PKT3			0x00080000
+#define	INTR_MAC_RX			0x00100000
+#define	INTR_MAC_TX			0x00200000
+#define	INTR_UNDERRUN			0x00400000
+#define	INTR_FRAME_ERROR		0x00800000
+#define	INTR_FRAME_OK			0x01000000
+#define	INTR_CSUM_ERROR			0x02000000
+#define	INTR_PHY_LINK_DOWN		0x04000000
+#define	INTR_DIS_INT			0x80000000
+
+/* INTR status for AR816x/AR817x  4 TX queues, 8 RX queues */
+#define	INTR_TX_PKT1			0x00000020
+#define	INTR_TX_PKT2			0x00000040
+#define	INTR_TX_PKT3			0x00000080
+#define	INTR_RX_PKT4			0x08000000
+#define	INTR_RX_PKT5			0x10000000
+#define	INTR_RX_PKT6			0x20000000
+#define	INTR_RX_PKT7			0x40000000
+
+/* Interrupt Mask Register */
+#define	ALC_INTR_MASK			0x1604
+
+#define	INTR_TX_PKT			INTR_TX_PKT0
+#define	INTR_RX_PKT			INTR_RX_PKT0
+#define	INTR_RD_UNDERRUN		INTR_RD0_UNDERRUN
+
+#define	ALC_INTRS					\
+	(INTR_DMA_RD_TO_RST | INTR_DMA_WR_TO_RST |	\
+	INTR_TXQ_TO_RST	| INTR_RX_PKT | INTR_TX_PKT |	\
+	INTR_RX_FIFO_OFLOW | INTR_RD_UNDERRUN |		\
+	INTR_TX_FIFO_UNDERRUN | INTR_GPHY)
+#define	ALC_INTR_RETRIG_TIMER		0x1608
+#define	INTR_RETRIG_TIMER_MASK		0x0000FFFF
+#define	INTR_RETRIG_TIMER_SHIFT		0
+
+#define	ALC_HDS_CFG			0x160C
+#define	HDS_CFG_ENB			0x00000001
+#define	HDS_CFG_BACKFILLSIZE_MASK	0x000FFF00
+#define	HDS_CFG_MAX_HDRSIZE_MASK	0xFFF00000
+#define	HDS_CFG_BACKFILLSIZE_SHIFT	8
+#define	HDS_CFG_MAX_HDRSIZE_SHIFT	20
+
+#define	ALC_MBOX_TD_PRI3_PROD_IDX	0x1618	/* 16 bits AR816x */
+#define	ALC_MBOX_TD_PRI2_PROD_IDX	0x161A	/* 16 bits AR816x */
+#define	ALC_MBOX_TD_PRI3_CONS_IDX	0x161C	/* 16 bits AR816x */
+#define	ALC_MBOX_TD_PRI2_CONS_IDX	0x161E	/* 16 bits AR816x */
+
+/* AR813x/AR815x registers for MAC statistics */
+#define	ALC_RX_MIB_BASE			0x1700
+
+#define	ALC_TX_MIB_BASE			0x1760
+
+#define	ALC_DRV				0x1804	/* AR816x */
+#define	DRV_ASPM_SPD10LMT_1M		0x00000000
+#define	DRV_ASPM_SPD10LMT_10M		0x00000001
+#define	DRV_ASPM_SPD10LMT_100M		0x00000002
+#define	DRV_ASPM_SPD10LMT_NO		0x00000003
+#define	DRV_ASPM_SPD10LMT_MASK		0x00000003
+#define	DRV_ASPM_SPD100LMT_1M		0x00000000
+#define	DRV_ASPM_SPD100LMT_10M		0x00000004
+#define	DRV_ASPM_SPD100LMT_100M		0x00000008
+#define	DRV_ASPM_SPD100LMT_NO		0x0000000C
+#define	DRV_ASPM_SPD100LMT_MASK		0x0000000C
+#define	DRV_ASPM_SPD1000LMT_100M	0x00000000
+#define	DRV_ASPM_SPD1000LMT_NO		0x00000010
+#define	DRV_ASPM_SPD1000LMT_1M		0x00000020
+#define	DRV_ASPM_SPD1000LMT_10M		0x00000030
+#define	DRV_ASPM_SPD1000LMT_MASK	0x00000000
+#define	DRV_WOLCAP_BIOS_EN		0x00000100
+#define	DRV_WOLMAGIC_EN			0x00000200
+#define	DRV_WOLLINKUP_EN		0x00000400
+#define	DRV_WOLPATTERN_EN		0x00000800
+#define	DRV_AZ_EN			0x00001000
+#define	DRV_WOLS5_BIOS_EN		0x00010000
+#define	DRV_WOLS5_EN			0x00020000
+#define	DRV_DISABLE			0x00040000
+#define	DRV_PHY_MASK			0x1FE00000
+#define	DRV_PHY_EEE			0x00200000
+#define	DRV_PHY_APAUSE			0x00400000
+#define	DRV_PHY_PAUSE			0x00800000
+#define	DRV_PHY_DUPLEX			0x01000000
+#define	DRV_PHY_10			0x02000000
+#define	DRV_PHY_100			0x04000000
+#define	DRV_PHY_1000			0x08000000
+#define	DRV_PHY_AUTO			0x10000000
+#define	DRV_PHY_SHIFT			21
+
+#define	ALC_CLK_GATING_CFG		0x1814
+#define	CLK_GATING_DMAW_ENB		0x0001
+#define	CLK_GATING_DMAR_ENB		0x0002
+#define	CLK_GATING_TXQ_ENB		0x0004
+#define	CLK_GATING_RXQ_ENB		0x0008
+#define	CLK_GATING_TXMAC_ENB		0x0010
+#define	CLK_GATING_RXMAC_ENB		0x0020
+
+#define	ALC_DEBUG_DATA0			0x1900
+
+#define	ALC_DEBUG_DATA1			0x1904
+
+#define	ALC_MSI_RETRANS_TIMER		0x1920
+#define	MSI_RETRANS_TIMER_MASK		0x0000FFFF
+#define	MSI_RETRANS_MASK_SEL_STD	0x00000000
+#define	MSI_RETRANS_MASK_SEL_LINE	0x00010000
+#define	MSI_RETRANS_TIMER_SHIFT		0
+
+#define	ALC_WRR				0x1938
+#define	WRR_PRI0_MASK			0x0000001F
+#define	WRR_PRI1_MASK			0x00001F00
+#define	WRR_PRI2_MASK			0x001F0000
+#define	WRR_PRI3_MASK			0x1F000000
+#define	WRR_PRI_RESTRICT_MASK		0x60000000
+#define	WRR_PRI_RESTRICT_ALL		0x00000000
+#define	WRR_PRI_RESTRICT_HI		0x20000000
+#define	WRR_PRI_RESTRICT_HI2		0x40000000
+#define	WRR_PRI_RESTRICT_NONE		0x60000000
+#define	WRR_PRI0_SHIFT			0
+#define	WRR_PRI1_SHIFT			8
+#define	WRR_PRI2_SHIFT			16
+#define	WRR_PRI3_SHIFT			24
+#define	WRR_PRI_DEFAULT			4
+#define	WRR_PRI_RESTRICT_SHIFT		29
+
+#define	ALC_HQTD_CFG			0x193C
+#define	HQTD_CFG_Q1_BURST_MASK		0x0000000F
+#define	HQTD_CFG_Q2_BURST_MASK		0x000000F0
+#define	HQTD_CFG_Q3_BURST_MASK		0x00000F00
+#define	HQTD_CFG_BURST_ENB		0x80000000
+#define	HQTD_CFG_Q1_BURST_SHIFT		0
+#define	HQTD_CFG_Q2_BURST_SHIFT		4
+#define	HQTD_CFG_Q3_BURST_SHIFT		8
+
+#define	ALC_MISC			0x19C0
+#define	MISC_INTNLOSC_OPEN		0x00000008
+#define	MISC_ISO_ENB			0x00001000
+#define	MISC_PSW_OCP_MASK		0x00E00000
+#define	MISC_PSW_OCP_SHIFT		21
+#define	MISC_PSW_OCP_DEFAULT		7
+
+#define	ALC_MISC2			0x19C8
+#define	MISC2_CALB_START		0x00000001
+
+#define	ALC_MISC3			0x19CC
+#define	MISC3_25M_NOTO_INTNL		0x00000001
+#define	MISC3_25M_BY_SW			0x00000002
+
+#define	ALC_MII_DBG_ADDR		0x1D
+#define	ALC_MII_DBG_DATA		0x1E
+
+#define	MII_ANA_CFG0			0x00
+#define	ANA_RESTART_CAL			0x0001
+#define	ANA_MANUL_SWICH_ON_MASK		0x001E
+#define	ANA_MAN_ENABLE			0x0020
+#define	ANA_SEL_HSP			0x0040
+#define	ANA_EN_HB			0x0080
+#define	ANA_EN_HBIAS			0x0100
+#define	ANA_OEN_125M			0x0200
+#define	ANA_EN_LCKDT			0x0400
+#define	ANA_LCKDT_PHY			0x0800
+#define	ANA_AFE_MODE			0x1000
+#define	ANA_VCO_SLOW			0x2000
+#define	ANA_VCO_FAST			0x4000
+#define	ANA_SEL_CLK125M_DSP		0x8000
+#define	ANA_MANUL_SWICH_ON_SHIFT	1
+
+#define	MII_DBG_ANACTL			0x00
+#define	DBG_ANACTL_DEFAULT		0x02EF
+
+#define	MII_ANA_CFG4			0x04
+#define	ANA_IECHO_ADJ_MASK		0x0F
+#define	ANA_IECHO_ADJ_3_MASK		0x000F
+#define	ANA_IECHO_ADJ_2_MASK		0x00F0
+#define	ANA_IECHO_ADJ_1_MASK		0x0F00
+#define	ANA_IECHO_ADJ_0_MASK		0xF000
+#define	ANA_IECHO_ADJ_3_SHIFT		0
+#define	ANA_IECHO_ADJ_2_SHIFT		4
+#define	ANA_IECHO_ADJ_1_SHIFT		8
+#define	ANA_IECHO_ADJ_0_SHIFT		12
+
+#define	MII_DBG_SYSMODCTL		0x04
+#define	DBG_SYSMODCTL_DEFAULT		0xBB8B
+
+#define	MII_ANA_CFG5			0x05
+#define	ANA_SERDES_CDR_BW_MASK		0x0003
+#define	ANA_MS_PAD_DBG			0x0004
+#define	ANA_SPEEDUP_DBG			0x0008
+#define	ANA_SERDES_TH_LOS_MASK		0x0030
+#define	ANA_SERDES_EN_DEEM		0x0040
+#define	ANA_SERDES_TXELECIDLE		0x0080
+#define	ANA_SERDES_BEACON		0x0100
+#define	ANA_SERDES_HALFTXDR		0x0200
+#define	ANA_SERDES_SEL_HSP		0x0400
+#define	ANA_SERDES_EN_PLL		0x0800
+#define	ANA_SERDES_EN			0x1000
+#define	ANA_SERDES_EN_LCKDT		0x2000
+#define	ANA_SERDES_CDR_BW_SHIFT		0
+#define	ANA_SERDES_TH_LOS_SHIFT		4
+
+#define	MII_DBG_SRDSYSMOD		0x05
+#define	DBG_SRDSYSMOD_DEFAULT		0x2C46
+
+#define	MII_ANA_CFG11			0x0B
+#define	ANA_PS_HIB_EN			0x8000
+
+#define	MII_DBG_HIBNEG			0x0B
+#define	DBG_HIBNEG_HIB_PULSE		0x1000
+#define	DBG_HIBNEG_PSHIB_EN		0x8000
+#define	DBG_HIBNEG_DEFAULT		0xBC40
+
+#define	MII_ANA_CFG18			0x12
+#define	ANA_TEST_MODE_10BT_01MASK	0x0003
+#define	ANA_LOOP_SEL_10BT		0x0004
+#define	ANA_RGMII_MODE_SW		0x0008
+#define	ANA_EN_LONGECABLE		0x0010
+#define	ANA_TEST_MODE_10BT_2		0x0020
+#define	ANA_EN_10BT_IDLE		0x0400
+#define	ANA_EN_MASK_TB			0x0800
+#define	ANA_TRIGGER_SEL_TIMER_MASK	0x3000
+#define	ANA_INTERVAL_SEL_TIMER_MASK	0xC000
+#define	ANA_TEST_MODE_10BT_01SHIFT	0
+#define	ANA_TRIGGER_SEL_TIMER_SHIFT	12
+#define	ANA_INTERVAL_SEL_TIMER_SHIFT	14
+
+#define	MII_DBG_TST10BTCFG		0x12
+#define	DBG_TST10BTCFG_DEFAULT		0x4C04
+
+#define	MII_DBG_AZ_ANADECT		0x15
+#define	DBG_AZ_ANADECT_DEFAULT		0x3220
+#define	DBG_AZ_ANADECT_LONG		0x3210
+
+#define	MII_DBG_MSE16DB			0x18
+#define	DBG_MSE16DB_UP			0x05EA
+#define	DBG_MSE16DB_DOWN		0x02EA
+
+#define	MII_DBG_MSE20DB			0x1C
+#define	DBG_MSE20DB_TH_MASK		0x01FC
+#define	DBG_MSE20DB_TH_DEFAULT		0x2E
+#define	DBG_MSE20DB_TH_HI		0x54
+#define	DBG_MSE20DB_TH_SHIFT		2
+
+#define	MII_DBG_AGC			0x23
+#define	DBG_AGC_2_VGA_MASK		0x3F00
+#define	DBG_AGC_2_VGA_SHIFT		8
+#define	DBG_AGC_LONG1G_LIMT		40
+#define	DBG_AGC_LONG100M_LIMT		44
+
+#define	MII_ANA_CFG41			0x29
+#define	ANA_TOP_PS_EN			0x8000
+
+#define	MII_DBG_LEGCYPS			0x29
+#define	DBG_LEGCYPS_ENB			0x8000
+#define	DBG_LEGCYPS_DEFAULT		0x129D
+
+#define	MII_ANA_CFG54			0x36
+#define	ANA_LONG_CABLE_TH_100_MASK	0x003F
+#define	ANA_DESERVED			0x0040
+#define	ANA_EN_LIT_CH			0x0080
+#define	ANA_SHORT_CABLE_TH_100_MASK	0x3F00
+#define	ANA_BP_BAD_LINK_ACCUM		0x4000
+#define	ANA_BP_SMALL_BW			0x8000
+#define	ANA_LONG_CABLE_TH_100_SHIFT	0
+#define	ANA_SHORT_CABLE_TH_100_SHIFT	8
+
+#define	MII_DBG_TST100BTCFG		0x36
+#define	DBG_TST100BTCFG_DEFAULT		0xE12C
+
+#define	MII_DBG_GREENCFG		0x3B
+#define	DBG_GREENCFG_DEFAULT		0x7078
+
+#define	MII_DBG_GREENCFG2		0x3D
+#define	DBG_GREENCFG2_GATE_DFSE_EN	0x0080
+#define	DBG_GREENCFG2_BP_GREEN		0x8000
+
+/* Device addr 3 */
+#define	MII_EXT_PCS			3
+
+#define	MII_EXT_CLDCTL3			0x8003
+#define	EXT_CLDCTL3_BP_CABLE1TH_DET_GT	0x8000
+
+#define	MII_EXT_CLDCTL5			0x8005
+#define	EXT_CLDCTL5_BP_VD_HLFBIAS	0x4000
+
+#define	MII_EXT_CLDCTL6			0x8006
+#define	EXT_CLDCTL6_CAB_LEN_MASK	0x00FF
+#define	EXT_CLDCTL6_CAB_LEN_SHIFT	0
+#define	EXT_CLDCTL6_CAB_LEN_SHORT1G	116
+#define	EXT_CLDCTL6_CAB_LEN_SHORT100M	152
+
+#define	MII_EXT_VDRVBIAS		0x8062
+#define	EXT_VDRVBIAS_DEFAULT		3
+
+/* Device addr 7 */
+#define	MII_EXT_ANEG			7
+
+#define	MII_EXT_ANEG_LOCAL_EEEADV	0x3C
+#define	ANEG_LOCA_EEEADV_100BT		0x0002
+#define	ANEG_LOCA_EEEADV_1000BT		0x0004
+
+#define	MII_EXT_ANEG_AFE		0x801A
+#define	ANEG_AFEE_10BT_100M_TH		0x0040
+
+#define	MII_EXT_ANEG_S3DIG10		0x8023
+#define	ANEG_S3DIG10_SL			0x0001
+#define	ANEG_S3DIG10_DEFAULT		0
+
+#define	MII_EXT_ANEG_NLP78		0x8027
+#define	ANEG_NLP78_120M_DEFAULT		0x8A05
+
+#define	RRD_CSUM_MASK			0x0000FFFF
+#define	RRD_RD_CNT_MASK			0x000F0000
+#define	RRD_RD_IDX_MASK			0xFFF00000
+#define	RRD_CSUM_SHIFT			0
+#define	RRD_RD_CNT_SHIFT		16
+#define	RRD_RD_IDX_SHIFT		20
+#define	RRD_CSUM(x)			\
+	(((x) & RRD_CSUM_MASK) >> RRD_CSUM_SHIFT)
+#define	RRD_RD_CNT(x)			\
+	(((x) & RRD_RD_CNT_MASK) >> RRD_RD_CNT_SHIFT)
+#define	RRD_RD_IDX(x)			\
+	(((x) & RRD_RD_IDX_MASK) >> RRD_RD_IDX_SHIFT)
+#define	RRD_VLAN_MASK			0x0000FFFF
+#define	RRD_HEAD_LEN_MASK		0x00FF0000
+#define	RRD_HDS_MASK			0x03000000
+#define	RRD_HDS_NONE			0x00000000
+#define	RRD_HDS_HEAD			0x01000000
+#define	RRD_HDS_DATA			0x02000000
+#define	RRD_CPU_MASK			0x0C000000
+#define	RRD_HASH_FLAG_MASK		0xF0000000
+#define	RRD_VLAN_SHIFT			0
+#define	RRD_HEAD_LEN_SHIFT		16
+#define	RRD_HDS_SHIFT			24
+#define	RRD_CPU_SHIFT			26
+#define	RRD_HASH_FLAG_SHIFT		28
+#define	RRD_VLAN(x)			\
+	(((x) & RRD_VLAN_MASK) >> RRD_VLAN_SHIFT)
+#define	RRD_HEAD_LEN(x)			\
+	(((x) & RRD_HEAD_LEN_MASK) >> RRD_HEAD_LEN_SHIFT)
+#define	RRD_CPU(x)			\
+	(((x) & RRD_CPU_MASK) >> RRD_CPU_SHIFT)
+#define	RRD_LEN_MASK			0x00003FFF
+#define	RRD_LEN_SHIFT			0
+#define	RRD_TCP_UDPCSUM_NOK		0x00004000
+#define	RRD_IPCSUM_NOK			0x00008000
+#define	RRD_VLAN_TAG			0x00010000
+#define	RRD_PROTO_MASK			0x000E0000
+#define	RRD_PROTO_IPV4			0x00020000
+#define	RRD_PROTO_IPV6			0x000C0000
+#define	RRD_ERR_SUM			0x00100000
+#define	RRD_ERR_CRC			0x00200000
+#define	RRD_ERR_ALIGN			0x00400000
+#define	RRD_ERR_TRUNC			0x00800000
+#define	RRD_ERR_RUNT			0x01000000
+#define	RRD_ERR_ICMP			0x02000000
+#define	RRD_BCAST			0x04000000
+#define	RRD_MCAST			0x08000000
+#define	RRD_SNAP_LLC			0x10000000
+#define	RRD_ETHER			0x00000000
+#define	RRD_FIFO_FULL			0x20000000
+#define	RRD_ERR_LENGTH			0x40000000
+#define	RRD_VALID			0x80000000
+#define	RRD_BYTES(x)			\
+	(((x) & RRD_LEN_MASK) >> RRD_LEN_SHIFT)
+#define	RRD_IPV4(x)			\
+	(((x) & RRD_PROTO_MASK) == RRD_PROTO_IPV4)
+
+#define	ALC_TX_TIMEOUT		5
+#define	ALC_RESET_TIMEOUT	100
+#define	ALC_TIMEOUT		1000
+#define	ALC_PHY_TIMEOUT		1000
+
+#define	MASTER_WAKEN_25M	0x00000020
+#define	ALC_FLAG_MSI		0x0004
+#define	ALC_FLAG_MSIX		0x0008
diff -r 484d3f8e5978 sys/src/9/pc/etherath.c
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/sys/src/9/pc/etherath.c	Fri Oct 09 08:48:49 2020 +0300
@@ -0,0 +1,11 @@
+#include "u.h"
+#include "../port/lib.h"
+#include "mem.h"
+#include "dat.h"
+#include "fns.h"
+#include "io.h"
+#include "../port/pci.h"
+#include "../port/error.h"
+#include "../port/netif.h"
+#include "../port/etherif.h"
+#include "../port/wifi.h"
diff -r 484d3f8e5978 sys/src/9/pc/etherathn.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/sys/src/9/pc/etherathn.h	Fri Oct 09 08:48:49 2020 +0300
@@ -0,0 +1,4719 @@
+/*	$OpenBSD: athnreg.h,v 1.7 2010/04/07 16:19:33 damien Exp $	*/
+
+/*-
+ * Copyright (c) 2009 Damien Bergamini <damien.bergamini@free.fr>
+ * Copyright (c) 2008-2009 Atheros Communications Inc.
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+#define IEEE80211_NO_HT
+#define IEEE80211_STA_ONLY
+//#define ATHN_BT_COEXISTENCE
+#define nitems(_a)	(sizeof((_a)) / sizeof((_a)[0]))
+#define NULL nil
+#define IEEE80211_IS_CHAN_2GHZ(sc) (sc->channel<=14)
+#define swap16(a) ((((a)>>8)&0xff)|(((a)<<8)&0xff00))
+#define swap32(a) ((((a)>>16)&0xffff)|(((a)<<16)&0xffff000))
+#define KASSERT(x)
+
+typedef uchar uint8_t;
+typedef ushort	uint16_t;
+typedef uint	uint32_t;
+typedef signed char int8_t;
+typedef int int32_t;
+typedef signed short int16_t;
+typedef unsigned long long	uint64_t;
+typedef long long int64_t;
+#define athn_softc Ctlr
+#define printf print
+#define DELAY(x) microdelay(x)
+#define ETIMEDOUT -1
+#define EIO -1
+#define ENOMEM -1
+#define EINVAL -1
+#define EPERM -1
+#define __packed
+
+#define AR_CR				0x0008
+#define AR_RXDP				0x000c
+#define AR_CFG				0x0014
+#define AR_MIRT				0x0020
+#define AR_IER				0x0024
+#define AR_TIMT				0x0028
+#define AR_RIMT				0x002c
+#define AR_TXCFG			0x0030
+#define AR_RXCFG			0x0034
+#define AR_MIBC				0x0040
+#define AR_TOPS				0x0044
+#define AR_RXNPTO			0x0048
+#define AR_TXNPTO			0x004c
+#define AR_RPGTO			0x0050
+#define AR_RPCNT			0x0054
+#define AR_MACMISC			0x0058
+#define AR_GTXTO			0x0064
+#define AR_GTTM				0x0068
+#define AR_CST				0x006c
+#define AR_ISR				0x0080
+#define AR_ISR_S0			0x0084
+#define AR_ISR_S1			0x0088
+#define AR_ISR_S2			0x008c
+#define AR_ISR_S3			0x0090
+#define AR_ISR_S4			0x0094
+#define AR_ISR_S5			0x0098
+#define AR_IMR				0x00a0
+#define AR_IMR_S0			0x00a4
+#define AR_IMR_S1			0x00a8
+#define AR_IMR_S2			0x00ac
+#define AR_IMR_S3			0x00b0
+#define AR_IMR_S4			0x00b4
+#define AR_IMR_S5			0x00b8
+#define AR_ISR_RAC			0x00c0
+#define AR_ISR_S0_S			0x00c4
+#define AR_ISR_S1_S			0x00c8
+#define AR_ISR_S2_S			0x00cc
+#define AR_ISR_S3_S			0x00d0
+#define AR_ISR_S4_S			0x00d4
+#define AR_ISR_S5_S			0x00d8
+#define AR_DMADBG(i)			(0x00e0 + (i) * 4)
+#define AR_QTXDP(i)			(0x0800 + (i) * 4)
+#define AR_Q_TXE			0x0840
+#define AR_Q_TXD			0x0880
+#define AR_QCBRCFG(i)			(0x08c0 + (i) * 4)
+#define AR_QRDYTIMECFG(i)		(0x0900 + (i) * 4)
+#define AR_Q_ONESHOTARM_SC		0x0940
+#define AR_Q_ONESHOTARM_CC		0x0980
+#define AR_QMISC(i)			(0x09c0 + (i) * 4)
+#define AR_QSTS(i)			(0x0a00 + (i) * 4)
+#define AR_Q_RDYTIMESHDN		0x0a40
+#define AR_DQCUMASK(i)			(0x1000 + (i) * 4)
+#define AR_D_GBL_IFS_SIFS		0x1030
+#define AR_D_TXBLK_CMD			0x1038
+#define AR_DLCL_IFS(i)			(0x1040 + (i) * 4)
+#define AR_D_GBL_IFS_SLOT		0x1070
+#define AR_DRETRY_LIMIT(i)		(0x1080 + (i) * 4)
+#define AR_D_GBL_IFS_EIFS		0x10b0
+#define AR_DCHNTIME(i)			(0x10c0 + (i) * 4)
+#define AR_D_GBL_IFS_MISC		0x10f0
+#define AR_DMISC(i)			(0x1100 + (i) * 4)
+#define AR_D_SEQNUM			0x1140
+#define AR_D_FPCTL			0x1230
+#define AR_D_TXPSE			0x1270
+#define AR_D_TXSLOTMASK			0x12f0
+#define AR_MAC_SLEEP			0x1f00
+#define AR_CFG_LED			0x1f04
+#define AR_EEPROM_OFFSET(i)		(0x2000 + (i) * 4)
+#define AR_RC				0x4000
+#define AR_WA				0x4004
+#define AR_PM_STATE			0x4008
+#define AR_PCIE_PM_CTRL			0x4014
+#define AR_HOST_TIMEOUT			0x4018
+#define AR_EEPROM			0x401c
+#define AR_SREV				0x4020
+#define AR_AHB_MODE			0x4024
+#define AR_INTR_SYNC_CAUSE		0x4028
+#define AR_INTR_SYNC_ENABLE		0x402c
+#define AR_INTR_ASYNC_MASK		0x4030
+#define AR_INTR_SYNC_MASK		0x4034
+#define AR_INTR_ASYNC_CAUSE		0x4038
+#define AR_INTR_ASYNC_ENABLE		0x403c
+#define AR_PCIE_SERDES			0x4040
+#define AR_PCIE_SERDES2			0x4044
+#define AR_GPIO_IN_OUT			0x4048
+#define AR_GPIO_OE_OUT			0x404c
+#define AR_GPIO_INTR_POL		0x4050
+#define AR_GPIO_INPUT_EN_VAL		0x4054
+#define AR_GPIO_INPUT_MUX1		0x4058
+#define AR_GPIO_INPUT_MUX2		0x405c
+#define AR_GPIO_OUTPUT_MUX(i)		(0x4060 + (i) * 4)
+#define AR_INPUT_STATE			0x406c
+#define AR_EEPROM_STATUS_DATA		0x407c
+#define AR_OBS				0x4080
+#define AR_GPIO_PDPU			0x4088
+#define AR_PCIE_MSI			0x4094
+#define AR_RTC_RC			0x7000
+#define AR_RTC_PLL_CONTROL		0x7014
+#define AR_RTC_RESET			0x7040
+#define AR_RTC_STATUS 			0x7044
+#define AR_RTC_SLEEP_CLK		0x7048
+#define AR_RTC_FORCE_WAKE		0x704c
+#define AR_RTC_INTR_CAUSE		0x7050
+#define AR_RTC_INTR_ENABLE		0x7054
+#define AR_RTC_INTR_MASK		0x7058
+#define AR_IS_ANALOG_REG(reg)		((reg) >= 0x7800 && (reg) <= 0x78b4)
+#define AR_AN_RF2G1_CH0			0x7810
+#define AR_AN_RF5G1_CH0			0x7818
+#define AR_AN_RF2G1_CH1			0x7834
+#define AR_AN_RF5G1_CH1			0x783c
+#define AR_AN_SYNTH9			0x7868
+#define AR_AN_TOP1			0x7890
+#define AR_AN_TOP2			0x7894
+#define AR_STA_ID0			0x8000
+#define AR_STA_ID1			0x8004
+#define AR_BSS_ID0			0x8008
+#define AR_BSS_ID1			0x800c
+#define AR_BCN_RSSI_AVE			0x8010
+#define AR_TIME_OUT			0x8014
+#define AR_RSSI_THR			0x8018
+#define AR_USEC				0x801c
+#define AR_RESET_TSF			0x8020
+#define AR_MAX_CFP_DUR			0x8038
+#define AR_RX_FILTER			0x803c
+#define AR_MCAST_FIL0			0x8040
+#define AR_MCAST_FIL1			0x8044
+#define AR_DIAG_SW			0x8048
+#define AR_TSF_L32			0x804c
+#define AR_TSF_U32			0x8050
+#define AR_TST_ADDAC			0x8054
+#define AR_DEF_ANTENNA			0x8058
+#define AR_AES_MUTE_MASK0		0x805c
+#define AR_AES_MUTE_MASK1		0x8060
+#define AR_GATED_CLKS			0x8064
+#define AR_OBS_BUS_CTRL			0x8068
+#define AR_OBS_BUS_1			0x806c
+#define AR_LAST_TSTP			0x8080
+#define AR_NAV				0x8084
+#define AR_RTS_OK			0x8088
+#define AR_RTS_FAIL			0x808c
+#define AR_ACK_FAIL			0x8090
+#define AR_FCS_FAIL			0x8094
+#define AR_BEACON_CNT			0x8098
+#define AR_SLEEP1			0x80d4
+#define AR_SLEEP2			0x80d8
+#define AR_BSSMSKL			0x80e0
+#define AR_BSSMSKU			0x80e4
+#define AR_TPC				0x80e8
+#define AR_TFCNT			0x80ec
+#define AR_RFCNT			0x80f0
+#define AR_RCCNT			0x80f4
+#define AR_CCCNT			0x80f8
+#define AR_QUIET1			0x80fc
+#define AR_QUIET2			0x8100
+#define AR_TSF_PARM			0x8104
+#define AR_QOS_NO_ACK			0x8108
+#define AR_PHY_ERR			0x810c
+#define AR_RXFIFO_CFG			0x8114
+#define AR_MIC_QOS_CONTROL		0x8118
+#define AR_MIC_QOS_SELECT		0x811c
+#define AR_PCU_MISC			0x8120
+#define AR_FILT_OFDM			0x8124
+#define AR_FILT_CCK			0x8128
+#define AR_PHY_ERR_1			0x812c
+#define AR_PHY_ERR_MASK_1		0x8130
+#define AR_PHY_ERR_2			0x8134
+#define AR_PHY_ERR_MASK_2		0x8138
+#define AR_TSFOOR_THRESHOLD		0x813c
+#define AR_PHY_ERR_3			0x8168
+#define AR_PHY_ERR_MASK_3		0x816c
+#define AR_BT_COEX_MODE			0x8170
+#define AR_BT_COEX_WEIGHT		0x8174
+#define AR_BT_COEX_MODE2		0x817c
+#define AR_NEXT_NDP2_TIMER(i)		(0x8180 + (i) * 4)
+#define AR_NDP2_PERIOD(i)		(0x81a0 + (i) * 4)
+#define AR_NDP2_TIMER_MODE		0x81c0
+#define AR_TXSIFS			0x81d0
+#define AR_TXOP_X			0x81ec
+#define AR_TXOP_0_3			0x81f0
+#define AR_TXOP_4_7			0x81f4
+#define AR_TXOP_8_11			0x81f8
+#define AR_TXOP_12_15			0x81fc
+#define AR_NEXT_TBTT_TIMER		0x8200
+#define AR_NEXT_DMA_BEACON_ALERT	0x8204
+#define AR_NEXT_CFP			0x8208
+#define AR_NEXT_HCF			0x820c
+#define AR_NEXT_TIM			0x8210
+#define AR_NEXT_DTIM			0x8214
+#define AR_NEXT_QUIET_TIMER		0x8218
+#define AR_NEXT_NDP_TIMER		0x821c
+#define AR_BEACON_PERIOD		0x8220
+#define AR_DMA_BEACON_PERIOD		0x8224
+#define AR_SWBA_PERIOD			0x8228
+#define AR_HCF_PERIOD			0x822c
+#define AR_TIM_PERIOD			0x8230
+#define AR_DTIM_PERIOD			0x8234
+#define AR_QUIET_PERIOD			0x8238
+#define AR_NDP_PERIOD			0x823c
+#define AR_TIMER_MODE			0x8240
+#define AR_SLP32_MODE			0x8244
+#define AR_SLP32_WAKE			0x8248
+#define AR_SLP32_INC			0x824c
+#define AR_SLP_CNT			0x8250
+#define AR_SLP_CYCLE_CNT		0x8254
+#define AR_SLP_MIB_CTRL			0x8258
+#define AR_WOW_PATTERN_REG		0x825c
+#define AR_WOW_COUNT_REG		0x8260
+#define AR_MAC_PCU_LOGIC_ANALYZER	0x8264
+#define AR_WOW_BCN_EN_REG		0x8270
+#define AR_WOW_BCN_TIMO_REG		0x8274
+#define AR_WOW_KEEP_ALIVE_TIMO_REG	0x8278
+#define AR_WOW_KEEP_ALIVE_REG		0x827c
+#define AR_WOW_US_SCALAR_REG		0x8284
+#define AR_WOW_KEEP_ALIVE_DELAY_REG	0x8288
+#define AR_WOW_PATTERN_MATCH_REG	0x828c
+#define AR_WOW_PATTERN_OFF1_REG		0x8290
+#define AR_WOW_PATTERN_OFF2_REG		0x8294
+#define AR_WOW_EXACT_REG		0x829c
+#define AR_2040_MODE			0x8318
+#define AR_EXTRCCNT			0x8328
+#define AR_SELFGEN_MASK			0x832c
+#define AR_PCU_TXBUF_CTRL		0x8340
+#define AR_PCU_MISC_MODE2		0x8344
+#define AR_MAC_PCU_ASYNC_FIFO_REG3	0x8358
+#define AR_WOW_LENGTH1_REG		0x8360
+#define AR_WOW_LENGTH2_REG		0x8364
+#define AR_WOW_PATTERN_MATCH_LT_256B	0x8368
+#define AR_RATE_DURATION(i)		(0x8700 + (i) * 4)
+#define AR_KEYTABLE(i)			(0x8800 + (i) * 32)
+#define AR_KEYTABLE_KEY0(i)		(AR_KEYTABLE(i) +  0)
+#define AR_KEYTABLE_KEY1(i)		(AR_KEYTABLE(i) +  4)
+#define AR_KEYTABLE_KEY2(i)		(AR_KEYTABLE(i) +  8)
+#define AR_KEYTABLE_KEY3(i)		(AR_KEYTABLE(i) + 12)
+#define AR_KEYTABLE_KEY4(i)		(AR_KEYTABLE(i) + 16)
+#define AR_KEYTABLE_TYPE(i)		(AR_KEYTABLE(i) + 20)
+#define AR_KEYTABLE_MAC0(i)		(AR_KEYTABLE(i) + 24)
+#define AR_KEYTABLE_MAC1(i)		(AR_KEYTABLE(i) + 28)
+
+/*
+ * PHY registers.
+ */
+#define AR_PHY_BASE			0x9800
+#define AR_PHY(i)			(AR_PHY_BASE + (i) * 4)
+#define AR_PHY_TEST			0x9800
+#define AR_PHY_TURBO			0x9804
+#define AR_PHY_TEST2			0x9808
+#define AR_PHY_TIMING2			0x9810
+#define AR_PHY_TIMING3			0x9814
+#define AR_PHY_CHIP_ID			0x9818
+#define AR_PHY_ACTIVE			0x981c
+#define AR_PHY_RF_CTL2			0x9824
+#define AR_PHY_RF_CTL3			0x9828
+#define AR_PHY_ADC_CTL			0x982c
+#define AR_PHY_ADC_SERIAL_CTL		0x9830
+#define AR_PHY_RF_CTL4			0x9834
+#define AR_PHY_TSTDAC_CONST		0x983c
+#define AR_PHY_SETTLING			0x9844
+#define AR_PHY_RXGAIN			0x9848
+#define AR_PHY_DESIRED_SZ		0x9850
+#define AR_PHY_FIND_SIG			0x9858
+#define AR_PHY_AGC_CTL1			0x985c
+#define AR_PHY_AGC_CONTROL		0x9860
+#define AR_PHY_CCA(i)			(0x9864 + (i) * 0x1000)
+#define AR_PHY_SFCORR			0x9868
+#define AR_PHY_SFCORR_LOW		0x986c
+#define AR_PHY_SLEEP_CTR_CONTROL	0x9870
+#define AR_PHY_SLEEP_CTR_LIMIT		0x9874
+#define AR_PHY_SLEEP_SCAL		0x9878
+#define AR_PHY_PLL_CTL			0x987c
+#define	AR_PHY_BIN_MASK_1		0x9900
+#define	AR_PHY_BIN_MASK_2		0x9904
+#define	AR_PHY_BIN_MASK_3		0x9908
+#define	AR_PHY_MASK_CTL			0x990c
+#define AR_PHY_RX_DELAY			0x9914
+#define AR_PHY_SEARCH_START_DELAY	0x9918
+#define AR_PHY_TIMING_CTRL4_0		0x9920
+#define AR_PHY_TIMING_CTRL4(i)		(0x9920 + (i) * 0x1000)
+#define AR_PHY_TIMING5			0x9924
+#define AR_PHY_POWER_TX_RATE1		0x9934
+#define AR_PHY_POWER_TX_RATE2		0x9938
+#define AR_PHY_POWER_TX_RATE_MAX	0x993c
+#define AR_PHY_RADAR_EXT		0x9940
+#define AR_PHY_FRAME_CTL		0x9944
+#define AR_PHY_SPUR_REG			0x994c
+#define AR_PHY_RADAR_0			0x9954
+#define AR_PHY_RADAR_1			0x9958
+#define AR_PHY_SWITCH_CHAIN_0		0x9960
+#define AR_PHY_SWITCH_COM		0x9964
+#define AR_PHY_SIGMA_DELTA		0x996c
+#define AR_PHY_RESTART			0x9970
+#define AR_PHY_RFBUS_REQ		0x997c
+#define	AR_PHY_TIMING7			0x9980
+#define	AR_PHY_TIMING8			0x9984
+#define	AR_PHY_BIN_MASK2_1		0x9988
+#define	AR_PHY_BIN_MASK2_2		0x998c
+#define	AR_PHY_BIN_MASK2_3		0x9990
+#define	AR_PHY_BIN_MASK2_4		0x9994
+#define	AR_PHY_TIMING9			0x9998
+#define	AR_PHY_TIMING10			0x999c
+#define	AR_PHY_TIMING11			0x99a0
+#define AR_PHY_RX_CHAINMASK		0x99a4
+#define AR_PHY_MULTICHAIN_GAIN_CTL	0x99ac
+#define AR_PHY_NEW_ADC_DC_GAIN_CORR(i)	(0x99b4 + (i) * 0x1000)
+#define AR_PHY_EXT_CCA0			0x99b8
+#define AR_PHY_EXT_CCA(i)		(0x99bc + (i) * 0x1000)
+#define AR_PHY_SFCORR_EXT		0x99c0
+#define AR_PHY_HALFGI			0x99d0
+#define AR_PHY_CHANNEL_MASK_01_30	0x99d4
+#define AR_PHY_CHANNEL_MASK_31_60	0x99d8
+#define AR_PHY_CHAN_INFO_MEMORY		0x99dc
+#define AR_PHY_HEAVY_CLIP_ENABLE	0x99e0
+#define AR_PHY_HEAVY_CLIP_FACTOR_RIFS	0x99ec
+#define AR_PHY_CALMODE			0x99f0
+#define AR_PHY_REFCLKDLY		0x99f4
+#define AR_PHY_REFCLKPD			0x99f8
+#define AR_PHY_BB_RFGAIN(i)		(0x9a00 + (i) * 4)
+#define AR_PHY_CAL_MEAS_0(i)		(0x9c10 + (i) * 0x1000)
+#define AR_PHY_CAL_MEAS_1(i)		(0x9c14 + (i) * 0x1000)
+#define AR_PHY_CAL_MEAS_2(i)		(0x9c18 + (i) * 0x1000)
+#define AR_PHY_CAL_MEAS_3(i)		(0x9c1c + (i) * 0x1000)
+#define AR_PHY_CURRENT_RSSI		0x9c1c
+#define AR_PHY_RFBUS_GRANT		0x9c20
+#define AR9280_PHY_CURRENT_RSSI		0x9c3c
+#define AR_PHY_CHAN_INFO_GAIN_DIFF	0x9cf4
+#define AR_PHY_CHAN_INFO_GAIN		0x9cfc
+#define AR_PHY_MODE			0xa200
+#define AR_PHY_CCK_TX_CTRL		0xa204
+#define AR_PHY_CCK_DETECT		0xa208
+#define AR_PHY_GAIN_2GHZ		0xa20c
+#define AR_PHY_CCK_RXCTRL4		0xa21c
+#define AR_PHY_DAG_CTRLCCK		0xa228
+#define AR_PHY_FORCE_CLKEN_CCK		0xa22c
+#define AR_PHY_POWER_TX_RATE3		0xa234
+#define AR_PHY_POWER_TX_RATE4		0xa238
+#define AR_PHY_SCRM_SEQ_XR		0xa23c
+#define AR_PHY_HEADER_DETECT_XR		0xa240
+#define AR_PHY_CHIRP_DETECTED_XR	0xa244
+#define AR_PHY_BLUETOOTH		0xa254
+#define AR_PHY_TPCRG1			0xa258
+#define AR_PHY_TX_PWRCTRL4		0xa264
+#define AR_PHY_ANALOG_SWAP		0xa268
+#define AR_PHY_TPCRG5			0xa26c
+#define AR_PHY_TX_PWRCTRL6_0		0xa270
+#define AR_PHY_TX_PWRCTRL7		0xa274
+#define AR_PHY_TX_PWRCTRL9		0xa27c
+#define AR_PHY_PDADC_TBL_BASE		0xa280
+#define AR_PHY_TX_GAIN_TBL(i)		(0xa300 + (i) * 4)
+#define AR_PHY_CL_CAL_CTL		0xa358
+#define AR_PHY_CLC_TBL(i)		(0xa35c + (i) * 4)
+#define AR_PHY_POWER_TX_RATE5		0xa38c
+#define AR_PHY_POWER_TX_RATE6		0xa390
+#define AR_PHY_CH0_TX_PWRCTRL11		0xa398
+#define AR_PHY_CAL_CHAINMASK		0xa39c
+#define AR_PHY_VIT_MASK2_M_46_61	0xa3a0
+#define AR_PHY_VIT_MASK2_M_31_45	0xa3a4
+#define AR_PHY_VIT_MASK2_M_16_30	0xa3a8
+#define AR_PHY_VIT_MASK2_M_00_15	0xa3ac
+#define AR_PHY_PILOT_MASK_01_30		0xa3b0
+#define AR_PHY_PILOT_MASK_31_60		0xa3b4
+#define AR_PHY_VIT_MASK2_P_15_01	0xa3b8
+#define AR_PHY_VIT_MASK2_P_30_16	0xa3bc
+#define AR_PHY_VIT_MASK2_P_45_31	0xa3c0
+#define AR_PHY_VIT_MASK2_P_61_46	0xa3c4
+#define AR_PHY_POWER_TX_SUB		0xa3c8
+#define AR_PHY_POWER_TX_RATE7		0xa3cc
+#define AR_PHY_POWER_TX_RATE8		0xa3d0
+#define AR_PHY_POWER_TX_RATE9		0xa3d4
+#define AR_PHY_XPA_CFG			0xa3d8
+#define AR_PHY_TX_PWRCTRL6_1		0xb270
+#define AR_PHY_CH1_TX_PWRCTRL11		0xb398
+
+/* Bits for AR_CR. */
+#define AR_CR_RXE	0x00000004
+#define AR_CR_RXD	0x00000020
+#define AR_CR_SWI	0x00000040
+
+/* Bits for AR_CFG. */
+#define AR_CFG_SWTD				0x00000001
+#define AR_CFG_SWTB				0x00000002
+#define AR_CFG_SWRD				0x00000004
+#define AR_CFG_SWRB				0x00000008
+#define AR_CFG_SWRG				0x00000010
+#define AR_CFG_AP_ADHOC_INDICATION		0x00000020
+#define AR_CFG_PHOK				0x00000100
+#define AR_CFG_EEBS				0x00000200
+#define AR_CFG_CLK_GATE_DIS			0x00000400
+#define AR_CFG_PCI_MASTER_REQ_Q_THRESH_M	0x00060000
+#define AR_CFG_PCI_MASTER_REQ_Q_THRESH_S	17
+
+/* Bits for AR_IER. */
+#define AR_IER_ENABLE	0x00000001
+
+/* Bits for AR_TIMT. */
+#define AR_TIMT_LAST_M	0x0000ffff
+#define AR_TIMT_LAST_S	0
+#define AR_TIMT_FIRST_M	0xffff0000
+#define AR_TIMT_FIRST_S	16
+
+/* Bits for AR_RIMT. */
+#define AR_RIMT_LAST_M	0x0000ffff
+#define AR_RIMT_LAST_S	0
+#define AR_RIMT_FIRST_M	0xffff0000
+#define AR_RIMT_FIRST_S	16
+
+/* Bits for AR_[TR]XCFG_DMASZ fields. */
+#define AR_DMASZ_4B	0
+#define AR_DMASZ_8B	1
+#define AR_DMASZ_16B	2
+#define AR_DMASZ_32B	3
+#define AR_DMASZ_64B	4
+#define AR_DMASZ_128B	5
+#define AR_DMASZ_256B	6
+#define AR_DMASZ_512B	7
+
+/* Bits for AR_TXCFG. */
+#define AR_TXCFG_DMASZ_M			0x00000007
+#define AR_TXCFG_DMASZ_S			0
+#define AR_TXCFG_FTRIG_M			0x000003f0
+#define AR_TXCFG_FTRIG_S			4
+#define AR_TXCFG_FTRIG_IMMED			(  0 / 64)
+#define AR_TXCFG_FTRIG_64B			( 64 / 64)
+#define AR_TXCFG_FTRIG_128B			(128 / 64)
+#define AR_TXCFG_FTRIG_192B			(192 / 64)
+#define AR_TXCFG_FTRIG_256B			(256 / 64)
+#define AR_TXCFG_FTRIG_512B			(512 / 64)
+#define AR_TXCFG_ADHOC_BEACON_ATIM_TX_POLICY	0x00000800
+
+/* Bits for AR_RXCFG. */
+#define AR_RXCFG_DMASZ_M	0x00000007
+#define AR_RXCFG_DMASZ_S	0
+#define AR_RXCFG_CHIRP		0x00000008
+#define AR_RXCFG_ZLFDMA		0x00000010
+
+/* Bits for AR_MIBC. */
+#define AR_MIBC_COW	0x00000001
+#define AR_MIBC_FMC	0x00000002
+#define AR_MIBC_CMC	0x00000004
+#define AR_MIBC_MCS	0x00000008
+
+/* Bits for AR_TOPS. */
+#define AR_TOPS_MASK	0x0000ffff
+
+/* Bits for AR_RXNPTO. */
+#define AR_RXNPTO_MASK	0x000003ff
+
+/* Bits for AR_TXNPTO. */
+#define AR_TXNPTO_MASK		0x000003ff
+#define AR_TXNPTO_QCU_MASK	0x000ffc00
+
+/* Bits for AR_RPGTO. */
+#define AR_RPGTO_MASK	0x000003ff
+
+/* Bits for AR_RPCNT. */
+#define AR_RPCNT_MASK	0x0000001f
+
+/* Bits for AR_MACMISC. */
+#define AR_MACMISC_PCI_EXT_FORCE	0x00000010
+#define AR_MACMISC_DMA_OBS_M		0x000001e0
+#define AR_MACMISC_DMA_OBS_S		5
+#define AR_MACMISC_MISC_OBS_M		0x00000e00
+#define AR_MACMISC_MISC_OBS_S		9
+#define AR_MACMISC_MISC_OBS_BUS_LSB_M	0x00007000
+#define AR_MACMISC_MISC_OBS_BUS_LSB_S	12
+#define AR_MACMISC_MISC_OBS_BUS_MSB_M	0x00038000
+#define AR_MACMISC_MISC_OBS_BUS_MSB_S	15
+
+/* Bits for AR_GTXTO. */
+#define AR_GTXTO_TIMEOUT_COUNTER_M	0x0000ffff
+#define AR_GTXTO_TIMEOUT_COUNTER_S	0
+#define AR_GTXTO_TIMEOUT_LIMIT_M	0xffff0000
+#define AR_GTXTO_TIMEOUT_LIMIT_S	16
+
+/* Bits for AR_GTTM. */
+#define AR_GTTM_USEC		0x00000001
+#define AR_GTTM_IGNORE_IDLE	0x00000002
+#define AR_GTTM_RESET_IDLE	0x00000004
+#define AR_GTTM_CST_USEC	0x00000008
+
+/* Bits for AR_CST. */
+#define AR_CST_TIMEOUT_COUNTER_M	0x0000ffff
+#define AR_CST_TIMEOUT_COUNTER_S	0
+#define AR_CST_TIMEOUT_LIMIT_M		0xffff0000
+#define AR_CST_TIMEOUT_LIMIT_S		16
+
+/* Bits for AR_ISR. */
+#define AR_ISR_RXOK	0x00000001
+#define AR_ISR_RXDESC	0x00000002
+#define AR_ISR_RXERR	0x00000004
+#define AR_ISR_RXNOPKT	0x00000008
+#define AR_ISR_RXEOL	0x00000010
+#define AR_ISR_RXORN	0x00000020
+#define AR_ISR_TXOK	0x00000040
+#define AR_ISR_TXDESC	0x00000080
+#define AR_ISR_TXERR	0x00000100
+#define AR_ISR_TXNOPKT	0x00000200
+#define AR_ISR_TXEOL	0x00000400
+#define AR_ISR_TXURN	0x00000800
+#define AR_ISR_MIB	0x00001000
+#define AR_ISR_SWI	0x00002000
+#define AR_ISR_RXPHY	0x00004000
+#define AR_ISR_RXKCM	0x00008000
+#define AR_ISR_SWBA	0x00010000
+#define AR_ISR_BRSSI	0x00020000
+#define AR_ISR_BMISS	0x00040000
+#define AR_ISR_TXMINTR	0x00080000
+#define AR_ISR_BNR	0x00100000
+#define AR_ISR_RXCHIRP	0x00200000
+#define AR_ISR_BCNMISC	0x00800000
+#define AR_ISR_TIM	0x00800000
+#define AR_ISR_RXMINTR	0x01000000
+#define AR_ISR_QCBROVF	0x02000000
+#define AR_ISR_QCBRURN	0x04000000
+#define AR_ISR_QTRIG	0x08000000
+#define AR_ISR_GENTMR	0x10000000
+#define AR_ISR_TXINTM	0x40000000
+#define AR_ISR_RXINTM	0x80000000
+
+/* Bits for AR_ISR_S0. */
+#define AR_ISR_S0_QCU_TXOK_M	0x000003ff
+#define AR_ISR_S0_QCU_TXOK_S	0
+#define AR_ISR_S0_QCU_TXDESC_M	0x03ff0000
+#define AR_ISR_S0_QCU_TXDESC_S	16
+
+/* Bits for AR_ISR_S1. */
+#define AR_ISR_S1_QCU_TXERR_M	0x000003ff
+#define AR_ISR_S1_QCU_TXERR_S	0
+#define AR_ISR_S1_QCU_TXEOL_M	0x03ff0000
+#define AR_ISR_S1_QCU_TXEOL_S	16
+
+/* Bits for AR_ISR_S2. */
+#define AR_ISR_S2_QCU_TXURN_M		0x000003ff
+#define AR_ISR_S2_QCU_TXURN_S		0
+#define AR_ISR_S2_CST			0x00400000
+#define AR_ISR_S2_GTT			0x00800000
+#define AR_ISR_S2_TIM			0x01000000
+#define AR_ISR_S2_CABEND		0x02000000
+#define AR_ISR_S2_DTIMSYNC		0x04000000
+#define AR_ISR_S2_BCNTO			0x08000000
+#define AR_ISR_S2_CABTO			0x10000000
+#define AR_ISR_S2_DTIM			0x20000000
+#define AR_ISR_S2_TSFOOR		0x40000000
+#define AR_ISR_S2_TBTT_TIME		0x80000000
+
+/* Bits for AR_ISR_S3. */
+#define AR_ISR_S3_QCU_QCBROVF_M	0x000003ff
+#define AR_ISR_S3_QCU_QCBROVF_S	0
+#define AR_ISR_S3_QCU_QCBRURN_M	0x03ff0000
+#define AR_ISR_S3_QCU_QCBRURN_S	0
+
+/* Bits for  AR_ISR_S4. */
+#define AR_ISR_S4_QCU_QTRIG_M	0x000003ff
+#define AR_ISR_S4_QCU_QTRIG_S	0
+
+/* Bits for AR_ISR_S5. */
+#define AR_ISR_S5_TIMER_TRIG_M		0x000000ff
+#define AR_ISR_S5_TIMER_TRIG_S		0
+#define AR_ISR_S5_TIMER_THRESH_M	0x0007fe00
+#define AR_ISR_S5_TIMER_THRESH_S	9
+#define AR_ISR_S5_TIM_TIMER		0x00000010
+#define AR_ISR_S5_DTIM_TIMER		0x00000020
+#define AR_ISR_S5_GENTIMER_TRIG_M	0x0000ff80
+#define AR_ISR_S5_GENTIMER_TRIG_S	0
+#define AR_ISR_S5_GENTIMER_THRESH_M	0xff800000
+#define AR_ISR_S5_GENTIMER_THRESH_S	16
+
+/* Bits for AR_IMR. */
+#define AR_IMR_RXOK	0x00000001
+#define AR_IMR_RXDESC	0x00000002
+#define AR_IMR_RXERR	0x00000004
+#define AR_IMR_RXNOPKT	0x00000008
+#define AR_IMR_RXEOL	0x00000010
+#define AR_IMR_RXORN	0x00000020
+#define AR_IMR_TXOK	0x00000040
+#define AR_IMR_TXDESC	0x00000080
+#define AR_IMR_TXERR	0x00000100
+#define AR_IMR_TXNOPKT	0x00000200
+#define AR_IMR_TXEOL	0x00000400
+#define AR_IMR_TXURN	0x00000800
+#define AR_IMR_MIB	0x00001000
+#define AR_IMR_SWI	0x00002000
+#define AR_IMR_RXPHY	0x00004000
+#define AR_IMR_RXKCM	0x00008000
+#define AR_IMR_SWBA	0x00010000
+#define AR_IMR_BRSSI	0x00020000
+#define AR_IMR_BMISS	0x00040000
+#define AR_IMR_TXMINTR	0x00080000
+#define AR_IMR_BNR	0x00100000
+#define AR_IMR_RXCHIRP	0x00200000
+#define AR_IMR_BCNMISC	0x00800000
+#define AR_IMR_TIM	0x00800000
+#define AR_IMR_RXMINTR	0x01000000
+#define AR_IMR_QCBROVF	0x02000000
+#define AR_IMR_QCBRURN	0x04000000
+#define AR_IMR_QTRIG	0x08000000
+#define AR_IMR_GENTMR	0x10000000
+#define AR_IMR_TXINTM	0x40000000
+#define AR_IMR_RXINTM	0x80000000
+
+#define AR_IMR_DEFAULT	\
+	(AR_IMR_TXERR | AR_IMR_TXURN | AR_IMR_RXERR |	\
+	 AR_IMR_RXORN | AR_IMR_BCNMISC | AR_IMR_RXINTM |	\
+	 AR_IMR_RXMINTR | AR_IMR_TXOK)
+#define AR_IMR_HOSTAP	(AR_IMR_DEFAULT | AR_IMR_MIB)
+
+/* Bits for AR_IMR_S0. */
+#define AR_IMR_S0_QCU_TXOK(qid)		(1 << (qid))
+#define AR_IMR_S0_QCU_TXDESC(qid)	(1 << (16 + (qid)))
+
+/* Bits for AR_IMR_S1. */
+#define AR_IMR_S1_QCU_TXERR(qid)	(1 << (qid))
+#define AR_IMR_S1_QCU_TXEOL(qid)	(1 << (16 + (qid)))
+
+/* Bits for AR_IMR_S2. */
+#define AR_IMR_S2_QCU_TXURN(qid)	(1 << (qid))
+#define AR_IMR_S2_CST			0x00400000
+#define AR_IMR_S2_GTT			0x00800000
+#define AR_IMR_S2_TIM			0x01000000
+#define AR_IMR_S2_CABEND		0x02000000
+#define AR_IMR_S2_DTIMSYNC		0x04000000
+#define AR_IMR_S2_BCNTO			0x08000000
+#define AR_IMR_S2_CABTO			0x10000000
+#define AR_IMR_S2_DTIM			0x20000000
+#define AR_IMR_S2_TSFOOR		0x40000000
+
+/* Bits for AR_IMR_S3. */
+#define AR_IMR_S3_QCU_QCBROVF(qid)	(1 << (qid))
+#define AR_IMR_S3_QCU_QCBRURN(qid)	(1 << (16 + (qid)))
+
+/* Bits for AR_IMR_S4. */
+#define AR_IMR_S4_QCU_QTRIG(qid)	(1 << (qid))
+
+/* Bits for AR_IMR_S5. */
+#define AR_IMR_S5_TIM_TIMER		0x00000010
+#define AR_IMR_S5_DTIM_TIMER		0x00000020
+#define AR_IMR_S5_TIMER_TRIG_M		0x000000ff
+#define AR_IMR_S5_TIMER_TRIG_S		0
+#define AR_IMR_S5_TIMER_THRESH_M	0x0000ff00
+#define AR_IMR_S5_TIMER_THRESH_S	0
+
+#define AR_NUM_QCU	10
+#define AR_QCU(x)	(1 << (x))
+
+/* Bits for AR_Q_TXE. */
+#define AR_Q_TXE_M	0x000003ff
+#define AR_Q_TXE_S	0
+
+/* Bits for AR_Q_TXD. */
+#define AR_Q_TXD_M	0x000003ff
+#define AR_Q_TXD_S	0
+
+/* Bits for AR_QCBRCFG_*. */
+#define AR_Q_CBRCFG_INTERVAL_M		0x00ffffff
+#define AR_Q_CBRCFG_INTERVAL_S		0
+#define AR_Q_CBRCFG_OVF_THRESH_M	0xff000000
+#define AR_Q_CBRCFG_OVF_THRESH_S	24
+
+/* Bits for AR_Q_RDYTIMECFG_*. */
+#define AR_Q_RDYTIMECFG_DURATION_M	0x00ffffff
+#define AR_Q_RDYTIMECFG_DURATION_S	0
+#define AR_Q_RDYTIMECFG_EN		0x01000000
+
+/* Bits for AR_Q_MISC_*. */
+#define AR_Q_MISC_FSP_M			0x0000000f
+#define AR_Q_MISC_FSP_S			0
+#define AR_Q_MISC_FSP_ASAP		0
+#define AR_Q_MISC_FSP_CBR		1
+#define AR_Q_MISC_FSP_DBA_GATED		2
+#define AR_Q_MISC_FSP_TIM_GATED		3
+#define AR_Q_MISC_FSP_BEACON_SENT_GATED	4
+#define AR_Q_MISC_FSP_BEACON_RCVD_GATED	5
+#define AR_Q_MISC_ONE_SHOT_EN		0x00000010
+#define AR_Q_MISC_CBR_INCR_DIS1		0x00000020
+#define AR_Q_MISC_CBR_INCR_DIS0		0x00000040
+#define AR_Q_MISC_BEACON_USE		0x00000080
+#define AR_Q_MISC_CBR_EXP_CNTR_LIMIT_EN	0x00000100
+#define AR_Q_MISC_RDYTIME_EXP_POLICY	0x00000200
+#define AR_Q_MISC_RESET_CBR_EXP_CTR	0x00000400
+#define AR_Q_MISC_DCU_EARLY_TERM_REQ	0x00000800
+
+/* Bits for AR_Q_STS_*. */
+#define AR_Q_STS_PEND_FR_CNT_M	0x00000003
+#define AR_Q_STS_PEND_FR_CNT_S	0
+#define AR_Q_STS_CBR_EXP_CNT_M	0x0000ff00
+#define AR_Q_STS_CBR_EXP_CNT_S	8
+
+#define AR_NUM_DCU	10
+#define AR_DCU(x)	(1 << (x))
+
+/* Bits for AR_D_QCUMASK_*. */
+#define AR_D_QCUMASK_M	0x000003ff
+#define AR_D_QCUMASK_S	0
+
+/* Bits for AR_D_GBL_IFS_SIFS. */
+#define AR_D_GBL_IFS_SIFS_ASYNC_FIFO_DUR	0x000003ab
+
+/* Bits for AR_D_TXBLK_CMD. */
+#define AR_D_TXBLK_WRITE_BITMASK_M	0x0000ffff
+#define AR_D_TXBLK_WRITE_BITMASK_S	0
+#define AR_D_TXBLK_WRITE_SLICE_M	0x000f0000
+#define AR_D_TXBLK_WRITE_SLICE_S	16
+#define AR_D_TXBLK_WRITE_DCU_M		0x00f00000
+#define AR_D_TXBLK_WRITE_DCU_S		20
+#define AR_D_TXBLK_WRITE_COMMAND_M	0x0f000000
+#define AR_D_TXBLK_WRITE_COMMAND_S	24
+
+/* Bits for AR_DLCL_IFS. */
+#define AR_D_LCL_IFS_CWMIN_M	0x000003ff
+#define AR_D_LCL_IFS_CWMIN_S	0
+#define AR_D_LCL_IFS_CWMAX_M	0x000ffc00
+#define AR_D_LCL_IFS_CWMAX_S	10
+#define AR_D_LCL_IFS_AIFS_M	0x0ff00000
+#define AR_D_LCL_IFS_AIFS_S	20
+
+/* Bits for AR_D_GBL_IFS_SLOT. */
+#define AR_D_GBL_IFS_SLOT_M			0x0000ffff
+#define AR_D_GBL_IFS_SLOT_S			0
+#define AR_D_GBL_IFS_SLOT_ASYNC_FIFO_DUR	0x00000420
+
+/* Bits for AR_DRETRY_LIMIT_*. */
+#define AR_D_RETRY_LIMIT_FR_SH_M	0x0000000f
+#define AR_D_RETRY_LIMIT_FR_SH_S	0
+#define AR_D_RETRY_LIMIT_STA_SH_M	0x00003f00
+#define AR_D_RETRY_LIMIT_STA_SH_S	8
+#define AR_D_RETRY_LIMIT_STA_LG_M	0x000fc000
+#define AR_D_RETRY_LIMIT_STA_LG_S	14
+
+/* Bits for AR_D_GBL_IFS_EIFS. */
+#define AR_D_GBL_IFS_EIFS_M			0x0000ffff
+#define AR_D_GBL_IFS_EIFS_S			0
+#define AR_D_GBL_IFS_EIFS_ASYNC_FIFO_DUR	0x0000a5eb
+
+/* Bits for AR_DCHNTIME_*. */
+#define AR_D_CHNTIME_DUR_M	0x000fffff
+#define AR_D_CHNTIME_DUR_S	0
+#define AR_D_CHNTIME_EN		0x00100000
+
+/* Bits for AR_D_GBL_IFS_MISC. */
+#define AR_D_GBL_IFS_MISC_LFSR_SLICE_SEL	0x00000007
+#define AR_D_GBL_IFS_MISC_TURBO_MODE		0x00000008
+#define AR_D_GBL_IFS_MISC_USEC_DURATION		0x000ffc00
+#define AR_D_GBL_IFS_MISC_DCU_ARBITER_DLY	0x00300000
+#define AR_D_GBL_IFS_MISC_RANDOM_LFSR_SLICE_DIS	0x01000000
+#define AR_D_GBL_IFS_MISC_SLOT_XMIT_WIND_LEN	0x06000000
+#define AR_D_GBL_IFS_MISC_FORCE_XMIT_SLOT_BOUND	0x08000000
+#define AR_D_GBL_IFS_MISC_IGNORE_BACKOFF	0x10000000
+
+/* Bits for AR_DMISC_*. */
+#define AR_D_MISC_BKOFF_THRESH_M		0x0000003f
+#define AR_D_MISC_BKOFF_THRESH_S		0
+#define AR_D_MISC_RETRY_CNT_RESET_EN		0x00000040
+#define AR_D_MISC_CW_RESET_EN			0x00000080
+#define AR_D_MISC_FRAG_WAIT_EN			0x00000100
+#define AR_D_MISC_FRAG_BKOFF_EN			0x00000200
+#define AR_D_MISC_CW_BKOFF_EN			0x00001000
+#define AR_D_MISC_VIR_COL_HANDLING_M		0x0000c000
+#define AR_D_MISC_VIR_COL_HANDLING_S		14
+#define AR_D_MISC_VIR_COL_HANDLING_DEFAULT	0
+#define AR_D_MISC_VIR_COL_HANDLING_IGNORE	1
+#define AR_D_MISC_BEACON_USE			0x00010000
+#define AR_D_MISC_ARB_LOCKOUT_CNTRL_M		0x00060000
+#define AR_D_MISC_ARB_LOCKOUT_CNTRL_S		17
+#define AR_D_MISC_ARB_LOCKOUT_CNTRL_NONE	0
+#define AR_D_MISC_ARB_LOCKOUT_CNTRL_INTRA_FR	1
+#define AR_D_MISC_ARB_LOCKOUT_CNTRL_GLOBAL	2
+#define AR_D_MISC_ARB_LOCKOUT_IGNORE		0x00080000
+#define AR_D_MISC_SEQ_NUM_INCR_DIS		0x00100000
+#define AR_D_MISC_POST_FR_BKOFF_DIS		0x00200000
+#define AR_D_MISC_VIT_COL_CW_BKOFF_EN		0x00400000
+#define AR_D_MISC_BLOWN_IFS_RETRY_EN		0x00800000
+
+/* Bits for AR_D_FPCTL. */
+#define AR_D_FPCTL_DCU_M		0x0000000f
+#define AR_D_FPCTL_DCU_S		0
+#define AR_D_FPCTL_PREFETCH_EN		0x00000010
+#define AR_D_FPCTL_BURST_PREFETCH_M	0x00007fe0
+#define AR_D_FPCTL_BURST_PREFETCH_S	5
+
+/* Bits for AR_D_TXPSE. */
+#define AR_D_TXPSE_CTRL_M	0x000003ff
+#define AR_D_TXPSE_CTRL_S	0
+#define AR_D_TXPSE_STATUS	0x00010000
+
+/* Bits for AR_D_TXSLOTMASK. */
+#define AR_D_TXSLOTMASK_NUM	0x0000000f
+
+/* Bits for AR_MAC_SLEEP. */
+#define AR_MAC_SLEEP_MAC_ASLEEP	0x00000001
+
+/* Bits for AR_CFG_LED. */
+#define AR_CFG_SCLK_RATE_IND_M		0x00000003
+#define AR_CFG_SCLK_RATE_IND_S		0
+#define AR_CFG_SCLK_32MHZ		0
+#define AR_CFG_SCLK_4MHZ		1
+#define AR_CFG_SCLK_1MHZ		2
+#define AR_CFG_SCLK_32KHZ		3
+#define AR_CFG_LED_BLINK_SLOW		0x00000008
+#define AR_CFG_LED_BLINK_THRESH_SEL_M	0x00000070
+#define AR_CFG_LED_BLINK_THRESH_SEL_S	4
+#define AR_CFG_LED_MODE_SEL_M		0x00000380
+#define AR_CFG_LED_MODE_SEL_S		7
+#define AR_CFG_LED_POWER_M		0x00000280
+#define AR_CFG_LED_POWER_S		7
+#define AR_CFG_LED_NETWORK_M		0x00000300
+#define AR_CFG_LED_NETWORK_S		7
+#define AR_CFG_LED_MODE_PROP		0
+#define AR_CFG_LED_MODE_RPROP		1
+#define AR_CFG_LED_MODE_SPLIT		2
+#define AR_CFG_LED_MODE_RAND		3
+#define AR_CFG_LED_MODE_POWER_OFF	4
+#define AR_CFG_LED_MODE_POWER_ON	5
+#define AR_CFG_LED_MODE_NETWORK_OFF	4
+#define AR_CFG_LED_MODE_NETWORK_ON	6
+#define AR_CFG_LED_ASSOC_CTL_M		0x00000c00
+#define AR_CFG_LED_ASSOC_CTL_S		10
+#define AR_CFG_LED_ASSOC_NONE		0
+#define AR_CFG_LED_ASSOC_ACTIVE		1
+#define AR_CFG_LED_ASSOC_PENDING	2
+
+/* Bit for AR_RC. */
+#define AR_RC_AHB	0x00000001
+#define AR_RC_APB	0x00000002
+#define AR_RC_HOSTIF	0x00000100
+
+/* Bits for AR_WA. */
+#define AR5416_WA_DEFAULT	0x0000073f
+#define AR9280_WA_DEFAULT	0x0040073b
+#define AR9285_WA_DEFAULT	0x004a050b
+#define AR_WA_UNTIE_RESET_EN	0x00008000
+#define AR_WA_RESET_EN		0x00040000
+#define AR_WA_ANALOG_SHIFT	0x00100000
+#define AR_WA_POR_SHORT		0x00200000
+
+/* Bits for AR_PM_STATE. */
+#define AR_PM_STATE_PME_D3COLD_VAUX	0x00100000
+
+/* Bits for AR_PCIE_PM_CTRL. */
+#define AR_PCIE_PM_CTRL_ENA	0x00080000
+
+/* Bits for AR_HOST_TIMEOUT. */
+#define AR_HOST_TIMEOUT_APB_CNTR_M	0x0000ffff
+#define AR_HOST_TIMEOUT_APB_CNTR_S	0
+#define AR_HOST_TIMEOUT_LCL_CNTR_M	0xffff0000
+#define AR_HOST_TIMEOUT_LCL_CNTR_S	16
+
+/* Bits for AR_EEPROM. */
+#define AR_EEPROM_ABSENT	0x00000100
+#define AR_EEPROM_CORRUPT	0x00000200
+#define AR_EEPROM_PROT_MASK_M	0x03fffc00
+#define AR_EEPROM_PROT_MASK_S	10
+
+/* Bits for AR_SREV. */
+#define AR_SREV_ID_M			0x000000ff
+#define AR_SREV_ID_S			0
+#define AR_SREV_REVISION_M		0x00000007
+#define AR_SREV_REVISION_S		0
+#define AR_SREV_VERSION_M		0x000000f0
+#define AR_SREV_VERSION_S		4
+#define AR_SREV_VERSION2_M		0xfffc0000
+#define AR_SREV_VERSION2_S		12		/* XXX Hack. */
+#define AR_SREV_TYPE2_M			0x0003f000
+#define AR_SREV_TYPE2_S			12
+#define AR_SREV_TYPE2_CHAIN		0x00001000
+#define AR_SREV_TYPE2_HOST_MODE		0x00002000
+#define AR_SREV_REVISION2_M		0x00000f00
+#define AR_SREV_REVISION2_S		8
+#define AR_SREV_VERSION_5416_PCI	0x00d
+#define AR_SREV_VERSION_5416_PCIE	0x00c
+#define AR_SREV_REVISION_5416_10	0
+#define AR_SREV_REVISION_5416_20	1
+#define AR_SREV_REVISION_5416_22	2
+#define AR_SREV_VERSION_9100		0x014
+#define AR_SREV_VERSION_9160		0x040
+#define AR_SREV_REVISION_9160_10	0
+#define AR_SREV_REVISION_9160_11	1
+#define AR_SREV_VERSION_9280		0x080
+#define AR_SREV_REVISION_9280_10	0
+#define AR_SREV_REVISION_9280_20	1
+#define AR_SREV_REVISION_9280_21	2
+#define AR_SREV_VERSION_9285		0x0c0
+#define AR_SREV_REVISION_9285_10	0
+#define AR_SREV_REVISION_9285_11	1
+#define AR_SREV_REVISION_9285_12	2
+#define AR_SREV_VERSION_9287		0x180
+#define AR_SREV_REVISION_9287_10	0
+#define AR_SREV_REVISION_9287_11	1
+#define AR_SREV_REVISION_9287_12	2
+
+/* Bits for AR_AHB_MODE. */
+#define AR_AHB_EXACT_WR_EN			0x00000000
+#define AR_AHB_BUF_WR_EN			0x00000001
+#define AR_AHB_EXACT_RD_EN			0x00000000
+#define AR_AHB_CACHELINE_RD_EN			0x00000002
+#define AR_AHB_PREFETCH_RD_EN			0x00000004
+#define AR_AHB_PAGE_SIZE_1K			0x00000000
+#define AR_AHB_PAGE_SIZE_2K			0x00000008
+#define AR_AHB_PAGE_SIZE_4K			0x00000010
+#define AR_AHB_CUSTOM_BURST_M			0x000000c0
+#define AR_AHB_CUSTOM_BURST_S			6
+#define AR_AHB_CUSTOM_BURST_ASYNC_FIFO_VAL	3
+
+/* Bits for AR_INTR_SYNC_CAUSE. */
+#define AR_INTR_SYNC_RTC_IRQ			0x00000001
+#define AR_INTR_SYNC_MAC_IRQ			0x00000002
+#define AR_INTR_SYNC_EEPROM_ILLEGAL_ACCESS	0x00000004
+#define AR_INTR_SYNC_APB_TIMEOUT		0x00000008
+#define AR_INTR_SYNC_PCI_MODE_CONFLICT		0x00000010
+#define AR_INTR_SYNC_HOST1_FATAL		0x00000020
+#define AR_INTR_SYNC_HOST1_PERR			0x00000040
+#define AR_INTR_SYNC_TRCV_FIFO_PERR		0x00000080
+#define AR_INTR_SYNC_RADM_CPL_EP		0x00000100
+#define AR_INTR_SYNC_RADM_CPL_DLLP_ABORT	0x00000200
+#define AR_INTR_SYNC_RADM_CPL_TLP_ABORT		0x00000400
+#define AR_INTR_SYNC_RADM_CPL_ECRC_ERR		0x00000800
+#define AR_INTR_SYNC_RADM_CPL_TIMEOUT		0x00001000
+#define AR_INTR_SYNC_LOCAL_TIMEOUT		0x00002000
+#define AR_INTR_SYNC_PM_ACCESS			0x00004000
+#define AR_INTR_SYNC_MAC_AWAKE			0x00008000
+#define AR_INTR_SYNC_MAC_ASLEEP			0x00010000
+#define AR_INTR_SYNC_MAC_SLEEP_ACCESS		0x00020000
+#define AR_INTR_SYNC_ALL			0x0003ffff
+#define AR_INTR_SYNC_GPIO_PIN(i)		(1 << (18 + (i)))
+
+#define AR_INTR_SYNC_DEFAULT			\
+	(AR_INTR_SYNC_HOST1_FATAL |		\
+	 AR_INTR_SYNC_HOST1_PERR |		\
+	 AR_INTR_SYNC_RADM_CPL_EP |		\
+	 AR_INTR_SYNC_RADM_CPL_DLLP_ABORT |	\
+	 AR_INTR_SYNC_RADM_CPL_TLP_ABORT |	\
+	 AR_INTR_SYNC_RADM_CPL_ECRC_ERR |	\
+	 AR_INTR_SYNC_RADM_CPL_TIMEOUT |	\
+	 AR_INTR_SYNC_LOCAL_TIMEOUT |		\
+	 AR_INTR_SYNC_MAC_SLEEP_ACCESS)
+
+/* Bits for AR_INTR_ASYNC_CAUSE. */
+#define AR_INTR_RTC_IRQ		0x00000001
+#define AR_INTR_MAC_IRQ		0x00000002
+#define AR_INTR_EEP_PROT_ACCESS	0x00000004
+#define AR_INTR_MAC_AWAKE	0x00020000
+#define AR_INTR_MAC_ASLEEP	0x00040000
+#define AR_INTR_GPIO_PIN(i)	(1 << (18 + (i)))
+#define AR_INTR_SPURIOUS	0xffffffff
+
+/* Bits for AR_GPIO_OE_OUT. */
+#define AR_GPIO_OE_OUT_DRV_M	0x00000003
+#define AR_GPIO_OE_OUT_DRV_S	0
+#define AR_GPIO_OE_OUT_DRV_NO	0
+#define AR_GPIO_OE_OUT_DRV_LOW	1
+#define AR_GPIO_OE_OUT_DRV_HI	2
+#define AR_GPIO_OE_OUT_DRV_ALL	3
+
+/* Bits for AR_GPIO_INTR_POL. */
+#define AR_GPIO_INTR_POL_PIN(i)		(1 << (i))
+
+/* Bits for AR_GPIO_INPUT_EN_VAL. */
+#define AR_GPIO_INPUT_EN_VAL_BT_PRIORITY_DEF	0x00000004
+#define AR_GPIO_INPUT_EN_VAL_BT_FREQUENCY_DEF	0x00000008
+#define AR_GPIO_INPUT_EN_VAL_BT_ACTIVE_DEF	0x00000010
+#define AR_GPIO_INPUT_EN_VAL_RFSILENT_DEF	0x00000080
+#define AR_GPIO_INPUT_EN_VAL_BT_PRIORITY_BB	0x00000400
+#define AR_GPIO_INPUT_EN_VAL_BT_ACTIVE_BB	0x00001000
+#define AR_GPIO_INPUT_EN_VAL_RFSILENT_BB	0x00008000
+#define AR_GPIO_RTC_RESET_OVERRIDE_ENABLE	0x00010000
+#define AR_GPIO_JTAG_DISABLE			0x00020000
+
+/* Bits for AR_GPIO_INPUT_MUX1. */
+#define AR_GPIO_INPUT_MUX1_BT_PRIORITY_M	0x00000f00
+#define AR_GPIO_INPUT_MUX1_BT_PRIORITY_S	8
+#define AR_GPIO_INPUT_MUX1_BT_ACTIVE_M		0x000f0000
+#define AR_GPIO_INPUT_MUX1_BT_ACTIVE_S		16
+
+/* Bits for AR_GPIO_INPUT_MUX2. */
+#define AR_GPIO_INPUT_MUX2_CLK25_M		0x0000000f
+#define AR_GPIO_INPUT_MUX2_CLK25_S		0
+#define AR_GPIO_INPUT_MUX2_RFSILENT_M		0x000000f0
+#define AR_GPIO_INPUT_MUX2_RFSILENT_S		4
+#define AR_GPIO_INPUT_MUX2_RTC_RESET_M		0x00000f00
+#define AR_GPIO_INPUT_MUX2_RTC_RESET_S		8
+
+/* Bits for AR_GPIO_OUTPUT_MUX[1-3]. */
+#define AR_GPIO_OUTPUT_MUX_AS_OUTPUT			0
+#define AR_GPIO_OUTPUT_MUX_AS_PCIE_ATTENTION_LED	1
+#define AR_GPIO_OUTPUT_MUX_AS_PCIE_POWER_LED		2
+#define AR_GPIO_OUTPUT_MUX_AS_TX_FRAME			3
+#define AR_GPIO_OUTPUT_MUX_AS_RX_CLEAR_EXTERNAL		4
+#define AR_GPIO_OUTPUT_MUX_AS_MAC_NETWORK_LED		5
+#define AR_GPIO_OUTPUT_MUX_AS_MAC_POWER_LED		6
+
+/* Bits for AR_EEPROM_STATUS_DATA. */
+#define AR_EEPROM_STATUS_DATA_VAL_M		0x0000ffff
+#define AR_EEPROM_STATUS_DATA_VAL_S		0
+#define AR_EEPROM_STATUS_DATA_BUSY		0x00010000
+#define AR_EEPROM_STATUS_DATA_BUSY_ACCESS	0x00020000
+#define AR_EEPROM_STATUS_DATA_PROT_ACCESS	0x00040000
+#define AR_EEPROM_STATUS_DATA_ABSENT_ACCESS	0x00080000
+
+/* Bits for AR_PCIE_MSI. */
+#define AR_PCIE_MSI_ENABLE	0x00000001
+
+/* Bits for AR_RTC_RC. */
+#define AR_RTC_RC_MAC_WARM	0x00000001
+#define AR_RTC_RC_MAC_COLD	0x00000002
+#define AR_RTC_RC_COLD_RESET	0x00000004
+#define AR_RTC_RC_WARM_RESET	0x00000008
+
+/* Bits for AR_RTC_PLL_CONTROL. */
+#define AR_RTC_PLL_DIV_M		0x0000001f
+#define AR_RTC_PLL_DIV_S		0
+#define AR_RTC_PLL_DIV2			0x00000020
+#define AR_RTC_PLL_REFDIV_5		0x000000c0
+#define AR_RTC_PLL_CLKSEL_M		0x00000300
+#define AR_RTC_PLL_CLKSEL_S		8
+#define AR_RTC_9160_PLL_DIV_M		0x000003ff
+#define AR_RTC_9160_PLL_DIV_S		0
+#define AR_RTC_9160_PLL_REFDIV_M	0x00003c00
+#define AR_RTC_9160_PLL_REFDIV_S	10
+#define AR_RTC_9160_PLL_CLKSEL_M	0x0000c000
+#define AR_RTC_9160_PLL_CLKSEL_S	14
+
+/* Bits for AR_RTC_RESET. */
+#define AR_RTC_RESET_EN		0x00000001
+
+/* Bits for AR_RTC_STATUS. */
+#define AR_RTC_STATUS_M		0x0000000f
+#define AR_RTC_STATUS_S		0
+#define AR_RTC_STATUS_SHUTDOWN	0x00000001
+#define AR_RTC_STATUS_ON	0x00000002
+#define AR_RTC_STATUS_SLEEP	0x00000004
+#define AR_RTC_STATUS_WAKEUP	0x00000008
+
+/* Bits for AR_RTC_SLEEP_CLK. */
+#define AR_RTC_FORCE_DERIVED_CLK	0x00000002
+
+/* Bits for AR_RTC_FORCE_WAKE. */
+#define AR_RTC_FORCE_WAKE_EN		0x00000001
+#define AR_RTC_FORCE_WAKE_ON_INT	0x00000002
+
+/*
+ * Analog registers.
+ */
+/* Bits for AR_AN_RF2G1_CH0. */
+#define AR_AN_RF2G1_CH0_OB_M	0x03800000
+#define AR_AN_RF2G1_CH0_OB_S	23
+#define AR_AN_RF2G1_CH0_DB_M	0x1c000000
+#define AR_AN_RF2G1_CH0_DB_S	26
+
+/* Bits for AR_AN_RF5G1_CH0. */
+#define AR_AN_RF5G1_CH0_OB5_M	0x00070000
+#define AR_AN_RF5G1_CH0_OB5_S	16
+#define AR_AN_RF5G1_CH0_DB5_M	0x00380000
+#define AR_AN_RF5G1_CH0_DB5_S	19
+
+/* Bits for AR_AN_RF2G1_CH1. */
+#define AR_AN_RF2G1_CH1_OB_M	0x03800000
+#define AR_AN_RF2G1_CH1_OB_S	23
+#define AR_AN_RF2G1_CH1_DB_M	0x1c000000
+#define AR_AN_RF2G1_CH1_DB_S	26
+
+/* Bits for AR_AN_RF5G1_CH1. */
+#define AR_AN_RF5G1_CH1_OB5_M	0x00070000
+#define AR_AN_RF5G1_CH1_OB5_S	16
+#define AR_AN_RF5G1_CH1_DB5_M	0x00380000
+#define AR_AN_RF5G1_CH1_DB5_S	19
+
+/* Bits for AR_AN_SYNTH9. */
+#define AR_AN_SYNTH9_REFDIVA_M	0xf8000000
+#define AR_AN_SYNTH9_REFDIVA_S	27
+
+/* Bits for AR_AN_TOP1. */
+#define AR_AN_TOP1_DACLPMODE	0x00040000
+
+/* Bits for AR_AN_TOP2. */
+#define AR_AN_TOP2_XPABIAS_LVL_M	0xc0000000
+#define AR_AN_TOP2_XPABIAS_LVL_S	30
+#define AR_AN_TOP2_LOCALBIAS		0x00200000
+#define AR_AN_TOP2_PWDCLKIND		0x00400000
+
+
+/* Bits for AR_STA_ID1. */
+#define AR_STA_ID1_SADH_M		0x0000ffff
+#define AR_STA_ID1_SADH_S		0
+#define AR_STA_ID1_STA_AP		0x00010000
+#define AR_STA_ID1_ADHOC		0x00020000
+#define AR_STA_ID1_PWR_SAV		0x00040000
+#define AR_STA_ID1_KSRCHDIS		0x00080000
+#define AR_STA_ID1_PCF			0x00100000
+#define AR_STA_ID1_USE_DEFANT		0x00200000
+#define AR_STA_ID1_DEFANT_UPDATE	0x00400000
+#define AR_STA_ID1_RTS_USE_DEF		0x00800000
+#define AR_STA_ID1_ACKCTS_6MB		0x01000000
+#define AR_STA_ID1_BASE_RATE_11B	0x02000000
+#define AR_STA_ID1_SECTOR_SELF_GEN	0x04000000
+#define AR_STA_ID1_CRPT_MIC_ENABLE	0x08000000
+#define AR_STA_ID1_KSRCH_MODE		0x10000000
+#define AR_STA_ID1_PRESERVE_SEQNUM	0x20000000
+#define AR_STA_ID1_CBCIV_ENDIAN		0x40000000
+#define AR_STA_ID1_MCAST_KSRCH		0x80000000
+
+/* Bits for AR_BSS_ID1. */
+#define AR_BSS_ID1_U16_M	0x0000ffff
+#define AR_BSS_ID1_U16_S	0
+#define AR_BSS_ID1_AID_M	0x07ff0000
+#define AR_BSS_ID1_AID_S	16
+
+/* Bits for AR_TIME_OUT. */
+#define AR_TIME_OUT_ACK_M			0x00003fff
+#define AR_TIME_OUT_ACK_S			0
+#define AR_TIME_OUT_CTS_M			0x3fff0000
+#define AR_TIME_OUT_CTS_S			16
+#define AR_TIME_OUT_ACK_CTS_ASYNC_FIFO_DUR	0x16001d56
+
+/* Bits for AR_RSSI_THR. */
+#define AR_RSSI_THR_M		0x000000ff
+#define AR_RSSI_THR_S		0
+#define AR_RSSI_THR_BM_THR_M	0x0000ff00
+#define AR_RSSI_THR_BM_THR_S	8
+#define AR_RSSI_BCN_WEIGHT_M	0x1f000000
+#define AR_RSSI_BCN_WEIGHT_S	24
+#define AR_RSSI_BCN_RSSI_RST	0x20000000
+
+/* Bits for AR_USEC. */
+#define AR_USEC_USEC_M		0x0000007f
+#define AR_USEC_USEC_S		0
+#define AR_USEC_TX_LAT_M	0x007fc000
+#define AR_USEC_TX_LAT_S	14
+#define AR_USEC_RX_LAT_M	0x1f800000
+#define AR_USEC_RX_LAT_S	23
+#define AR_USEC_ASYNC_FIFO_DUR	0x12e00074
+
+/* Bits for AR_RESET_TSF. */
+#define AR_RESET_TSF_ONCE	0x01000000
+
+/* Bits for AR_RX_FILTER. */
+#define AR_RX_FILTER_UCAST	0x00000001
+#define AR_RX_FILTER_MCAST	0x00000002
+#define AR_RX_FILTER_BCAST	0x00000004
+#define AR_RX_FILTER_CONTROL	0x00000008
+#define AR_RX_FILTER_BEACON	0x00000010
+#define AR_RX_FILTER_PROM	0x00000020
+#define AR_RX_FILTER_PROBEREQ	0x00000080
+#define AR_RX_FILTER_MYBEACON	0x00000200
+#define AR_RX_FILTER_COMPR_BAR	0x00000400
+#define AR_RX_FILTER_PSPOLL	0x00004000
+
+/* Bits for AR_DIAG_SW. */
+#define AR_DIAG_CACHE_ACK		0x00000001
+#define AR_DIAG_ACK_DIS			0x00000002
+#define AR_DIAG_CTS_DIS			0x00000004
+#define AR_DIAG_ENCRYPT_DIS		0x00000008
+#define AR_DIAG_DECRYPT_DIS		0x00000010
+#define AR_DIAG_RX_DIS			0x00000020
+#define AR_DIAG_LOOP_BACK		0x00000040
+#define AR_DIAG_CORR_FCS		0x00000080
+#define AR_DIAG_CHAN_INFO		0x00000100
+#define AR_DIAG_SCRAM_SEED_M		0x0001fe00
+#define AR_DIAG_SCRAM_SEED_S		8	/* XXX should be 9? */
+#define AR_DIAG_FRAME_NV0		0x00020000
+#define AR_DIAG_OBS_PT_SEL1_M		0x000c0000
+#define AR_DIAG_OBS_PT_SEL1_S		18
+#define AR_DIAG_FORCE_RX_CLEAR		0x00100000
+#define AR_DIAG_IGNORE_VIRT_CS		0x00200000
+#define AR_DIAG_FORCE_CH_IDLE_HIGH	0x00400000
+#define AR_DIAG_EIFS_CTRL_ENA		0x00800000
+#define AR_DIAG_DUAL_CHAIN_INFO		0x01000000
+#define AR_DIAG_RX_ABORT		0x02000000
+#define AR_DIAG_SATURATE_CYCLE_CNT	0x04000000
+#define AR_DIAG_OBS_PT_SEL2		0x08000000
+#define AR_DIAG_RX_CLEAR_CTL_LOW	0x10000000
+#define AR_DIAG_RX_CLEAR_EXT_LOW	0x20000000
+
+/* Bits for AR_AES_MUTE_MASK0. */
+#define AR_AES_MUTE_MASK0_FC_M	0x0000ffff
+#define AR_AES_MUTE_MASK0_FC_S	0
+#define AR_AES_MUTE_MASK0_QOS_M	0xffff0000
+#define AR_AES_MUTE_MASK0_QOS_S	16
+
+/* Bits for AR_AES_MUTE_MASK1. */
+#define AR_AES_MUTE_MASK1_SEQ_M		0x0000ffff
+#define AR_AES_MUTE_MASK1_SEQ_S		0
+#define AR_AES_MUTE_MASK1_FC_MGMT_M	0xffff0000
+#define AR_AES_MUTE_MASK1_FC_MGMT_S	16
+#define AR_AES_MUTE_MASK1_FC0_MGMT_M	0x00ff0000
+#define AR_AES_MUTE_MASK1_FC0_MGMT_S	16
+#define AR_AES_MUTE_MASK1_FC1_MGMT_M	0xff000000
+#define AR_AES_MUTE_MASK1_FC1_MGMT_S	24
+
+/* Bits for AR_GATED_CLKS. */
+#define AR_GATED_CLKS_TX	0x00000002
+#define AR_GATED_CLKS_RX	0x00000004
+#define AR_GATED_CLKS_REG	0x00000008
+
+/* Bits for AR_OBS_BUS_CTRL. */
+#define AR_OBS_BUS_SEL_1	0x00040000
+#define AR_OBS_BUS_SEL_2	0x00080000
+#define AR_OBS_BUS_SEL_3	0x000c0000
+#define AR_OBS_BUS_SEL_4	0x08040000
+#define AR_OBS_BUS_SEL_5	0x08080000
+
+/* Bits for AR_OBS_BUS_1. */
+#define AR_OBS_BUS_1_PCU		0x00000001
+#define AR_OBS_BUS_1_RX_END		0x00000002
+#define AR_OBS_BUS_1_RX_WEP		0x00000004
+#define AR_OBS_BUS_1_RX_BEACON		0x00000008
+#define AR_OBS_BUS_1_RX_FILTER		0x00000010
+#define AR_OBS_BUS_1_TX_HCF		0x00000020
+#define AR_OBS_BUS_1_QUIET_TIME		0x00000040
+#define AR_OBS_BUS_1_CHAN_IDLE		0x00000080
+#define AR_OBS_BUS_1_TX_HOLD		0x00000100
+#define AR_OBS_BUS_1_TX_FRAME		0x00000200
+#define AR_OBS_BUS_1_RX_FRAME		0x00000400
+#define AR_OBS_BUS_1_RX_CLEAR		0x00000800
+#define AR_OBS_BUS_1_WEP_STATE_M	0x0003f000
+#define AR_OBS_BUS_1_WEP_STATE_S	12
+#define AR_OBS_BUS_1_RX_STATE_M		0x01f00000
+#define AR_OBS_BUS_1_RX_STATE_S		20
+#define AR_OBS_BUS_1_TX_STATE_M		0x7e000000
+#define AR_OBS_BUS_1_TX_STATE_S		25
+
+/* Bits for AR_SLEEP1. */
+#define AR_SLEEP1_ASSUME_DTIM		0x00080000
+#define AR_SLEEP1_CAB_TIMEOUT_M		0xffe00000
+#define AR_SLEEP1_CAB_TIMEOUT_S		21
+/* Default value. */
+#define AR_CAB_TIMEOUT_VAL		10
+
+/* Bits for AR_SLEEP2. */
+#define AR_SLEEP2_BEACON_TIMEOUT_M	0xffe00000
+#define AR_SLEEP2_BEACON_TIMEOUT_S	21
+
+/* Bits for AR_TPC. */
+#define AR_TPC_ACK_M	0x0000003f
+#define AR_TPC_ACK_S	0
+#define AR_TPC_CTS_M	0x00003f00
+#define AR_TPC_CTS_S	8
+#define AR_TPC_CHIRP_M	0x003f0000
+#define AR_TPC_CHIRP_S	16
+
+/* Bits for AR_QUIET1. */
+#define AR_QUIET1_NEXT_QUIET_M		0x0000ffff
+#define AR_QUIET1_NEXT_QUIET_S		0
+#define AR_QUIET1_QUIET_ENABLE		0x00010000
+#define AR_QUIET1_QUIET_ACK_CTS_ENABLE	0x00020000
+
+/* Bits for AR_QUIET2. */
+#define AR_QUIET2_QUIET_PERIOD_M	0x0000ffff
+#define AR_QUIET2_QUIET_PERIOD_S	0
+#define AR_QUIET2_QUIET_DUR_M		0xffff0000
+#define AR_QUIET2_QUIET_DUR_S		16
+
+/* Bits for AR_TSF_PARM. */
+#define AR_TSF_INCREMENT_M	0x000000ff
+#define AR_TSF_INCREMENT_S	0
+
+/* Bits for AR_QOS_NO_ACK. */
+#define AR_QOS_NO_ACK_TWO_BIT_M		0x0000000f
+#define AR_QOS_NO_ACK_TWO_BIT_S		0
+#define AR_QOS_NO_ACK_BIT_OFF_M		0x0000007f
+#define AR_QOS_NO_ACK_BIT_OFF_S		4
+#define AR_QOS_NO_ACK_BYTE_OFF_M	0x00000180
+#define AR_QOS_NO_ACK_BYTE_OFF_S	7
+
+/* Bits for AR_PHY_ERR. */
+#define AR_PHY_ERR_DCHIRP	0x00000008
+#define AR_PHY_ERR_RADAR	0x00000020
+#define AR_PHY_ERR_OFDM_TIMING	0x00020000
+#define AR_PHY_ERR_CCK_TIMING	0x02000000
+
+/* Bits for AR_PCU_MISC. */
+#define AR_PCU_FORCE_BSSID_MATCH	0x00000001
+#define AR_PCU_MIC_NEW_LOC_ENA		0x00000004
+#define AR_PCU_TX_ADD_TSF		0x00000008
+#define AR_PCU_CCK_SIFS_MODE		0x00000010
+#define AR_PCU_RX_ANT_UPDT		0x00000800
+#define AR_PCU_TXOP_TBTT_LIMIT_ENA	0x00001000
+#define AR_PCU_MISS_BCN_IN_SLEEP	0x00004000
+#define AR_PCU_BUG_12306_FIX_ENA	0x00020000
+#define AR_PCU_FORCE_QUIET_COLL		0x00040000
+#define AR_PCU_BT_ANT_PREVENT_RX	0x00100000
+#define AR_PCU_TBTT_PROTECT		0x00200000
+#define AR_PCU_CLEAR_VMF		0x01000000
+#define AR_PCU_CLEAR_BA_VALID		0x04000000
+
+/* Bits for AR_BT_COEX_MODE. */
+#define AR_BT_TIME_EXTEND_M	0x000000ff
+#define AR_BT_TIME_EXTEND_S	0
+#define AR_BT_TXSTATE_EXTEND	0x00000100
+#define AR_BT_TX_FRAME_EXTEND	0x00000200
+#define AR_BT_MODE_M		0x00000c00
+#define AR_BT_MODE_S		10
+#define AR_BT_MODE_LEGACY	0
+#define AR_BT_MODE_UNSLOTTED	1
+#define AR_BT_MODE_SLOTTED	2
+#define AR_BT_MODE_DISABLED	3
+#define AR_BT_QUIET		0x00001000
+#define AR_BT_QCU_THRESH_M	0x0001e000
+#define AR_BT_QCU_THRESH_S	13
+#define AR_BT_RX_CLEAR_POLARITY	0x00020000
+#define AR_BT_PRIORITY_TIME_M	0x00fc0000
+#define AR_BT_PRIORITY_TIME_S	18
+#define AR_BT_FIRST_SLOT_TIME_M	0xff000000
+#define AR_BT_FIRST_SLOT_TIME_S	24
+
+/* Bits for AR_BT_COEX_WEIGHT. */
+#define AR_BTCOEX_BT_WGHT_M	0x0000ffff
+#define AR_BTCOEX_BT_WGHT_S	0
+#define AR_STOMP_LOW_BT_WGHT	0xff55
+#define AR_BTCOEX_WL_WGHT_M	0xffff0000
+#define AR_BTCOEX_WL_WGHT_S	16
+#define AR_STOMP_LOW_WL_WGHT	0xaaa8
+
+/* Bits for AR_BT_COEX_MODE2. */
+#define AR_BT_BCN_MISS_THRESH_M	0x000000ff
+#define AR_BT_BCN_MISS_THRESH_S	0
+#define AR_BT_BCN_MISS_CNT_M	0x0000ff00
+#define AR_BT_BCN_MISS_CNT_S	8
+#define AR_BT_HOLD_RX_CLEAR	0x00010000
+#define AR_BT_DISABLE_BT_ANT	0x00100000
+
+/* Bits for AR_PCU_TXBUF_CTRL. */
+#define AR_PCU_TXBUF_CTRL_SIZE_M		0x000007ff
+#define AR_PCU_TXBUF_CTRL_SIZE_S		0
+#define AR_PCU_TXBUF_CTRL_USABLE_SIZE		1792
+#define AR9285_PCU_TXBUF_CTRL_USABLE_SIZE	(1792 / 2)
+
+/* Bits for AR_PCU_MISC_MODE2. */
+#define AR_PCU_MISC_MODE2_MGMT_CRYPTO_ENABLE		0x00000002
+#define AR_PCU_MISC_MODE2_NO_CRYPTO_FOR_NON_DATA_PKT	0x00000004
+#define AR_PCU_MISC_MODE2_ADHOC_MCAST_KEYID_ENABLE	0x00000040
+#define AR_PCU_MISC_MODE2_CFP_IGNORE			0x00000080
+#define AR_PCU_MISC_MODE2_MGMT_QOS_M			0x0000ff00
+#define AR_PCU_MISC_MODE2_MGMT_QOS_S			8
+#define AR_PCU_MISC_MODE2_ENABLE_LOAD_NAV_BEACON_DUR	0x00010000
+#define AR_PCU_MISC_MODE2_ENABLE_AGGWEP			0x00020000
+#define AR_PCU_MISC_MODE2_HWWAR1			0x00100000
+#define AR_PCU_MISC_MODE2_HWWAR2			0x02000000
+
+/* Bits for AR_MAC_PCU_LOGIC_ANALYZER. */
+#define AR_MAC_PCU_LOGIC_ANALYZER_DISBUG20768	0x20000000
+
+/* Bits for AR_MAC_PCU_ASYNC_FIFO_REG3. */
+#define AR_MAC_PCU_ASYNC_FIFO_REG3_DATAPATH_SEL	0x00000400
+#define AR_MAC_PCU_ASYNC_FIFO_REG3_SOFT_RESET	0x80000000
+
+/* Bits for AR_PHY_ERR_[123]. */
+#define AR_PHY_ERR_COUNT_M	0x00ffffff
+#define AR_PHY_ERR_COUNT_S	0
+
+/* Bits for AR_TSFOOR_THRESHOLD. */
+#define AR_TSFOOR_THRESHOLD_VAL_M	0x0000ffff
+#define AR_TSFOOR_THRESHOLD_VAL_S	0
+
+/* Bit for AR_TXSIFS. */
+#define AR_TXSIFS_TIME_M	0x000000ff
+#define AR_TXSIFS_TIME_S	0
+#define AR_TXSIFS_TX_LATENCY_M	0x00000f00
+#define AR_TXSIFS_TX_LATENCY_S	8
+#define AR_TXSIFS_ACK_SHIFT_M	0x00007000
+#define AR_TXSIFS_ACK_SHIFT_S	12
+
+/* Bits for AR_TXOP_X. */
+#define AR_TXOP_X_VAL	0x000000ff
+
+/* Bits for AR_TIMER_MODE. */
+#define AR_TBTT_TIMER_EN		0x00000001
+#define AR_DBA_TIMER_EN			0x00000002
+#define AR_SWBA_TIMER_EN		0x00000004
+#define AR_HCF_TIMER_EN			0x00000008
+#define AR_TIM_TIMER_EN			0x00000010
+#define AR_DTIM_TIMER_EN		0x00000020
+#define AR_QUIET_TIMER_EN		0x00000040
+#define AR_NDP_TIMER_EN			0x00000080
+#define AR_TIMER_OVERFLOW_INDEX_M	0x00000700
+#define AR_TIMER_OVERFLOW_INDEX_S	8
+#define AR_TIMER_THRESH_M		0xfffff000
+#define AR_TIMER_THRESH_S		12
+
+/* Bits for AR_SLP32_MODE. */
+#define AR_SLP32_HALF_CLK_LATENCY_M	0x000fffff
+#define AR_SLP32_HALF_CLK_LATENCY_S	0
+#define AR_SLP32_ENA			0x00100000
+#define AR_SLP32_TSF_WRITE_STATUS	0x00200000
+
+/* Bits for AR_SLP32_WAKE. */
+#define AR_SLP32_WAKE_XTL_TIME_M	0x0000ffff
+#define AR_SLP32_WAKE_XTL_TIME_S	0
+
+/* Bits for AR_SLP_MIB_CTRL. */
+#define AR_SLP_MIB_CLEAR	0x00000001
+#define AR_SLP_MIB_PENDING	0x00000002
+
+/* Bits for AR_2040_MODE. */
+#define AR_2040_JOINED_RX_CLEAR	0x00000001
+
+/* Bits for AR_KEYTABLE_TYPE. */
+#define AR_KEYTABLE_TYPE_M	0x00000007
+#define AR_KEYTABLE_TYPE_S	0
+#define AR_KEYTABLE_TYPE_40	0
+#define AR_KEYTABLE_TYPE_104	1
+#define AR_KEYTABLE_TYPE_128	3
+#define AR_KEYTABLE_TYPE_TKIP	4
+#define AR_KEYTABLE_TYPE_AES	5
+#define AR_KEYTABLE_TYPE_CCM	6
+#define AR_KEYTABLE_TYPE_CLR	7
+#define AR_KEYTABLE_ANT		0x00000008
+#define AR_KEYTABLE_VALID	0x00008000
+
+
+
+/* Bits for AR_PHY_TEST. */
+#define AR_PHY_TEST_RFSILENT_BB	0x00002000
+#define AR_PHY_TEST_AGC_CLR	0x10000000
+
+/* Bits for AR_PHY_TURBO. */
+#define AR_PHY_FC_TURBO_MODE		0x00000001
+#define AR_PHY_FC_TURBO_SHORT		0x00000002
+#define AR_PHY_FC_DYN2040_EN		0x00000004
+#define AR_PHY_FC_DYN2040_PRI_ONLY	0x00000008
+#define AR_PHY_FC_DYN2040_PRI_CH	0x00000010
+#define AR_PHY_FC_DYN2040_EXT_CH	0x00000020
+#define AR_PHY_FC_HT_EN			0x00000040
+#define AR_PHY_FC_SHORT_GI_40		0x00000080
+#define AR_PHY_FC_WALSH			0x00000100
+#define AR_PHY_FC_SINGLE_HT_LTF1	0x00000200
+#define AR_PHY_FC_ENABLE_DAC_FIFO	0x00000800
+
+/* Bits for AR_PHY_TIMING3. */
+#define AR_PHY_TIMING3_DSC_MAN_M	0xfffe0000
+#define AR_PHY_TIMING3_DSC_MAN_S	17
+#define AR_PHY_TIMING3_DSC_EXP_M	0x0001e000
+#define AR_PHY_TIMING3_DSC_EXP_S	13
+
+/* Bits for AR_PHY_CHIP_ID. */
+#define AR_PHY_CHIP_ID_REV_0		0x80
+#define AR_PHY_CHIP_ID_REV_1		0x81
+#define AR_PHY_CHIP_ID_9160_REV_0	0xb0
+
+/* Bits for AR_PHY_ACTIVE. */
+#define AR_PHY_ACTIVE_EN	0x00000001
+#define AR_PHY_ACTIVE_DIS	0x00000000
+
+/* Bits for AR_PHY_RF_CTL2. */
+#define AR_PHY_TX_END_DATA_START_M	0x000000ff
+#define AR_PHY_TX_END_DATA_START_S	0
+#define AR_PHY_TX_END_PA_ON_M		0x0000ff00
+#define AR_PHY_TX_END_PA_ON_S		8
+
+/* Bits for AR_PHY_RF_CTL3. */
+#define AR_PHY_TX_END_TO_A2_RX_ON_M	0x00ff0000
+#define AR_PHY_TX_END_TO_A2_RX_ON_S	16
+
+/* Bits for AR_PHY_ADC_CTL. */
+#define AR_PHY_ADC_CTL_OFF_INBUFGAIN_M	0x00000003
+#define AR_PHY_ADC_CTL_OFF_INBUFGAIN_S	0
+#define AR_PHY_ADC_CTL_OFF_PWDDAC	0x00002000
+#define AR_PHY_ADC_CTL_OFF_PWDBANDGAP	0x00004000
+#define AR_PHY_ADC_CTL_OFF_PWDADC	0x00008000
+#define AR_PHY_ADC_CTL_ON_INBUFGAIN_M	0x00030000
+#define AR_PHY_ADC_CTL_ON_INBUFGAIN_S	16
+
+/* Bits for AR_PHY_ADC_SERIAL_CTL. */
+#define AR_PHY_SEL_INTERNAL_ADDAC	0x00000000
+#define AR_PHY_SEL_EXTERNAL_RADIO	0x00000001
+
+/* Bits for AR_PHY_RF_CTL4. */
+#define AR_PHY_RF_CTL4_TX_END_XPAB_OFF_M	0xff000000
+#define AR_PHY_RF_CTL4_TX_END_XPAB_OFF_S	24
+#define AR_PHY_RF_CTL4_TX_END_XPAA_OFF_M	0x00ff0000
+#define AR_PHY_RF_CTL4_TX_END_XPAA_OFF_S	16
+#define AR_PHY_RF_CTL4_FRAME_XPAB_ON_M		0x0000ff00
+#define AR_PHY_RF_CTL4_FRAME_XPAB_ON_S		8
+#define AR_PHY_RF_CTL4_FRAME_XPAA_ON_M		0x000000ff
+#define AR_PHY_RF_CTL4_FRAME_XPAA_ON_S		0
+
+/* Bits for AR_PHY_SETTLING. */
+#define AR_PHY_SETTLING_SWITCH_M	0x00003f80
+#define AR_PHY_SETTLING_SWITCH_S	7
+
+/* Bits for AR_PHY_RXGAIN. */
+#define AR_PHY_RXGAIN_TXRX_ATTEN_M	0x0003f000
+#define AR_PHY_RXGAIN_TXRX_ATTEN_S	12
+#define AR_PHY_RXGAIN_TXRX_RF_MAX_M	0x007c0000
+#define AR_PHY_RXGAIN_TXRX_RF_MAX_S	18
+#define AR9280_PHY_RXGAIN_TXRX_ATTEN_M	0x00003f80
+#define AR9280_PHY_RXGAIN_TXRX_ATTEN_S	7
+#define AR9280_PHY_RXGAIN_TXRX_MARGIN_M	0x001fc000
+#define AR9280_PHY_RXGAIN_TXRX_MARGIN_S	14
+
+/* Bits for AR_PHY_DESIRED_SZ. */
+#define AR_PHY_DESIRED_SZ_ADC_M		0x000000ff
+#define AR_PHY_DESIRED_SZ_ADC_S		0
+#define AR_PHY_DESIRED_SZ_PGA_M		0x0000ff00
+#define AR_PHY_DESIRED_SZ_PGA_S		8
+#define AR_PHY_DESIRED_SZ_TOT_DES_M	0x0ff00000
+#define AR_PHY_DESIRED_SZ_TOT_DES_S	20
+
+/* Bits for AR_PHY_FIND_SIG. */
+#define AR_PHY_FIND_SIG_FIRSTEP_M	0x0003f000
+#define AR_PHY_FIND_SIG_FIRSTEP_S	12
+#define AR_PHY_FIND_SIG_FIRPWR_M	0x03fc0000
+#define AR_PHY_FIND_SIG_FIRPWR_S	18
+
+/* Bits for AR_PHY_AGC_CTL1. */
+#define AR_PHY_AGC_CTL1_COARSE_LOW_M	0x00007f80
+#define AR_PHY_AGC_CTL1_COARSE_LOW_S	7
+#define AR_PHY_AGC_CTL1_COARSE_HIGH_M	0x003f8000
+#define AR_PHY_AGC_CTL1_COARSE_HIGH_S	15
+
+/* Bits for AR_PHY_AGC_CONTROL. */
+#define AR_PHY_AGC_CONTROL_CAL		0x00000001
+#define AR_PHY_AGC_CONTROL_NF		0x00000002
+#define AR_PHY_AGC_CONTROL_ENABLE_NF	0x00008000
+#define AR_PHY_AGC_CONTROL_FLTR_CAL	0x00010000
+#define AR_PHY_AGC_CONTROL_NO_UPDATE_NF	0x00020000
+
+/* Bits for AR_PHY_CCA. */
+#define AR_PHY_MAXCCA_PWR_M		0x000001ff
+#define AR_PHY_MAXCCA_PWR_S		0
+#define AR_PHY_MINCCA_PWR_M		0x0ff80000
+#define AR_PHY_MINCCA_PWR_S		19
+#define AR_PHY_CCA_THRESH62_M		0x0007f000
+#define AR_PHY_CCA_THRESH62_S		12
+#define AR9280_PHY_MINCCA_PWR_M		0x1ff00000
+#define AR9280_PHY_MINCCA_PWR_S		20
+#define AR9280_PHY_CCA_THRESH62_M	0x000ff000
+#define AR9280_PHY_CCA_THRESH62_S	12
+
+/* Bits for AR_PHY_SFCORR_LOW. */
+#define AR_PHY_SFCORR_LOW_USE_SELF_CORR_LOW	0x00000001
+#define AR_PHY_SFCORR_LOW_M2COUNT_THR_LOW_M	0x00003f00
+#define AR_PHY_SFCORR_LOW_M2COUNT_THR_LOW_S	8
+#define AR_PHY_SFCORR_LOW_M1_THRESH_LOW_M	0x001fc000
+#define AR_PHY_SFCORR_LOW_M1_THRESH_LOW_S	14
+#define AR_PHY_SFCORR_LOW_M2_THRESH_LOW_M	0x0fe00000
+#define AR_PHY_SFCORR_LOW_M2_THRESH_LOW_S	21
+
+/* Bits for AR_PHY_SFCORR. */
+#define AR_PHY_SFCORR_M2COUNT_THR_M	0x0000001f
+#define AR_PHY_SFCORR_M2COUNT_THR_S	0
+#define AR_PHY_SFCORR_M1_THRESH_M	0x00fe0000
+#define AR_PHY_SFCORR_M1_THRESH_S	17
+#define AR_PHY_SFCORR_M2_THRESH_M	0x7f000000
+#define AR_PHY_SFCORR_M2_THRESH_S	24
+
+/* Bits for AR_PHY_PLL_CTL. */
+#define AR_PHY_PLL_CTL_40	0xaa
+#define AR_PHY_PLL_CTL_40_5413	0x04
+#define AR_PHY_PLL_CTL_44	0xab
+#define AR_PHY_PLL_CTL_44_2133	0xeb
+#define AR_PHY_PLL_CTL_40_2133	0xea
+
+/* Bits for AR_PHY_RX_DELAY. */
+#define AR_PHY_RX_DELAY_DELAY_M	0x00003fff
+#define AR_PHY_RX_DELAY_DELAY_S	0
+
+/* Bits for AR_PHY_TIMING_CTRL4_0. */
+#define AR_PHY_TIMING_CTRL4_IQCORR_Q_Q_COFF_M		0x0000001f
+#define AR_PHY_TIMING_CTRL4_IQCORR_Q_Q_COFF_S		0
+#define AR_PHY_TIMING_CTRL4_IQCORR_Q_I_COFF_M		0x000007e0
+#define AR_PHY_TIMING_CTRL4_IQCORR_Q_I_COFF_S		5
+#define AR_PHY_TIMING_CTRL4_IQCORR_ENABLE		0x00000800
+#define AR_PHY_TIMING_CTRL4_IQCAL_LOG_COUNT_MAX_M	0x0000f000
+#define AR_PHY_TIMING_CTRL4_IQCAL_LOG_COUNT_MAX_S	12
+#define AR_PHY_TIMING_CTRL4_DO_CAL			0x00010000
+#define AR_PHY_TIMING_CTRL4_ENABLE_SPUR_RSSI		0x80000000
+#define	AR_PHY_TIMING_CTRL4_ENABLE_SPUR_FILTER		0x40000000
+#define	AR_PHY_TIMING_CTRL4_ENABLE_CHAN_MASK		0x20000000
+#define	AR_PHY_TIMING_CTRL4_ENABLE_PILOT_MASK		0x10000000
+
+/* Bits for AR_PHY_TIMING5. */
+#define AR_PHY_TIMING5_CYCPWR_THR1_M	0x000000fe
+#define AR_PHY_TIMING5_CYCPWR_THR1_S	1
+
+/* Bits for AR_PHY_POWER_TX_RATE_MAX. */
+#define AR_PHY_POWER_TX_RATE_MAX_TPC_ENABLE	0x00000040
+
+/* Bits for AR_PHY_FRAME_CTL. */
+#define AR_PHY_FRAME_CTL_TX_CLIP_M	0x00000038
+#define AR_PHY_FRAME_CTL_TX_CLIP_S	3
+
+/* Bits for AR_PHY_TXPWRADJ. */
+#define AR_PHY_TXPWRADJ_CCK_GAIN_DELTA_M	0x00000fc0
+#define AR_PHY_TXPWRADJ_CCK_GAIN_DELTA_S	6
+#define AR_PHY_TXPWRADJ_CCK_PCDAC_INDEX_M	0x00fc0000
+#define AR_PHY_TXPWRADJ_CCK_PCDAC_INDEX_S	18
+
+/* Bits for AR_PHY_RADAR_EXT. */
+#define AR_PHY_RADAR_EXT_ENA		0x00004000
+
+/* Bits for AR_PHY_RADAR_0. */
+#define AR_PHY_RADAR_0_ENA		0x00000001
+#define AR_PHY_RADAR_0_FFT_ENA		0x80000000
+#define AR_PHY_RADAR_0_INBAND_M		0x0000003e
+#define AR_PHY_RADAR_0_INBAND_S		1
+#define AR_PHY_RADAR_0_PRSSI_M		0x00000fc0
+#define AR_PHY_RADAR_0_PRSSI_S		6
+#define AR_PHY_RADAR_0_HEIGHT_M		0x0003f000
+#define AR_PHY_RADAR_0_HEIGHT_S		12
+#define AR_PHY_RADAR_0_RRSSI_M		0x00fc0000
+#define AR_PHY_RADAR_0_RRSSI_S		18
+#define AR_PHY_RADAR_0_FIRPWR_M		0x7f000000
+#define AR_PHY_RADAR_0_FIRPWR_S		24
+
+/* Bits for AR_PHY_RADAR_1. */
+#define AR_PHY_RADAR_1_RELPWR_ENA	0x00800000
+#define AR_PHY_RADAR_1_USE_FIR128	0x00400000
+#define AR_PHY_RADAR_1_RELPWR_THRESH_M	0x003f0000
+#define AR_PHY_RADAR_1_RELPWR_THRESH_S	16
+#define AR_PHY_RADAR_1_BLOCK_CHECK	0x00008000
+#define AR_PHY_RADAR_1_MAX_RRSSI	0x00004000
+#define AR_PHY_RADAR_1_RELSTEP_CHECK	0x00002000
+#define AR_PHY_RADAR_1_RELSTEP_THRESH_M	0x00001f00
+#define AR_PHY_RADAR_1_RELSTEP_THRESH_S	8
+#define AR_PHY_RADAR_1_MAXLEN_M		0x000000ff
+#define AR_PHY_RADAR_1_MAXLEN_S		0
+
+/* Bits for AR_PHY_SIGMA_DELTA. */
+#define AR_PHY_SIGMA_DELTA_ADC_SEL_M	0x00000003
+#define AR_PHY_SIGMA_DELTA_ADC_SEL_S	0
+#define AR_PHY_SIGMA_DELTA_FILT2_M	0x000000f8
+#define AR_PHY_SIGMA_DELTA_FILT2_S	3
+#define AR_PHY_SIGMA_DELTA_FILT1_M	0x00001f00
+#define AR_PHY_SIGMA_DELTA_FILT1_S	8
+#define AR_PHY_SIGMA_DELTA_ADC_CLIP_M	0x01ffe000
+#define AR_PHY_SIGMA_DELTA_ADC_CLIP_S	13
+
+/* Bits for AR_PHY_RESTART. */
+#define AR_PHY_RESTART_DIV_GC_M	0x001c0000
+#define AR_PHY_RESTART_DIV_GC_S	18
+
+/* Bits for AR_PHY_RFBUS_REQ. */
+#define AR_PHY_RFBUS_REQ_EN	0x00000001
+
+/* Bits for AR_PHY_TIMING11. */
+#define	AR_PHY_TIMING11_SPUR_DELTA_PHASE_M	0x000fffff
+#define	AR_PHY_TIMING11_SPUR_DELTA_PHASE_S	0
+#define	AR_PHY_TIMING11_SPUR_FREQ_SD_M		0x3ff00000
+#define	AR_PHY_TIMING11_SPUR_FREQ_SD_S		20
+#define AR_PHY_TIMING11_USE_SPUR_IN_AGC		0x40000000
+#define AR_PHY_TIMING11_USE_SPUR_IN_SELFCOR	0x80000000
+
+/* Bits for AR_PHY_NEW_ADC_DC_GAIN_CORR(). */
+#define AR_PHY_NEW_ADC_GAIN_CORR_ENABLE		0x40000000
+#define AR_PHY_NEW_ADC_DC_OFFSET_CORR_ENABLE	0x80000000
+
+/* Bits for AR_PHY_EXT_CCA0. */
+#define AR_PHY_EXT_CCA0_THRESH62_M	0x000000ff
+#define AR_PHY_EXT_CCA0_THRESH62_S	0
+
+/* Bits for AR_PHY_EXT_CCA. */
+#define AR_PHY_EXT_MAXCCA_PWR_M		0x000001ff
+#define AR_PHY_EXT_MAXCCA_PWR_S		0
+#define AR_PHY_EXT_CCA_CYCPWR_THR1_M	0x0000fe00
+#define AR_PHY_EXT_CCA_CYCPWR_THR1_S	9
+#define AR_PHY_EXT_CCA_THRESH62_M	0x007f0000
+#define AR_PHY_EXT_CCA_THRESH62_S	16
+#define AR_PHY_EXT_MINCCA_PWR_M		0xff800000
+#define AR_PHY_EXT_MINCCA_PWR_S		23
+#define AR9280_PHY_EXT_MINCCA_PWR_M	0x01ff0000
+#define AR9280_PHY_EXT_MINCCA_PWR_S	16
+
+/* Bits for AR_PHY_SFCORR_EXT. */
+#define AR_PHY_SFCORR_EXT_M1_THRESH_M		0x0000007f
+#define AR_PHY_SFCORR_EXT_M1_THRESH_S		0
+#define AR_PHY_SFCORR_EXT_M2_THRESH_M		0x00003f80
+#define AR_PHY_SFCORR_EXT_M2_THRESH_S		7
+#define AR_PHY_SFCORR_EXT_M1_THRESH_LOW_M	0x001fc000
+#define AR_PHY_SFCORR_EXT_M1_THRESH_LOW_S	14
+#define AR_PHY_SFCORR_EXT_M2_THRESH_LOW_M	0x0fe00000
+#define AR_PHY_SFCORR_EXT_M2_THRESH_LOW_S	21
+#define AR_PHY_SFCORR_SPUR_SUBCHNL_SD_M		0xf0000000
+#define AR_PHY_SFCORR_SPUR_SUBCHNL_SD_S		28
+
+/* Bits for AR_PHY_HALFGI. */
+#define AR_PHY_HALFGI_DSC_EXP_M	0x0000000f
+#define AR_PHY_HALFGI_DSC_EXP_S	0
+#define AR_PHY_HALFGI_DSC_MAN_M	0x0007fff0
+#define AR_PHY_HALFGI_DSC_MAN_S	4
+
+/* Bits for AR_PHY_CHAN_INFO_MEMORY. */
+#define AR_PHY_CHAN_INFO_MEMORY_CAPTURE_MASK	0x0001
+
+/* Bits for AR_PHY_HEAVY_CLIP_FACTOR_RIFS. */
+#define AR_PHY_RIFS_INIT_DELAY_M	0x03ff0000
+#define AR_PHY_RIFS_INIT_DELAY_S	16
+
+/* Bits for AR_PHY_CALMODE. */
+#define AR_PHY_CALMODE_IQ		0x00000000
+#define AR_PHY_CALMODE_ADC_GAIN		0x00000001
+#define AR_PHY_CALMODE_ADC_DC_PER	0x00000002
+#define AR_PHY_CALMODE_ADC_DC_INIT	0x00000003
+
+/* Bits for AR_PHY_RFBUS_GRANT. */
+#define AR_PHY_RFBUS_GRANT_EN	0x00000001
+
+/* Bits for AR_PHY_CHAN_INFO_GAIN_DIFF. */
+#define AR_PHY_CHAN_INFO_GAIN_DIFF_UPPER_LIMIT	320
+
+/* Bits for AR_PHY_MODE. */
+#define AR_PHY_MODE_ASYNCFIFO		0x00000080
+#define AR_PHY_MODE_AR2133		0x00000008
+#define AR_PHY_MODE_AR5111		0x00000000
+#define AR_PHY_MODE_AR5112		0x00000008
+#define AR_PHY_MODE_DYNAMIC		0x00000004
+#define AR_PHY_MODE_RF2GHZ		0x00000002
+#define AR_PHY_MODE_RF5GHZ		0x00000000
+#define AR_PHY_MODE_CCK			0x00000001
+#define AR_PHY_MODE_OFDM		0x00000000
+#define AR_PHY_MODE_DYN_CCK_DISABLE	0x00000100
+
+/* Bits for AR_PHY_CCK_TX_CTRL. */
+#define AR_PHY_CCK_TX_CTRL_JAPAN		0x00000010
+#define AR_PHY_CCK_TX_CTRL_TX_DAC_SCALE_CCK_M	0x0000000c
+#define AR_PHY_CCK_TX_CTRL_TX_DAC_SCALE_CCK_S	2
+
+/* Bits for AR_PHY_CCK_DETECT. */
+#define AR_PHY_CCK_DETECT_WEAK_SIG_THR_CCK_M		0x0000003f
+#define AR_PHY_CCK_DETECT_WEAK_SIG_THR_CCK_S		0
+#define AR_PHY_CCK_DETECT_ANT_SWITCH_TIME_M		0x00001fc0
+#define AR_PHY_CCK_DETECT_ANT_SWITCH_TIME_S		6
+#define AR_PHY_CCK_DETECT_BB_ENABLE_ANT_FAST_DIV	0x00002000
+
+/* Bits for AR_PHY_GAIN_2GHZ. */
+#define AR_PHY_GAIN_2GHZ_RXTX_MARGIN_M		0x00fc0000
+#define AR_PHY_GAIN_2GHZ_RXTX_MARGIN_S		18
+#define AR_PHY_GAIN_2GHZ_BSW_MARGIN_M		0x00003c00
+#define AR_PHY_GAIN_2GHZ_BSW_MARGIN_S		10
+#define AR_PHY_GAIN_2GHZ_BSW_ATTEN_M		0x0000001f
+#define AR_PHY_GAIN_2GHZ_BSW_ATTEN_S		0
+#define AR_PHY_GAIN_2GHZ_XATTEN2_MARGIN_M	0x003e0000
+#define AR_PHY_GAIN_2GHZ_XATTEN2_MARGIN_S	17
+#define AR_PHY_GAIN_2GHZ_XATTEN1_MARGIN_M	0x0001f000
+#define AR_PHY_GAIN_2GHZ_XATTEN1_MARGIN_S	12
+#define AR_PHY_GAIN_2GHZ_XATTEN2_DB_M		0x00000fc0
+#define AR_PHY_GAIN_2GHZ_XATTEN2_DB_S		6
+#define AR_PHY_GAIN_2GHZ_XATTEN1_DB_M		0x0000003f
+#define AR_PHY_GAIN_2GHZ_XATTEN1_DB_S		0
+
+/* Bit for AR_PHY_CCK_RXCTRL4. */
+#define AR_PHY_CCK_RXCTRL4_FREQ_EST_SHORT_M	0x01f80000
+#define AR_PHY_CCK_RXCTRL4_FREQ_EST_SHORT_S	19
+
+/* Bits for AR_PHY_DAG_CTRLCCK. */
+#define AR_PHY_DAG_CTRLCCK_EN_RSSI_THR	0x00000200
+#define AR_PHY_DAG_CTRLCCK_RSSI_THR_M	0x0001fc00
+#define AR_PHY_DAG_CTRLCCK_RSSI_THR_S	10
+
+/* Bits for AR_PHY_FORCE_CLKEN_CCK. */
+#define AR_PHY_FORCE_CLKEN_CCK_MRC_MUX	0x00000040
+
+/* Bits for AR_PHY_TPCRG1. */
+#define AR_PHY_TPCRG1_NUM_PD_GAIN_M	0x0000c000
+#define AR_PHY_TPCRG1_NUM_PD_GAIN_S	14
+#define AR_PHY_TPCRG1_PD_GAIN_1_M	0x00030000
+#define AR_PHY_TPCRG1_PD_GAIN_1_S	16
+#define AR_PHY_TPCRG1_PD_GAIN_2_M	0x000c0000
+#define AR_PHY_TPCRG1_PD_GAIN_2_S	18
+#define AR_PHY_TPCRG1_PD_GAIN_3_M	0x00300000
+#define AR_PHY_TPCRG1_PD_GAIN_3_S	20
+#define AR_PHY_TPCRG1_PD_CAL_ENABLE	0x00400000
+
+/* Bits for AR_PHY_TX_PWRCTRL4. */
+#define AR_PHY_TX_PWRCTRL_PD_AVG_VALID	0x00000001
+#define AR_PHY_TX_PWRCTRL_PD_AVG_OUT_M	0x000001fe
+#define AR_PHY_TX_PWRCTRL_PD_AVG_OUT_S	1
+
+/* Bits for AR_PHY_TX_PWRCTRL6_[01]. */
+#define AR_PHY_TX_PWRCTRL_ERR_EST_MODE_M	0x03000000
+#define AR_PHY_TX_PWRCTRL_ERR_EST_MODE_S	24
+
+/* Bits for AR_PHY_TX_PWRCTRL7. */
+#define AR_PHY_TX_PWRCTRL_TX_GAIN_TAB_MAX_M	0x0007e000
+#define AR_PHY_TX_PWRCTRL_TX_GAIN_TAB_MAX_S	13
+#define AR_PHY_TX_PWRCTRL_INIT_TX_GAIN_M	0x01f80000
+#define AR_PHY_TX_PWRCTRL_INIT_TX_GAIN_S	19
+
+/* Bits for AR_PHY_TX_PWRCTRL9. */
+#define AR_PHY_TX_DESIRED_SCALE_CCK_M		0x00007c00
+#define AR_PHY_TX_DESIRED_SCALE_CCK_S		10	/* XXX should be 9? */
+#define AR_PHY_TX_PWRCTRL9_RES_DC_REMOVAL	0x80000000
+
+/* Bits for AR_PHY_TX_GAIN_TBL. */
+#define AR_PHY_TX_GAIN_CLC_M	0x0000001e
+#define AR_PHY_TX_GAIN_CLC_S	1
+#define AR_PHY_TX_GAIN_M	0x0007f000
+#define AR_PHY_TX_GAIN_S	12
+
+/* Bits for AR_PHY_SPUR_REG. */
+#define AR_PHY_SPUR_REG_MASK_RATE_CNTL		0x03fc0000
+#define AR_PHY_SPUR_REG_ENABLE_MASK_PPM		0x00020000
+#define AR_PHY_SPUR_REG_MASK_RATE_SELECT	0x0001fe00
+#define AR_PHY_SPUR_REG_ENABLE_VIT_SPUR_RSSI	0x00000100
+#define AR_PHY_SPUR_REG_SPUR_RSSI_THRESH_M	0x0000007f
+#define AR_PHY_SPUR_REG_SPUR_RSSI_THRESH_S	0
+#define AR_SPUR_RSSI_THRESH			40
+
+/* Bits for AR_PHY_ANALOG_SWAP. */
+#define AR_PHY_SWAP_ALT_CHAIN	0x00000040
+
+/* Bits for AR_PHY_TPCRG5. */
+#define AR_PHY_TPCRG5_PD_GAIN_OVERLAP_M		0x0000000f
+#define AR_PHY_TPCRG5_PD_GAIN_OVERLAP_S		0
+#define AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_1_M	0x000003f0
+#define AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_1_S	4
+#define AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_2_M	0x0000fc00
+#define AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_2_S	10
+#define AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_3_M	0x003f0000
+#define AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_3_S	16
+#define AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_4_M	0x0fc00000
+#define AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_4_S	22
+
+/* Bits for AR_PHY_CL_CAL_CTL. */
+#define AR_PHY_PARALLEL_CAL_ENABLE	0x00000001
+#define AR_PHY_CL_CAL_ENABLE		0x00000002
+
+/* Bits for AR_PHY_CLC_TBL. */
+#define AR_PHY_CLC_Q0_M		0x0000ffd0
+#define AR_PHY_CLC_Q0_S		5
+#define AR_PHY_CLC_I0_M		0x07ff0000
+#define AR_PHY_CLC_I0_S		16
+
+/* Bits for AR_PHY_XPA_CFG. */
+#define AR_PHY_FORCE_XPA_CFG	0x000000001
+
+/* Bits for AR_PHY_CH[01]_TX_PWRCTRL11. */
+#define AR_PHY_TX_PWRCTRL_OLPC_TEMP_COMP_M	0x0000fc00
+#define AR_PHY_TX_PWRCTRL_OLPC_TEMP_COMP_S	10
+#define AR_PHY_TX_PWRCTRL_OLPC_PWR_M		0x00ff0000
+#define AR_PHY_TX_PWRCTRL_OLPC_PWR_S		16
+
+/* Bits for AR_PHY_NEW_ADC_DC_GAIN_CORR. */
+#define AR_PHY_NEW_ADC_DC_GAIN_QGAIN_M	0x0000003f
+#define AR_PHY_NEW_ADC_DC_GAIN_QGAIN_S	0
+#define AR_PHY_NEW_ADC_DC_GAIN_IGAIN_M	0x00000fc0
+#define AR_PHY_NEW_ADC_DC_GAIN_IGAIN_S	6
+#define AR_PHY_NEW_ADC_DC_GAIN_QDC_M	0x001ff000
+#define AR_PHY_NEW_ADC_DC_GAIN_QDC_S	12
+#define AR_PHY_NEW_ADC_DC_GAIN_IDC_M	0x3fe00000
+#define AR_PHY_NEW_ADC_DC_GAIN_IDC_S	21
+
+#define AR_BASE_PHY_ACTIVE_DELAY	100
+
+#define AR_CLOCK_RATE_CCK	22
+#define AR_CLOCK_RATE_5GHZ_OFDM	40
+#define AR_CLOCK_RATE_2GHZ_OFDM	44
+
+#define AR_PWR_DECREASE_FOR_2_CHAIN	6	/* 10 * log10(2) * 2 */
+#define AR_PWR_DECREASE_FOR_3_CHAIN	9	/* 10 * log10(3) * 2 */
+
+#define AR_SLEEP_SLOP	3	/* TUs */
+
+#define AR_MIN_BEACON_TIMEOUT_VAL	1
+#define AR_FUDGE			2
+/* Divides by 1024 (usecs to TU) without doing 64-bit arithmetic. */
+#define AR_TSF_TO_TU(hi, lo)	((hi) << 22 | (lo) >> 10)
+
+#define AR_KEY_CACHE_SIZE		128
+#define AR_RSVD_KEYTABLE_ENTRIES	4
+
+#define AR_CAL_SAMPLES	64	/* XXX AR9280? */
+#define AR_MAX_LOG_CAL	2	/* XXX AR9280? */
+
+#pragma pack on
+/*
+ * Tx DMA descriptor.
+ */
+struct ar_tx_desc {
+	uint32_t	ds_link;
+	uint32_t	ds_data;
+	uint32_t	ds_ctl0;
+	uint32_t	ds_ctl1;
+	uint32_t	ds_ctl2;
+	uint32_t	ds_ctl3;
+	uint32_t	ds_ctl4;
+	uint32_t	ds_ctl5;
+	uint32_t	ds_ctl6;
+	uint32_t	ds_ctl7;
+	uint32_t	ds_ctl8;
+	uint32_t	ds_ctl9;
+	uint32_t	ds_ctl10;
+	uint32_t	ds_ctl11;
+	uint32_t	ds_status0;
+	uint32_t	ds_status1;
+	uint32_t	ds_tstamp;
+	uint32_t	ds_ba_bitmap_lo;
+	uint32_t	ds_ba_bitmap_hi;
+	uint32_t	ds_evm0;
+	uint32_t	ds_evm1;
+	uint32_t	ds_evm2;
+	uint32_t	ds_status8;
+	uint32_t	ds_status9;
+	/*
+	 * Padding to make Tx descriptors 128 bytes such that they will
+	 * not cross a 4KB boundary.
+	 */
+	uint32_t	pad[8];
+} __packed;
+
+/* Bits for ds_ctl0. */
+#define AR_TXC0_FRAME_LEN_M		0x00000fff
+#define AR_TXC0_FRAME_LEN_S		0
+#define AR_TXC0_VIRT_MORE_FRAG		0x00001000
+#define AR_TXC0_XMIT_POWER_M		0x003f0000
+#define AR_TXC0_XMIT_POWER_S		16
+#define AR_TXC0_RTS_ENABLE		0x00400000
+#define AR_TXC0_VEOL			0x00800000
+#define AR_TXC0_CLR_DEST_MASK		0x01000000
+#define AR_TXC0_INTR_REQ		0x20000000
+#define AR_TXC0_DEST_IDX_VALID		0x40000000
+#define AR_TXC0_CTS_ENABLE		0x80000000
+
+/* Bits for ds_ctl1. */
+#define AR_TXC1_BUF_LEN_M		0x00000fff
+#define AR_TXC1_BUF_LEN_S		0
+#define AR_TXC1_MORE			0x00001000
+#define AR_TXC1_DEST_IDX_M		0x000fe000
+#define AR_TXC1_DEST_IDX_S		13
+#define AR_TXC1_FRAME_TYPE_M		0x00f00000
+#define AR_TXC1_FRAME_TYPE_S		20
+#define AR_FRAME_TYPE_NORMAL		0
+#define AR_FRAME_TYPE_ATIM		1
+#define AR_FRAME_TYPE_PSPOLL		2
+#define AR_FRAME_TYPE_BEACON		3
+#define AR_FRAME_TYPE_PROBE_RESP	4
+#define AR_TXC1_NO_ACK			0x01000000
+#define AR_TXC1_INSERT_TS		0x02000000
+#define AR_TXC1_EXT_ONLY		0x08000000
+#define AR_TXC1_EXT_AND_CTL		0x10000000
+#define AR_TXC1_MORE_AGGR		0x20000000
+#define AR_TXC1_IS_AGGR			0x40000000
+
+/* Bits for ds_ctl2. */
+#define AR_TXC2_BURST_DUR_M		0x00007fff
+#define AR_TXC2_BURST_DUR_S		0
+#define AR_TXC2_DUR_UPDATE_ENA		0x00008000
+#define AR_TXC2_XMIT_DATA_TRIES0_M	0x000f0000
+#define AR_TXC2_XMIT_DATA_TRIES0_S	16
+#define AR_TXC2_XMIT_DATA_TRIES1_M	0x00f00000
+#define AR_TXC2_XMIT_DATA_TRIES1_S	20
+#define AR_TXC2_XMIT_DATA_TRIES2_M	0x0f000000
+#define AR_TXC2_XMIT_DATA_TRIES2_S	24
+#define AR_TXC2_XMIT_DATA_TRIES3_M	0xf0000000
+#define AR_TXC2_XMIT_DATA_TRIES3_S	28
+
+/* Bits for ds_ctl3. */
+#define AR_TXC3_XMIT_RATE0_M		0x000000ff
+#define AR_TXC3_XMIT_RATE0_S		0
+#define AR_TXC3_XMIT_RATE1_M		0x0000ff00
+#define AR_TXC3_XMIT_RATE1_S		8
+#define AR_TXC3_XMIT_RATE2_M		0x00ff0000
+#define AR_TXC3_XMIT_RATE2_S		16
+#define AR_TXC3_XMIT_RATE3_M		0xff000000
+#define AR_TXC3_XMIT_RATE3_S		24
+
+/* Bits for ds_ctl4. */
+#define AR_TXC4_PACKET_DUR0_M		0x00007fff
+#define AR_TXC4_PACKET_DUR0_S		0
+#define AR_TXC4_RTSCTS_QUAL0		0x00008000
+#define AR_TXC4_PACKET_DUR1_M		0x7fff0000
+#define AR_TXC4_PACKET_DUR1_S		16
+#define AR_TXC4_RTSCTS_QUAL1		0x80000000
+/* Shortcut. */
+#define AR_TXC4_RTSCTS_QUAL01	\
+	(AR_TXC4_RTSCTS_QUAL0 | AR_TXC4_RTSCTS_QUAL1)
+
+/* Bits for ds_ctl5. */
+#define AR_TXC5_PACKET_DUR2_M		0x00007fff
+#define AR_TXC5_PACKET_DUR2_S		0
+#define AR_TXC5_RTSCTS_QUAL2		0x00008000
+#define AR_TXC5_PACKET_DUR3_M		0x7fff0000
+#define AR_TXC5_PACKET_DUR3_S		16
+#define AR_TXC5_RTSCTS_QUAL3		0x80000000
+/* Shortcut. */
+#define AR_TXC5_RTSCTS_QUAL23	\
+	(AR_TXC5_RTSCTS_QUAL2 | AR_TXC5_RTSCTS_QUAL3)
+
+/* Bits for ds_ctl6. */
+#define AR_TXC6_AGGR_LEN_M		0x0000ffff
+#define AR_TXC6_AGGR_LEN_S		0
+#define AR_TXC6_PAD_DELIM_M		0x03fc0000
+#define AR_TXC6_PAD_DELIM_S		18
+#define AR_TXC6_ENCR_TYPE_M		0x0c000000
+#define AR_TXC6_ENCR_TYPE_S		26
+#define AR_ENCR_TYPE_CLEAR		0
+#define AR_ENCR_TYPE_WEP		1
+#define AR_ENCR_TYPE_AES		2
+#define AR_ENCR_TYPE_TKIP		3
+
+/* Bits for ds_ctl7. */
+#define AR_TXC7_2040_0			0x00000001
+#define AR_TXC7_GI0			0x00000002
+#define AR_TXC7_CHAIN_SEL0_M		0x0000001c
+#define AR_TXC7_CHAIN_SEL0_S		2
+#define AR_TXC7_2040_1			0x00000020
+#define AR_TXC7_GI1			0x00000040
+#define AR_TXC7_CHAIN_SEL1_M		0x00000380
+#define AR_TXC7_CHAIN_SEL1_S		7
+#define AR_TXC7_2040_2			0x00000400
+#define AR_TXC7_GI2			0x00000800
+#define AR_TXC7_CHAIN_SEL2_M		0x00007000
+#define AR_TXC7_CHAIN_SEL2_S		12
+#define AR_TXC7_2040_3			0x00008000
+#define AR_TXC7_GI3			0x00010000
+#define AR_TXC7_CHAIN_SEL3_M		0x000e0000
+#define AR_TXC7_CHAIN_SEL3_S		17
+#define AR_TXC7_RTSCTS_RATE_M		0x0ff00000
+#define AR_TXC7_RTSCTS_RATE_S		20
+/* Shortcuts. */
+#define AR_TXC7_2040_0123	\
+	(AR_TXC7_2040_0 | AR_TXC7_2040_1 | AR_TXC7_2040_2 | AR_TXC7_2040_3)
+#define AR_TXC7_GI0123		\
+	(AR_TXC7_GI0 | AR_TXC7_GI1 | AR_TXC7_GI2 | AR_TXC7_GI3)
+
+/* Bits for ds_status0. */
+#define AR_TXS0_RSSI_ANT0(i)		(((x) >> ((i) * 8)) & 0xff)
+#define AR_TXS0_BA_STATUS		0x40000000
+
+/* Bits for ds_status1. */
+#define AR_TXS1_FRM_XMIT_OK		0x00000001
+#define AR_TXS1_EXCESSIVE_RETRIES	0x00000002
+#define AR_TXS1_FIFO_UNDERRUN		0x00000004
+#define AR_TXS1_FILTERED		0x00000008
+#define AR_TXS1_RTS_FAIL_CNT_M		0x000000f0
+#define AR_TXS1_RTS_FAIL_CNT_S		4
+#define AR_TXS1_DATA_FAIL_CNT_M		0x00000f00
+#define AR_TXS1_DATA_FAIL_CNT_S		8
+#define AR_TXS1_VIRT_RETRY_CNT_M	0x0000f000
+#define AR_TXS1_VIRT_RETRY_CNT_S	12
+#define AR_TXS1_TX_DELIM_UNDERRUN	0x00010000
+#define AR_TXS1_TX_DATA_UNDERRUN	0x00020000
+#define AR_TXS1_DESC_CFG_ERR		0x00040000
+#define AR_TXS1_TX_TIMER_EXPIRED	0x00080000
+/* Shortcuts. */
+#define AR_TXS1_UNDERRUN		\
+	(AR_TXS1_FIFO_UNDERRUN |	\
+	 AR_TXS1_TX_DELIM_UNDERRUN |	\
+	 AR_TXS1_TX_DATA_UNDERRUN)
+
+/* Bits for ds_status9. */
+#define AR_TXS9_DONE			0x00000001
+#define AR_TXS9_SEQNUM_M		0x00001ffe
+#define AR_TXS9_SEQNUM_S		1
+#define AR_TXS9_TXOP_EXCEEDED		0x00020000
+#define AR_TXS9_FINAL_IDX_M		0x00600000
+#define AR_TXS9_FINAL_IDX_S		21
+#define AR_TXS9_POWER_MGMT		0x02000000
+
+/*
+ * Rx DMA descriptor.
+ */
+struct ar_rx_desc {
+	uint32_t	ds_link;
+	uint32_t	ds_data;
+	uint32_t	ds_ctl0;
+	uint32_t	ds_ctl1;
+	uint32_t	ds_status0;
+	uint32_t	ds_status1;
+	uint32_t	ds_status2;
+	uint32_t	ds_status3;
+	uint32_t	ds_status4;
+	uint32_t	ds_status5;
+	uint32_t	ds_status6;
+	uint32_t	ds_status7;
+	uint32_t	ds_status8;
+	/*
+	 * Padding to make Rx descriptors 64 bytes such that they will
+	 * not cross a 4KB boundary.
+	 */
+	uint32_t	pad[3];
+} __packed;
+
+/* Bits for ds_ctl1. */
+#define AR_RXC1_BUF_LEN_M		0x00000fff
+#define AR_RXC1_BUF_LEN_S		0
+#define AR_RXC1_INTR_REQ		0x00002000
+
+/* Bits for ds_ctl2. */
+#define AR_RXS0_RSSI_ANT00(x)		(((x) >>  0) & 0xff)
+#define AR_RXS0_RSSI_ANT01(x)		(((x) >>  8) & 0xff)
+#define AR_RXS0_RSSI_ANT02(x)		(((x) >> 16) & 0xff)
+#define AR_RXS0_RATE_M			0xff000000
+#define AR_RXS0_RATE_S			24
+
+/* Bits for ds_status1. */
+#define AR_RXS1_DATA_LEN_M		0x00000fff
+#define AR_RXS1_DATA_LEN_S		0
+#define AR_RXS1_MORE			0x00001000
+
+/* Bits for ds_status3. */
+#define AR_RXS3_GI			0x00000001
+#define AR_RXS3_2040			0x00000002
+#define AR_RXS3_PARALLEL_40		0x00000004
+#define AR_RXS3_ANTENNA_M		0xffffff00
+#define AR_RXS3_ANTENNA_S		8
+#define AR_RXS3_RATE_M			0x000003fc
+#define AR_RXS3_RATE_S			2
+
+/* Bits for ds_status4. */
+#define AR_RXS4_RSSI_COMBINED_M		0xff000000
+#define AR_RXS4_RSSI_COMBINED_S		24
+
+/* Bits for ds_status8. */
+#define AR_RXS8_DONE			0x00000001
+#define AR_RXS8_FRAME_OK		0x00000002
+#define AR_RXS8_CRC_ERR			0x00000004
+#define AR_RXS8_DECRYPT_CRC_ERR		0x00000008
+#define AR_RXS8_PHY_ERR			0x00000010
+#define AR_RXS8_MICHAEL_ERR		0x00000020
+#define AR_RXS8_PRE_DELIM_CRC_ERR	0x00000040
+#define AR_RXS8_PHY_ERR_CODE_M		0x0000ff00
+#define AR_RXS8_PHY_ERR_CODE_S		8
+#define AR_RXS8_KEY_IDX_VALID		0x00000100
+#define AR_RXS8_KEY_IDX_M		0x0000fe00
+#define AR_RXS8_KEY_IDX_S		9
+#define AR_RXS8_POST_DELIM_CRC_ERR	0x00040000
+#define AR_RXS8_DECRYPT_BUSY_ERR	0x40000000
+
+
+/* Maximum number of chains supported by any chipset. */
+#define AR_MAX_CHAINS	3
+
+/* Default number of key cache entries. */
+#define AR_KEYTABLE_SIZE	128
+
+/* GPIO pins. */
+#define AR_GPIO_WLANACTIVE_PIN	5
+#define AR_GPIO_BTACTIVE_PIN	6
+#define AR_GPIO_BTPRIORITY_PIN	7
+
+/* XXX need to cleanup that mess. */
+#define AR_SREV_5416(sc) \
+	((sc)->mac_ver == AR_SREV_VERSION_5416_PCI || \
+	 (sc)->mac_ver == AR_SREV_VERSION_5416_PCIE)
+#define AR_SREV_5416_20_OR_LATER(sc) \
+	((AR_SREV_5416(sc) && \
+	  (sc)->mac_rev >= AR_SREV_REVISION_5416_20) || \
+	 (sc)->mac_ver >= AR_SREV_VERSION_9100)
+#define AR_SREV_5416_22_OR_LATER(sc) \
+	((AR_SREV_5416(sc) && \
+	  (sc)->mac_rev >= AR_SREV_REVISION_5416_22) || \
+	 (sc)->mac_ver >= AR_SREV_VERSION_9100)
+
+#define AR_SREV_9160(sc) \
+	((sc)->mac_ver == AR_SREV_VERSION_9160)
+#define AR_SREV_9160_10_OR_LATER(sc) \
+	((sc)->mac_ver >= AR_SREV_VERSION_9160)
+#define AR_SREV_9160_11(sc) \
+	(AR_SREV_9160(sc) && \
+	 (sc)->mac_rev == AR_SREV_REVISION_9160_11)
+
+#define AR_SREV_9280(sc) \
+	((sc)->mac_ver == AR_SREV_VERSION_9280)
+#define AR_SREV_9280_10_OR_LATER(sc) \
+	((sc)->mac_ver >= AR_SREV_VERSION_9280)
+#define AR_SREV_9280_10(sc) \
+	(AR_SREV_9280(sc) && \
+	 (sc)->mac_rev == AR_SREV_REVISION_9280_10)
+#define AR_SREV_9280_20(sc) \
+	(AR_SREV_9280(sc) && \
+	 (sc)->mac_rev >= AR_SREV_REVISION_9280_20)
+#define AR_SREV_9280_20_OR_LATER(sc) \
+	((sc)->mac_ver > AR_SREV_VERSION_9280 || \
+	 (AR_SREV_9280(sc) && (sc)->mac_rev >= AR_SREV_REVISION_9280_20))
+
+#define AR_SREV_9285(sc) \
+	((sc)->mac_ver == AR_SREV_VERSION_9285)
+#define AR_SREV_9285_10_OR_LATER(sc) \
+	((sc)->mac_ver >= AR_SREV_VERSION_9285)
+#define AR_SREV_9285_11(sc) \
+	(AR_SREV_9285(sc) && \
+	 (sc)->mac_rev == AR_SREV_REVISION_9285_11)
+#define AR_SREV_9285_11_OR_LATER(sc) \
+	((sc)->mac_ver > AR_SREV_VERSION_9285 || \
+	 (AR_SREV_9285(sc) && (sc)->mac_rev >= AR_SREV_REVISION_9285_11))
+#define AR_SREV_9285_12(sc) \
+	(AR_SREV_9285(sc) && \
+	 ((sc)->mac_rev == AR_SREV_REVISION_9285_12))
+#define AR_SREV_9285_12_OR_LATER(sc) \
+	((sc)->mac_ver > AR_SREV_VERSION_9285 || \
+	 (AR_SREV_9285(sc) && (sc)->mac_rev >= AR_SREV_REVISION_9285_12))
+
+#define AR_SREV_9287(sc) \
+	((sc)->mac_ver == AR_SREV_VERSION_9287)
+#define AR_SREV_9287_10_OR_LATER(sc) \
+	((sc)->mac_ver >= AR_SREV_VERSION_9287)
+#define AR_SREV_9287_10(sc) \
+	((sc)->mac_ver == AR_SREV_VERSION_9287 && \
+	 (sc)->mac_rev == AR_SREV_REVISION_9287_10)
+#define AR_SREV_9287_11(sc) \
+	((sc)->mac_ver == AR_SREV_VERSION_9287 && \
+	 (sc)->mac_rev == AR_SREV_REVISION_9287_11)
+#define AR_SREV_9287_11_OR_LATER(sc) \
+	((sc)->mac_ver > AR_SREV_VERSION_9287 || \
+	 (AR_SREV_9287(sc) && (sc)->mac_rev >= AR_SREV_REVISION_9287_11))
+#define AR_SREV_9287_12(sc) \
+	((sc)->mac_ver == AR_SREV_VERSION_9287 && \
+	 (sc)->mac_rev == AR_SREV_REVISION_9287_12)
+#define AR_SREV_9287_12_OR_LATER(sc) \
+	((sc)->mac_ver > AR_SREV_VERSION_9287 || \
+	 (AR_SREV_9287(sc) && (sc)->mac_rev >= AR_SREV_REVISION_9287_12))
+
+#define AR_SINGLE_CHIP(sc)	AR_SREV_9280_10_OR_LATER(sc)
+
+#define AR_RADIO_SREV_MAJOR	0xf0
+#define AR_RAD5133_SREV_MAJOR	0xc0
+#define AR_RAD2133_SREV_MAJOR	0xd0
+#define AR_RAD5122_SREV_MAJOR	0xe0
+#define AR_RAD2122_SREV_MAJOR	0xf0
+
+/*
+ * Common ROM structures.
+ */
+#define AR_EEPROM_MAGIC_OFFSET	0x0000
+#ifdef BIG_ENDIAN
+#define AR_EEPROM_MAGIC		0x5aa5
+#else
+#define AR_EEPROM_MAGIC		0xa55a
+#endif
+
+#define AR_BCHAN_UNUSED		0xff
+#define AR_NO_SPUR		0x8000
+
+#define AR_NUM_PDADC_VALUES	128
+#define AR_PD_GAINS_IN_MASK	4	/* NB: Max for all chips. */
+
+#define AR_MAX_PWR_RANGE_IN_HALF_DB	64
+
+#define AR_MAX_RATE_POWER	63
+
+#define AR_HT40_POWER_INC_FOR_PDADC	2
+
+#define AR_EEPROM_MODAL_SPURS	5
+
+#define AR_BASE_FREQ_2GHZ	2300
+#define AR_BASE_FREQ_5GHZ	4900
+
+#define AR_PWR_TABLE_OFFSET_DB		(-5)
+
+/* XXX does not belong here!!! */
+#define AR9285_PD_GAIN_BOUNDARY_DEFAULT	58
+#define AR9280_TX_GAIN_TABLE_SIZE	22
+
+#define AR_EEP_TXGAIN_ORIGINAL		0
+#define AR_EEP_TXGAIN_HIGH_POWER	1
+
+/*
+ * ROM header that is common to all existing ROM layouts.
+ */
+struct ar_base_eep_header {
+	uint16_t	length;
+	uint16_t	checksum;
+	uint16_t	version;
+#define AR_EEP_VER			0xe
+#define AR_EEP_VER_MINOR_MASK		0x0fff
+#define AR_EEP_MINOR_VER_2		2
+#define AR_EEP_MINOR_VER_3		3
+#define AR_EEP_MINOR_VER_7		7
+#define AR_EEP_MINOR_VER_9		9
+#define AR_EEP_MINOR_VER_10		10
+#define AR_EEP_MINOR_VER_16		16
+#define AR_EEP_MINOR_VER_17		17
+#define AR_EEP_MINOR_VER_19		19
+#define AR_EEP_MINOR_VER_20		20
+#define AR_EEP_MINOR_VER_21		21
+#define AR_EEP_MINOR_VER_22		22
+
+	uint8_t		opCapFlags;
+#define AR_OPFLAGS_11A			0x01
+#define AR_OPFLAGS_11G			0x02
+#define AR_OPFLAGS_11N_5G40		0x04
+#define AR_OPFLAGS_11N_2G40		0x08
+#define AR_OPFLAGS_11N_5G20		0x10
+#define AR_OPFLAGS_11N_2G20		0x20
+/* Shortcut. */
+#define AR_OPFLAGS_11N			0x3c
+
+	uint8_t		eepMisc;
+	uint16_t	regDmn[2];
+	uint8_t		macAddr[6];
+	uint8_t		rxMask;
+	uint8_t		txMask;
+	uint16_t	rfSilent;
+#define AR_EEP_RFSILENT_ENABLED		0x0001
+#define AR_EEP_RFSILENT_GPIO_SEL_M	0x001c
+#define AR_EEP_RFSILENT_GPIO_SEL_S	2
+#define AR_EEP_RFSILENT_POLARITY	0x0002
+
+	uint16_t	blueToothOptions;
+	uint16_t	deviceCap;
+#define AR_EEP_DEVCAP_COMPRESS_DIS	0x0001
+#define AR_EEP_DEVCAP_AES_DIS		0x0002
+#define AR_EEP_DEVCAP_FASTFRAME_DIS	0x0004
+#define AR_EEP_DEVCAP_BURST_DIS		0x0008
+#define AR_EEP_DEVCAP_MAXQCU_M		0x01f0
+#define AR_EEP_DEVCAP_MAXQCU_S		4
+#define AR_EEP_DEVCAP_HEAVY_CLIP_EN	0x0200
+#define AR_EEP_DEVCAP_KC_ENTRIES_M	0xf000
+#define AR_EEP_DEVCAP_KC_ENTRIES_S	12
+
+	uint32_t	binBuildNumber;
+	uint8_t		deviceType;
+} __packed;
+
+struct ar_spur_chan {
+	uint16_t	spurChan;
+	uint8_t		spurRangeLow;
+	uint8_t		spurRangeHigh;
+} __packed;
+
+struct ar_cal_data_per_freq_olpc {
+	uint8_t	pwrPdg[2][5];
+	uint8_t	vpdPdg[2][5];
+	uint8_t	pcdac[2][5];
+	uint8_t	empty[2][5];
+} __packed;
+
+struct ar_cal_target_power_leg {
+	uint8_t	bChannel;
+	uint8_t	tPow2x[4];
+} __packed;
+
+struct ar_cal_target_power_ht {
+	uint8_t	bChannel;
+	uint8_t	tPow2x[8];
+} __packed;
+
+struct ar_cal_ctl_edges {
+	uint8_t	bChannel;
+	uint8_t	tPowerFlag;
+#define AR_CAL_CTL_EDGES_POWER_M	0x3f
+#define AR_CAL_CTL_EDGES_POWER_S	0
+#define AR_CAL_CTL_EDGES_FLAG_M		0xc0
+#define AR_CAL_CTL_EDGES_FLAG_S		6
+} __packed;
+
+#define AR_SD_NO_CTL	0xe0
+#define AR_NO_CTL	0xff
+#define AR_CTL_MODE_M	0x07
+#define AR_CTL_MODE_S	0
+#define AR_CTL_11A	0
+#define AR_CTL_11B	1
+#define AR_CTL_11G	2
+#define AR_CTL_2GHT20	5
+#define AR_CTL_5GHT20	6
+#define AR_CTL_2GHT40	7
+#define AR_CTL_5GHT40	8
+
+/*
+ * Serializer/Deserializer programming for non-PCIe devices.
+ */
+static const uint32_t ar_nonpcie_serdes[] = {
+	0x9248fc00,
+	0x24924924,
+	0x28000029,
+	0x57160824,
+	0x25980579,
+	0x00000000,
+	0x1aaabe40,
+	0xbe105554,
+	0x000e1007
+};
+#pragma pack off
+
+/*
+ * Macros to access registers.
+ */
+#define AR_READ(ctlr, reg)						\
+	csr32r(ctlr, (reg))
+
+#define AR_WRITE(ctlr, reg, val)						\
+	csr32w(ctlr, (reg), (val))
+
+#define AR_SETBITS(ctlr, reg, mask)					\
+	AR_WRITE(sc, reg, AR_READ(sc, reg) | (mask))
+
+#define AR_CLRBITS(ctlr, reg, mask)					\
+	AR_WRITE(sc, reg, AR_READ(sc, reg) & ~(mask))
+
+/*
+ * Macros to access subfields in registers.
+ */
+/* Mask and Shift (getter). */
+#define MS(val, M, S)				\
+	(((val) & M) >> S)
+
+/* Shift and Mask (setter). */
+#define SM(S, M, val)				\
+	(((val) << S) & M)
+
+/* Rewrite. */
+#define RW(var, S, M, val)			\
+	(((var) & ~M) | SM(S, M, val))
+
+
+#define ATHN_DEBUG		1
+#define ATHN_BT_COEXISTENCE	1
+
+#ifdef ATHN_DEBUG
+#define DPRINTF(x)	do { if (athn_debug > 0) print x; } while (0)
+#define DPRINTFN(n, x)	do { if (athn_debug >= (n)) print x; } while (0)
+extern int athn_debug;
+#else
+#define DPRINTF(x)
+#define DPRINTFN(n, x)
+#endif
+
+#define ATHN_RXBUFSZ	3872
+#define ATHN_TXBUFSZ	4096
+
+#define ATHN_NRXBUFS		64
+#define ATHN_NTXBUFS		64	/* Shared between all Tx queues. */
+#define ATHN_MAX_SCATTER	16
+
+/* Software rate indexes. */
+#define ATHN_RIDX_CCK1	0
+#define ATHN_RIDX_CCK2	1
+#define ATHN_RIDX_OFDM6	4
+#define ATHN_RIDX_MCS0	12
+#define ATHN_RIDX_MCS15	27
+#define ATHN_RIDX_MAX	27
+#define ATHN_IS_HT_RIDX(ridx)	((ridx) >= ATHN_RIDX_MCS0)
+
+enum ieee80211_phytype {
+	IEEE80211_T_DS,			/* direct sequence spread spectrum */
+	IEEE80211_T_OFDM,		/* frequency division multiplexing */
+	IEEE80211_T_TURBO,		/* high rate OFDM, aka turbo mode */
+	IEEE80211_T_XR		        /* extended range mode */
+};
+
+static const struct athn_rate {
+	uint8_t	rate;		/* Rate in 500Kbps unit or MCS if 0x80. */
+	uint8_t	hwrate;		/* HW representation. */
+	uint8_t	rspridx;	/* Control Response Frame rate index. */
+	enum	ieee80211_phytype phy;
+} athn_rates[] = {
+	{    2, 0x1b, 0, IEEE80211_T_DS },
+	{    4, 0x1a, 1, IEEE80211_T_DS },
+	{   11, 0x19, 1, IEEE80211_T_DS },
+	{   22, 0x18, 1, IEEE80211_T_DS },
+	{   12, 0x0b, 4, IEEE80211_T_OFDM },
+	{   18, 0x0f, 4, IEEE80211_T_OFDM },
+	{   24, 0x0a, 6, IEEE80211_T_OFDM },
+	{   36, 0x0e, 6, IEEE80211_T_OFDM },
+	{   48, 0x09, 8, IEEE80211_T_OFDM },
+	{   72, 0x0d, 8, IEEE80211_T_OFDM },
+	{   96, 0x08, 8, IEEE80211_T_OFDM },
+	{  108, 0x0c, 8, IEEE80211_T_OFDM },
+	{ 0x80, 0x80, 8, IEEE80211_T_OFDM },
+	{ 0x81, 0x81, 8, IEEE80211_T_OFDM },
+	{ 0x82, 0x82, 8, IEEE80211_T_OFDM },
+	{ 0x83, 0x83, 8, IEEE80211_T_OFDM },
+	{ 0x84, 0x84, 8, IEEE80211_T_OFDM },
+	{ 0x85, 0x85, 8, IEEE80211_T_OFDM },
+	{ 0x86, 0x86, 8, IEEE80211_T_OFDM },
+	{ 0x87, 0x87, 8, IEEE80211_T_OFDM },
+	{ 0x88, 0x88, 8, IEEE80211_T_OFDM },
+	{ 0x89, 0x89, 8, IEEE80211_T_OFDM },
+	{ 0x8a, 0x8a, 8, IEEE80211_T_OFDM },
+	{ 0x8b, 0x8b, 8, IEEE80211_T_OFDM },
+	{ 0x8c, 0x8c, 8, IEEE80211_T_OFDM },
+	{ 0x8d, 0x8d, 8, IEEE80211_T_OFDM },
+	{ 0x8e, 0x8e, 8, IEEE80211_T_OFDM },
+	{ 0x8f, 0x8f, 8, IEEE80211_T_OFDM }
+};
+
+struct athn_series {
+	uint16_t	dur;
+	uint8_t		hwrate;
+};
+
+struct athn_pier {
+	uint8_t		fbin;
+	const uint8_t	*pwr[AR_PD_GAINS_IN_MASK];
+	const uint8_t	*vpd[AR_PD_GAINS_IN_MASK];
+};
+
+/*
+ * Structures used to store initialization values.
+ */
+struct athn_ini {
+	int		nregs;
+	const uint16_t	*regs;
+	const uint32_t	*vals_5g20;
+#ifndef IEEE80211_NO_HT
+	const uint32_t	*vals_5g40;
+	const uint32_t	*vals_2g40;
+#endif
+	const uint32_t	*vals_2g20;
+	int		ncmregs;
+	const uint16_t	*cmregs;
+	const uint32_t	*cmvals;
+};
+
+struct athn_gain {
+	int		nregs;
+	const uint16_t	*regs;
+	const uint32_t	*vals_5g;
+	const uint32_t	*vals_2g;
+};
+
+struct athn_addac {
+	int		nvals;
+	const uint32_t	*vals;
+};
+
+/* Tx queue software indexes. */
+#define ATHN_QID_AC_BE		0
+#define ATHN_QID_PSPOLL		1
+#define ATHN_QID_AC_BK		2
+#define ATHN_QID_AC_VI		3
+#define ATHN_QID_AC_VO		4
+#define ATHN_QID_UAPSD		5
+#define ATHN_QID_CAB		6
+#define ATHN_QID_BEACON		7
+#define ATHN_QID_COUNT		8
+#define EDCA_NUM_AC	4
+
+/* Map Access Category to Tx queue Id. */
+static const uint8_t athn_ac2qid[EDCA_NUM_AC] = {
+	ATHN_QID_AC_BE,	/* EDCA_AC_BE */
+	ATHN_QID_AC_BK,	/* EDCA_AC_BK */
+	ATHN_QID_AC_VI,	/* EDCA_AC_VI */
+	ATHN_QID_AC_VO	/* EDCA_AC_VO */
+};
+
+static const uint8_t athn_5ghz_chans[] = {
+	/* UNII 1. */
+	36, 40, 44, 48,
+	/* UNII 2. */
+	52, 56, 60, 64,
+	/* Middle band. */
+	100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140,
+	/* UNII 3. */
+	149, 153, 157, 161, 165
+};
+
+/* Number of data bits per OFDM symbol for MCS[0-15]. */
+/* See tables 20-29, 20-30, 20-33, 20-34. */
+static const uint16_t ar_mcs_ndbps[][2] = {
+	/* 20MHz  40MHz */
+	{     26,    54 },	/* MCS0 */
+	{     52,   108 },	/* MCS1 */
+	{     78,   162 },	/* MCS2 */
+	{    104,   216 },	/* MCS3 */
+	{    156,   324 },	/* MCS4 */
+	{    208,   432 },	/* MCS5 */
+	{    234,   486 },	/* MCS6 */
+	{    260,   540 },	/* MCS7 */
+	{     26,   108 },	/* MCS8 */
+	{     52,   216 },	/* MCS9 */
+	{     78,   324 },	/* MCS10 */
+	{    104,   432 },	/* MCS11 */
+	{    156,   648 },	/* MCS12 */
+	{    208,   864 },	/* MCS13 */
+	{    234,   972 },	/* MCS14 */
+	{    260,  1080 }	/* MCS15 */
+};
+
+#define ATHN_POWER_OFDM6	0
+#define ATHN_POWER_OFDM9	1
+#define ATHN_POWER_OFDM12	2
+#define ATHN_POWER_OFDM18	3
+#define ATHN_POWER_OFDM24	4
+#define ATHN_POWER_OFDM36	5
+#define ATHN_POWER_OFDM48	6
+#define ATHN_POWER_OFDM54	7
+#define ATHN_POWER_CCK1_LP	8
+#define ATHN_POWER_CCK2_LP	9
+#define ATHN_POWER_CCK2_SP	10
+#define ATHN_POWER_CCK55_LP	11
+#define ATHN_POWER_CCK55_SP	12
+#define ATHN_POWER_CCK11_LP	13
+#define ATHN_POWER_CCK11_SP	14
+#define ATHN_POWER_XR		15
+#define ATHN_POWER_HT20(mcs)	(16 + (mcs))
+#define ATHN_POWER_HT40(mcs)	(24 + (mcs))
+#define ATHN_POWER_CCK_DUP	32
+#define ATHN_POWER_OFDM_DUP	33
+#define ATHN_POWER_CCK_EXT	34
+#define ATHN_POWER_OFDM_EXT	35
+#define ATHN_POWER_COUNT	36
+
+#define ATHN_ANI_PERIOD		100
+#define ATHN_ANI_RSSI_THR_HIGH	40
+#define ATHN_ANI_RSSI_THR_LOW	7
+
+struct athn_ani {
+	uint8_t		noise_immunity_level;
+	uint8_t		spur_immunity_level;
+	uint8_t		firstep_level;
+	uint8_t		ofdm_weak_signal;
+	uint8_t		cck_weak_signal;
+
+	uint32_t	listen_time;
+
+	uint32_t	ofdm_trig_high;
+	uint32_t	ofdm_trig_low;
+
+	int32_t		cck_trig_high;
+	int32_t		cck_trig_low;
+
+	uint32_t	ofdm_phy_err_base;
+	uint32_t	cck_phy_err_base;
+	uint32_t	ofdm_phy_err_count;
+	uint32_t	cck_phy_err_count;
+
+	uint32_t	cyccnt;
+	uint32_t	txfcnt;
+	uint32_t	rxfcnt;
+};
+
+struct athn_iq_cal {
+	uint32_t	pwr_meas_i;
+	uint32_t	pwr_meas_q;
+	int32_t		iq_corr_meas;
+};
+
+struct athn_adc_cal {
+	uint32_t	pwr_meas_odd_i;
+	uint32_t	pwr_meas_even_i;
+	uint32_t	pwr_meas_odd_q;
+	uint32_t	pwr_meas_even_q;
+};
+
+struct athn_calib {
+	int			nsamples;
+	struct athn_iq_cal	iq[AR_MAX_CHAINS];
+	struct athn_adc_cal	adc_gain[AR_MAX_CHAINS];
+	struct athn_adc_cal	adc_dc_offset[AR_MAX_CHAINS];
+};
+
+#define ATHN_NF_CAL_HIST_MAX	5
+
+#define ATHN_FLAG_PCIE			(1 << 0)
+#define ATHN_FLAG_OLPC			(1 << 1)
+#define ATHN_FLAG_SPLIT_MMIC		(1 << 2)
+#define ATHN_FLAG_RFSILENT		(1 << 3)
+#define ATHN_FLAG_RFSILENT_REVERSED	(1 << 4)
+#define ATHN_FLAG_BTCOEX2WIRE		(1 << 5)
+#define ATHN_FLAG_BTCOEX3WIRE		(1 << 6)
+#define ATHN_FLAG_BTCOEX	(ATHN_FLAG_BTCOEX2WIRE | ATHN_FLAG_BTCOEX3WIRE)
+#define ATHN_CAL_IQ		(1 << 0)
+#define ATHN_CAL_ADC_GAIN	(1 << 1)
+#define ATHN_CAL_ADC_DC		(1 << 2)
+struct Ctlr;
+
+struct athn_ops {
+	void	(*setup)(struct Ctlr *);
+	void	(*set_txpower)(struct Ctlr *);
+	void	(*spur_mitigate)(struct Ctlr *);
+	const struct ar_spur_chan *(*get_spur_chans)(struct Ctlr *, int);
+	void	(*init_from_rom)(struct Ctlr *);
+	int	(*set_synth)(struct Ctlr *);
+	void	(*swap_rom)(struct Ctlr *);
+	void	(*olpc_init)(struct Ctlr *);
+};
+
+/* ar9285reg.h */
+
+#define AR9285_MAX_CHAINS	1
+
+#define AR9285_PHY_CCA_MAX_GOOD_VALUE	(-118)
+
+#define AR9285_CL_CAL_REDO_THRESH	1
+
+/*
+ * Analog registers.
+ */
+#define AR9285_AN_RF2G1			0x7820
+#define AR9285_AN_RF2G2			0x7824
+#define AR9285_AN_RF2G3			0x7828
+#define AR9285_AN_RF2G4			0x782c
+#define AR9285_AN_RF2G5			0x7830
+#define AR9285_AN_RF2G6			0x7834
+#define AR9285_AN_RF2G7			0x7838
+#define AR9285_AN_RF2G8			0x783c
+#define AR9285_AN_RF2G9			0x7840
+#define AR9285_AN_RXTXBB1		0x7854
+#define AR9285_AN_TOP2			0x7868
+#define AR9285_AN_TOP3			0x786c
+#define AR9285_AN_TOP4			0x7870
+
+/* Bits for AR9285_AN_RF2G1. */
+#define AR9285_AN_RF2G1_ENPACAL		0x00000800
+#define AR9285_AN_RF2G1_PDPADRV1	0x02000000
+#define AR9285_AN_RF2G1_PDPADRV2	0x01000000
+#define AR9285_AN_RF2G1_PDPAOUT		0x00800000
+
+/* Bits for AR9285_AN_RF2G2. */
+#define AR9285_AN_RF2G2_OFFCAL	0x00001000
+
+/* Bits for AR9285_AN_RF2G3. */
+#define AR9285_AN_RF2G3_PDVCCOMP	0x02000000
+#define AR9285_AN_RF2G3_OB_0_M		0x00e00000
+#define AR9285_AN_RF2G3_OB_0_S		21
+#define AR9285_AN_RF2G3_OB_1_M		0x001c0000
+#define AR9285_AN_RF2G3_OB_1_S		18
+#define AR9285_AN_RF2G3_OB_2_M		0x00038000
+#define AR9285_AN_RF2G3_OB_2_S		15
+#define AR9285_AN_RF2G3_OB_3_M		0x00007000
+#define AR9285_AN_RF2G3_OB_3_S		12
+#define AR9285_AN_RF2G3_OB_4_M		0x00000e00
+#define AR9285_AN_RF2G3_OB_4_S		9
+#define AR9285_AN_RF2G3_DB1_0_M		0x000001c0
+#define AR9285_AN_RF2G3_DB1_0_S		6
+#define AR9285_AN_RF2G3_DB1_1_M		0x00000038
+#define AR9285_AN_RF2G3_DB1_1_S		3
+#define AR9285_AN_RF2G3_DB1_2_M		0x00000007
+#define AR9285_AN_RF2G3_DB1_2_S		0
+
+/* Bits for AR9285_AN_RF2G4. */
+#define AR9285_AN_RF2G4_DB1_3_M		0xe0000000
+#define AR9285_AN_RF2G4_DB1_3_S		29
+#define AR9285_AN_RF2G4_DB1_4_M		0x1c000000
+#define AR9285_AN_RF2G4_DB1_4_S		26
+#define AR9285_AN_RF2G4_DB2_0_M		0x03800000
+#define AR9285_AN_RF2G4_DB2_0_S		23
+#define AR9285_AN_RF2G4_DB2_1_M		0x00700000
+#define AR9285_AN_RF2G4_DB2_1_S		20
+#define AR9285_AN_RF2G4_DB2_2_M		0x000e0000
+#define AR9285_AN_RF2G4_DB2_2_S		17
+#define AR9285_AN_RF2G4_DB2_3_M		0x0001c000
+#define AR9285_AN_RF2G4_DB2_3_S		14
+#define AR9285_AN_RF2G4_DB2_4_M		0x00003800
+#define AR9285_AN_RF2G4_DB2_4_S		11
+
+/* Bits for AR9285_AN_RF2G5. */
+#define AR9285_AN_RF2G5_IC50TX_M	0x00000700
+#define AR9285_AN_RF2G5_IC50TX_S	8
+
+/* Bits for AR9285_AN_RF2G6. */
+#define AR9285_AN_RF2G6_CCOMP_M		0x00007800
+#define AR9285_AN_RF2G6_CCOMP_S		11
+#define AR9285_AN_RF2G6_OFFS_6_1	0x03f00000
+#define AR9285_AN_RF2G6_OFFS(i)		(1 << (19 + (i)))
+
+/* Bits for AR9285_AN_RF2G7. */
+#define AR9285_AN_RF2G7_PWDDB		0x00000002
+#define AR9285_AN_RF2G7_PADRVGN2TAB0_M	0xe0000000
+#define AR9285_AN_RF2G7_PADRVGN2TAB0_S	29
+
+/* Bits for AR9285_AN_RF2G8. */
+#define AR9285_AN_RF2G8_PADRVGN2TAB0_M	0x0001c000
+#define AR9285_AN_RF2G8_PADRVGN2TAB0_S	14
+
+/* Bits for AR9285_AN_RXTXBB1. */
+#define AR9285_AN_RXTXBB1_SPARE9	0x00000001
+#define AR9285_AN_RXTXBB1_PDRXTXBB1	0x00000020
+#define AR9285_AN_RXTXBB1_PDV2I		0x00000080
+#define AR9285_AN_RXTXBB1_PDDACIF	0x00000100
+
+/* Bits for AR9285_AN_TOP2. */
+#define AR9285_AN_TOP2_DEFAULT		0xca0358a0	/* XXX magic */
+
+/* Bits for AR9285_AN_TOP3. */
+#define AR9285_AN_TOP3_XPABIAS_LVL_M	0x0000000c
+#define AR9285_AN_TOP3_XPABIAS_LVL_S	2
+#define AR9285_AN_TOP3_PWDDAC		0x00800000
+
+/* Bits for AR9285_AN_TOP4. */
+#define AR9285_AN_TOP4_DEFAULT		0x10142c00
+
+/* Bits for AR_PHY_MULTICHAIN_GAIN_CTL. */
+#define AR9285_PHY_ANT_DIV_CTL_ALL_M		0x7f000000
+#define AR9285_PHY_ANT_DIV_CTL_ALL_S		24
+#define AR9285_PHY_ANT_DIV_CTL_M		0x01000000
+#define AR9285_PHY_ANT_DIV_CTL_S		24
+#define AR9285_PHY_ANT_DIV_ALT_LNACONF_M	0x06000000
+#define AR9285_PHY_ANT_DIV_ALT_LNACONF_S	25
+#define AR9285_PHY_ANT_DIV_LNA1			2
+#define AR9285_PHY_ANT_DIV_LNA2			1
+#define AR9285_PHY_ANT_DIV_MAIN_LNACONF_M	0x18000000
+#define AR9285_PHY_ANT_DIV_MAIN_LNACONF_S	27
+#define AR9285_PHY_ANT_DIV_ALT_GAINTB_M	0x20000000
+#define AR9285_PHY_ANT_DIV_ALT_GAINTB_S		29
+#define AR9285_PHY_ANT_DIV_GAINTB_0		0
+#define AR9285_PHY_ANT_DIV_GAINTB_1		1
+#define AR9285_PHY_ANT_DIV_MAIN_GAINTB_M	0x40000000
+#define AR9285_PHY_ANT_DIV_MAIN_GAINTB_S	30
+#define AR9285_PHY_ANT_DIV_LNA1_PLUS_LNA2	3
+#define AR9285_PHY_ANT_DIV_LNA1_MINUS_LNA2	0
+
+/*
+ * ROM layout used by AR9285 (single-stream, 2GHz only).
+ */
+#define AR9285_EEP_START_LOC		64
+#define AR9285_NUM_2G_CAL_PIERS		3
+#define AR9285_NUM_2G_CCK_TARGET_POWERS	3
+#define AR9285_NUM_2G_20_TARGET_POWERS	3
+#define AR9285_NUM_2G_40_TARGET_POWERS	3
+#define AR9285_NUM_CTLS			12
+#define AR9285_NUM_BAND_EDGES		4
+#define AR9285_NUM_PD_GAINS		2
+#define AR9285_PD_GAINS_IN_MASK		4
+#define AR9285_PD_GAIN_ICEPTS		5
+
+#pragma pack on
+struct ar9285_base_eep_header {
+	uint16_t	length;
+	uint16_t	checksum;
+	uint16_t	version;
+	uint8_t		opCapFlags;
+	uint8_t		eepMisc;
+	uint16_t	regDmn[2];
+	uint8_t		macAddr[6];
+	uint8_t		rxMask;
+	uint8_t		txMask;
+	uint16_t	rfSilent;
+	uint16_t	blueToothOptions;
+	uint16_t	deviceCap;
+	uint32_t	binBuildNumber;
+	uint8_t		deviceType;
+	/* End of common header. */
+	uint8_t		txGainType;
+} __packed;
+
+struct ar9285_modal_eep_header {
+	uint32_t	antCtrlChain;
+	uint32_t	antCtrlCommon;
+	uint8_t		antennaGain;
+	uint8_t		switchSettling;
+	uint8_t		txRxAtten;
+	uint8_t		rxTxMargin;
+	uint8_t		adcDesiredSize;
+	uint8_t		pgaDesiredSize;
+	uint8_t		xlnaGain;
+	uint8_t		txEndToXpaOff;
+	uint8_t		txEndToRxOn;
+	uint8_t		txFrameToXpaOn;
+	uint8_t		thresh62;
+	uint8_t		noiseFloorThresh;
+	uint8_t		xpdGain;
+	uint8_t		xpd;
+	uint8_t		iqCalI;
+	uint8_t		iqCalQ;
+	uint8_t		pdGainOverlap;
+	uint8_t		ob_01;
+	uint8_t		db1_01;
+	uint8_t		xpaBiasLvl;
+	uint8_t		txFrameToDataStart;
+	uint8_t		txFrameToPaOn;
+	uint8_t		ht40PowerIncForPdadc;
+	uint8_t		bswAtten;
+	uint8_t		bswMargin;
+	uint8_t		swSettleHt40;
+	uint8_t		xatten2Db;
+	uint8_t		xatten2Margin;
+	uint8_t		db2_01;
+	uint8_t		version;
+	uint16_t	ob_234;
+	uint16_t	db1_234;
+	uint16_t	db2_234;
+	uint8_t		futureModal[4];
+	struct		ar_spur_chan spurChans[AR_EEPROM_MODAL_SPURS];
+} __packed;
+
+struct ar9285_cal_data_per_freq {
+	uint8_t	pwrPdg[AR9285_NUM_PD_GAINS][AR9285_PD_GAIN_ICEPTS];
+	uint8_t	vpdPdg[AR9285_NUM_PD_GAINS][AR9285_PD_GAIN_ICEPTS];
+} __packed;
+
+struct ar9285_cal_ctl_data {
+	struct ar_cal_ctl_edges	ctlEdges[AR9285_NUM_BAND_EDGES];
+} __packed;
+
+struct ar9285_eeprom {
+	struct	ar9285_base_eep_header baseEepHeader;
+	uint8_t	custData[20];
+	struct	ar9285_modal_eep_header modalHeader;
+	uint8_t	calFreqPier2G[AR9285_NUM_2G_CAL_PIERS];
+	struct	ar9285_cal_data_per_freq
+	    calPierData2G[AR9285_NUM_2G_CAL_PIERS];
+	struct	ar_cal_target_power_leg
+	    calTargetPowerCck[AR9285_NUM_2G_CCK_TARGET_POWERS];
+	struct	ar_cal_target_power_leg
+	    calTargetPower2G[AR9285_NUM_2G_20_TARGET_POWERS];
+	struct	ar_cal_target_power_ht
+	    calTargetPower2GHT20[AR9285_NUM_2G_20_TARGET_POWERS];
+	struct	ar_cal_target_power_ht
+	    calTargetPower2GHT40[AR9285_NUM_2G_40_TARGET_POWERS];
+	uint8_t	ctlIndex[AR9285_NUM_CTLS];
+	struct	ar9285_cal_ctl_data ctlData[AR9285_NUM_CTLS];
+	uint8_t	padding;
+} __packed;
+#pragma pack off
+/* Macro to "pack" registers to 16-bit to save some .rodata space. */
+#define P(x)	(x)
+
+/*
+ * AR9285 1.0 initialization values.
+ */
+static const uint16_t ar9285_1_0_regs[] = {
+	P(0x01030), P(0x01070), P(0x010b0), P(0x010f0), P(0x08014),
+	P(0x0801c), P(0x08318), P(0x09804), P(0x09820), P(0x09824),
+	P(0x09828), P(0x09834), P(0x09838), P(0x09840), P(0x09844),
+	P(0x09848), P(0x09850), P(0x09858), P(0x0985c), P(0x09860),
+	P(0x09864), P(0x09868), P(0x0986c), P(0x09914), P(0x09918),
+	P(0x09924), P(0x09944), P(0x09960), P(0x09964), P(0x099b8),
+	P(0x099bc), P(0x099c0), P(0x099c4), P(0x099c8), P(0x099cc),
+	P(0x099d0), P(0x099d4), P(0x099d8), P(0x09a00), P(0x09a04),
+	P(0x09a08), P(0x09a0c), P(0x09a10), P(0x09a14), P(0x09a18),
+	P(0x09a1c), P(0x09a20), P(0x09a24), P(0x09a28), P(0x09a2c),
+	P(0x09a30), P(0x09a34), P(0x09a38), P(0x09a3c), P(0x09a40),
+	P(0x09a44), P(0x09a48), P(0x09a4c), P(0x09a50), P(0x09a54),
+	P(0x09a58), P(0x09a5c), P(0x09a60), P(0x09a64), P(0x09a68),
+	P(0x09a6c), P(0x09a70), P(0x09a74), P(0x09a78), P(0x09a7c),
+	P(0x09a80), P(0x09a84), P(0x09a88), P(0x09a8c), P(0x09a90),
+	P(0x09a94), P(0x09a98), P(0x09a9c), P(0x09aa0), P(0x09aa4),
+	P(0x09aa8), P(0x09aac), P(0x09ab0), P(0x09ab4), P(0x09ab8),
+	P(0x09abc), P(0x09ac0), P(0x09ac4), P(0x09ac8), P(0x09acc),
+	P(0x09ad0), P(0x09ad4), P(0x09ad8), P(0x09adc), P(0x09ae0),
+	P(0x09ae4), P(0x09ae8), P(0x09aec), P(0x09af0), P(0x09af4),
+	P(0x09af8), P(0x09afc), P(0x09b00), P(0x09b04), P(0x09b08),
+	P(0x09b0c), P(0x09b10), P(0x09b14), P(0x09b18), P(0x09b1c),
+	P(0x09b20), P(0x09b24), P(0x09b28), P(0x09b2c), P(0x09b30),
+	P(0x09b34), P(0x09b38), P(0x09b3c), P(0x09b40), P(0x09b44),
+	P(0x09b48), P(0x09b4c), P(0x09b50), P(0x09b54), P(0x09b58),
+	P(0x09b5c), P(0x09b60), P(0x09b64), P(0x09b68), P(0x09b6c),
+	P(0x09b70), P(0x09b74), P(0x09b78), P(0x09b7c), P(0x09b80),
+	P(0x09b84), P(0x09b88), P(0x09b8c), P(0x09b90), P(0x09b94),
+	P(0x09b98), P(0x09b9c), P(0x09ba0), P(0x09ba4), P(0x09ba8),
+	P(0x09bac), P(0x09bb0), P(0x09bb4), P(0x09bb8), P(0x09bbc),
+	P(0x09bc0), P(0x09bc4), P(0x09bc8), P(0x09bcc), P(0x09bd0),
+	P(0x09bd4), P(0x09bd8), P(0x09bdc), P(0x09be0), P(0x09be4),
+	P(0x09be8), P(0x09bec), P(0x09bf0), P(0x09bf4), P(0x09bf8),
+	P(0x09bfc), P(0x0aa00), P(0x0aa04), P(0x0aa08), P(0x0aa0c),
+	P(0x0aa10), P(0x0aa14), P(0x0aa18), P(0x0aa1c), P(0x0aa20),
+	P(0x0aa24), P(0x0aa28), P(0x0aa2c), P(0x0aa30), P(0x0aa34),
+	P(0x0aa38), P(0x0aa3c), P(0x0aa40), P(0x0aa44), P(0x0aa48),
+	P(0x0aa4c), P(0x0aa50), P(0x0aa54), P(0x0aa58), P(0x0aa5c),
+	P(0x0aa60), P(0x0aa64), P(0x0aa68), P(0x0aa6c), P(0x0aa70),
+	P(0x0aa74), P(0x0aa78), P(0x0aa7c), P(0x0aa80), P(0x0aa84),
+	P(0x0aa88), P(0x0aa8c), P(0x0aa90), P(0x0aa94), P(0x0aa98),
+	P(0x0aa9c), P(0x0aaa0), P(0x0aaa4), P(0x0aaa8), P(0x0aaac),
+	P(0x0aab0), P(0x0aab4), P(0x0aab8), P(0x0aabc), P(0x0aac0),
+	P(0x0aac4), P(0x0aac8), P(0x0aacc), P(0x0aad0), P(0x0aad4),
+	P(0x0aad8), P(0x0aadc), P(0x0aae0), P(0x0aae4), P(0x0aae8),
+	P(0x0aaec), P(0x0aaf0), P(0x0aaf4), P(0x0aaf8), P(0x0aafc),
+	P(0x0ab00), P(0x0ab04), P(0x0ab08), P(0x0ab0c), P(0x0ab10),
+	P(0x0ab14), P(0x0ab18), P(0x0ab1c), P(0x0ab20), P(0x0ab24),
+	P(0x0ab28), P(0x0ab2c), P(0x0ab30), P(0x0ab34), P(0x0ab38),
+	P(0x0ab3c), P(0x0ab40), P(0x0ab44), P(0x0ab48), P(0x0ab4c),
+	P(0x0ab50), P(0x0ab54), P(0x0ab58), P(0x0ab5c), P(0x0ab60),
+	P(0x0ab64), P(0x0ab68), P(0x0ab6c), P(0x0ab70), P(0x0ab74),
+	P(0x0ab78), P(0x0ab7c), P(0x0ab80), P(0x0ab84), P(0x0ab88),
+	P(0x0ab8c), P(0x0ab90), P(0x0ab94), P(0x0ab98), P(0x0ab9c),
+	P(0x0aba0), P(0x0aba4), P(0x0aba8), P(0x0abac), P(0x0abb0),
+	P(0x0abb4), P(0x0abb8), P(0x0abbc), P(0x0abc0), P(0x0abc4),
+	P(0x0abc8), P(0x0abcc), P(0x0abd0), P(0x0abd4), P(0x0abd8),
+	P(0x0abdc), P(0x0abe0), P(0x0abe4), P(0x0abe8), P(0x0abec),
+	P(0x0abf0), P(0x0abf4), P(0x0abf8), P(0x0abfc), P(0x0a204),
+	P(0x0a20c), P(0x0a21c), P(0x0a230), P(0x0a250), P(0x0a274),
+	P(0x0a300), P(0x0a304), P(0x0a308), P(0x0a30c), P(0x0a310),
+	P(0x0a314), P(0x0a318), P(0x0a31c), P(0x0a320), P(0x0a324),
+	P(0x0a328), P(0x0a32c), P(0x0a330), P(0x0a334), P(0x0a338),
+	P(0x0a33c), P(0x0a340), P(0x0a344), P(0x0a358)
+};
+
+#ifndef IEEE80211_NO_HT
+static const uint32_t ar9285_1_0_vals_2g40[] = {
+	0x000002c0, 0x00000318, 0x00007c70, 0x00000000, 0x10801600,
+	0x12e00057, 0x00006880, 0x000003c4, 0x02020200, 0x00000e0e,
+	0x0a020001, 0x00000e0e, 0x00000007, 0x206a012e, 0x03720020,
+	0x0000004e, 0x6d4000e2, 0x7ec84d2e, 0x3136605e, 0x00058d20,
+	0x0001ce00, 0x5ac640d0, 0x06903881, 0x00001130, 0x00000016,
+	0xd00a800d, 0xdfbc1020, 0x00000000, 0x00000000, 0x00cf4d1c,
+	0x00000c00, 0x05eea6d4, 0x06336f77, 0x60f65329, 0x08f186c8,
+	0x00046384, 0x00000000, 0x00000000, 0x00068084, 0x00068088,
+	0x0006808c, 0x00068100, 0x00068104, 0x00068108, 0x0006810c,
+	0x00068110, 0x00068114, 0x00068180, 0x00068184, 0x00068188,
+	0x0006818c, 0x00068190, 0x00068194, 0x000681a0, 0x0006820c,
+	0x000681a8, 0x00068284, 0x00068288, 0x00068220, 0x00068290,
+	0x00068300, 0x00068304, 0x00068308, 0x0006830c, 0x00068380,
+	0x00068384, 0x00068700, 0x00068704, 0x00068708, 0x0006870c,
+	0x00068780, 0x00068784, 0x00068b04, 0x00068b08, 0x00068b08,
+	0x00068b0c, 0x00068b80, 0x00068b84, 0x00068b88, 0x00068b8c,
+	0x000b8b90, 0x000b8f80, 0x000b8f84, 0x000b8f88, 0x000b8f8c,
+	0x000b8f90, 0x000bb30c, 0x000bb310, 0x000bb384, 0x000bb388,
+	0x000bb324, 0x000bb704, 0x000f96a4, 0x000f96a8, 0x000f9710,
+	0x000f9714, 0x000f9720, 0x000f9724, 0x000f9728, 0x000f972c,
+	0x000f97a0, 0x000f97a4, 0x000fb7a8, 0x000fb7b0, 0x000fb7b4,
+	0x000fb7b8, 0x000fb7a5, 0x000fb7a9, 0x000fb7ad, 0x000fb7b1,
+	0x000fb7b5, 0x000fb7b9, 0x000fb7c5, 0x000fb7c9, 0x000fb7d1,
+	0x000fb7d5, 0x000fb7d9, 0x000fb7c6, 0x000fb7ca, 0x000fb7ce,
+	0x000fb7d2, 0x000fb7d6, 0x000fb7c3, 0x000fb7c7, 0x000fb7cb,
+	0x000fb7cf, 0x000fb7d7, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x0006801c, 0x00068080, 0x00068084, 0x00068088,
+	0x0006808c, 0x00068100, 0x00068104, 0x00068108, 0x0006810c,
+	0x00068110, 0x00068110, 0x00068180, 0x00068184, 0x00068188,
+	0x0006818c, 0x00068190, 0x00068194, 0x000681a0, 0x0006820c,
+	0x000681a8, 0x000681ac, 0x0006821c, 0x00068224, 0x00068290,
+	0x00068300, 0x00068308, 0x0006830c, 0x00068310, 0x00068788,
+	0x0006878c, 0x00068790, 0x00068794, 0x00068798, 0x0006879c,
+	0x00068b89, 0x00068b8d, 0x00068b91, 0x00068b95, 0x00068b99,
+	0x00068ba5, 0x00068ba9, 0x00068bad, 0x000b8b0c, 0x000b8f10,
+	0x000b8f14, 0x000b8f84, 0x000b8f84, 0x000b8f88, 0x000bb380,
+	0x000bb384, 0x000bb388, 0x000bb38c, 0x000bb394, 0x000bb798,
+	0x000f970c, 0x000f9710, 0x000f9714, 0x000f9718, 0x000f9705,
+	0x000f9709, 0x000f970d, 0x000f9711, 0x000f9715, 0x000f9719,
+	0x000fb7a4, 0x000fb7a8, 0x000fb7ac, 0x000fb7ac, 0x000fb7b0,
+	0x000fb7b8, 0x000fb7bc, 0x000fb7a1, 0x000fb7a5, 0x000fb7a9,
+	0x000fb7b1, 0x000fb7b5, 0x000fb7bd, 0x000fb7c9, 0x000fb7cd,
+	0x000fb7d1, 0x000fb7d9, 0x000fb7c2, 0x000fb7c6, 0x000fb7ca,
+	0x000fb7ce, 0x000fb7d2, 0x000fb7d6, 0x000fb7c3, 0x000fb7cb,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x00000004,
+	0x00000000, 0x1883800a, 0x00000210, 0x001ca000, 0x0a820652,
+	0x00000000, 0x00007201, 0x00010408, 0x0001860a, 0x00020818,
+	0x00024858, 0x00026859, 0x0002985b, 0x0002c89a, 0x0002e89b,
+	0x0003089c, 0x0003289d, 0x0003489e, 0x000388de, 0x0003b91e,
+	0x0003d95e, 0x000419df, 0x0003e9df, 0x7999aa0e
+};
+#endif
+
+static const uint32_t ar9285_1_0_vals_2g20[] = {
+	0x00000160, 0x0000018c, 0x00003e38, 0x00000000, 0x08400b00,
+	0x12e0002b, 0x00003440, 0x00000300, 0x02020200, 0x00000e0e,
+	0x0a020001, 0x00000e0e, 0x00000007, 0x206a012e, 0x03720020,
+	0x0000004e, 0x6d4000e2, 0x7ec84d2e, 0x3136605e, 0x00058d20,
+	0x0001ce00, 0x5ac640d0, 0x06903881, 0x00000898, 0x0000000b,
+	0xd00a800d, 0xdfbc1020, 0x00000000, 0x00000000, 0x00cf4d1c,
+	0x00000c00, 0x05eea6d4, 0x06336f77, 0x60f65329, 0x08f186c8,
+	0x00046384, 0x00000000, 0x00000000, 0x00068084, 0x00068088,
+	0x0006808c, 0x00068100, 0x00068104, 0x00068108, 0x0006810c,
+	0x00068110, 0x00068114, 0x00068180, 0x00068184, 0x00068188,
+	0x0006818c, 0x00068190, 0x00068194, 0x000681a0, 0x0006820c,
+	0x000681a8, 0x00068284, 0x00068288, 0x00068220, 0x00068290,
+	0x00068300, 0x00068304, 0x00068308, 0x0006830c, 0x00068380,
+	0x00068384, 0x00068700, 0x00068704, 0x00068708, 0x0006870c,
+	0x00068780, 0x00068784, 0x00068b04, 0x00068b08, 0x00068b08,
+	0x00068b0c, 0x00068b80, 0x00068b84, 0x00068b88, 0x00068b8c,
+	0x000b8b90, 0x000b8f80, 0x000b8f84, 0x000b8f88, 0x000b8f8c,
+	0x000b8f90, 0x000bb30c, 0x000bb310, 0x000bb384, 0x000bb388,
+	0x000bb324, 0x000bb704, 0x000f96a4, 0x000f96a8, 0x000f9710,
+	0x000f9714, 0x000f9720, 0x000f9724, 0x000f9728, 0x000f972c,
+	0x000f97a0, 0x000f97a4, 0x000fb7a8, 0x000fb7b0, 0x000fb7b4,
+	0x000fb7b8, 0x000fb7a5, 0x000fb7a9, 0x000fb7ad, 0x000fb7b1,
+	0x000fb7b5, 0x000fb7b9, 0x000fb7c5, 0x000fb7c9, 0x000fb7d1,
+	0x000fb7d5, 0x000fb7d9, 0x000fb7c6, 0x000fb7ca, 0x000fb7ce,
+	0x000fb7d2, 0x000fb7d6, 0x000fb7c3, 0x000fb7c7, 0x000fb7cb,
+	0x000fb7cf, 0x000fb7d7, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db, 0x000fb7db,
+	0x000fb7db, 0x0006801c, 0x00068080, 0x00068084, 0x00068088,
+	0x0006808c, 0x00068100, 0x00068104, 0x00068108, 0x0006810c,
+	0x00068110, 0x00068110, 0x00068180, 0x00068184, 0x00068188,
+	0x0006818c, 0x00068190, 0x00068194, 0x000681a0, 0x0006820c,
+	0x000681a8, 0x000681ac, 0x0006821c, 0x00068224, 0x00068290,
+	0x00068300, 0x00068308, 0x0006830c, 0x00068310, 0x00068788,
+	0x0006878c, 0x00068790, 0x00068794, 0x00068798, 0x0006879c,
+	0x00068b89, 0x00068b8d, 0x00068b91, 0x00068b95, 0x00068b99,
+	0x00068ba5, 0x00068ba9, 0x00068bad, 0x000b8b0c, 0x000b8f10,
+	0x000b8f14, 0x000b8f84, 0x000b8f84, 0x000b8f88, 0x000bb380,
+	0x000bb384, 0x000bb388, 0x000bb38c, 0x000bb394, 0x000bb798,
+	0x000f970c, 0x000f9710, 0x000f9714, 0x000f9718, 0x000f9705,
+	0x000f9709, 0x000f970d, 0x000f9711, 0x000f9715, 0x000f9719,
+	0x000fb7a4, 0x000fb7a8, 0x000fb7ac, 0x000fb7ac, 0x000fb7b0,
+	0x000fb7b8, 0x000fb7bc, 0x000fb7a1, 0x000fb7a5, 0x000fb7a9,
+	0x000fb7b1, 0x000fb7b5, 0x000fb7bd, 0x000fb7c9, 0x000fb7cd,
+	0x000fb7d1, 0x000fb7d9, 0x000fb7c2, 0x000fb7c6, 0x000fb7ca,
+	0x000fb7ce, 0x000fb7d2, 0x000fb7d6, 0x000fb7c3, 0x000fb7cb,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3,
+	0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x000fb7d3, 0x00000004,
+	0x00000000, 0x1883800a, 0x00000108, 0x001ca000, 0x0a820652,
+	0x00000000, 0x00007201, 0x00010408, 0x0001860a, 0x00020818,
+	0x00024858, 0x00026859, 0x0002985b, 0x0002c89a, 0x0002e89b,
+	0x0003089c, 0x0003289d, 0x0003489e, 0x000388de, 0x0003b91e,
+	0x0003d95e, 0x000419df, 0x0003e9df, 0x7999aa0e
+};
+
+static const uint16_t ar9285_1_0_cm_regs[] = {
+	P(0x0000c), P(0x00030), P(0x00034), P(0x00040), P(0x00044),
+	P(0x00048), P(0x0004c), P(0x00050), P(0x00054), P(0x00800),
+	P(0x00804), P(0x00808), P(0x0080c), P(0x00810), P(0x00814),
+	P(0x00818), P(0x0081c), P(0x00820), P(0x00824), P(0x01040),
+	P(0x01044), P(0x01048), P(0x0104c), P(0x01050), P(0x01054),
+	P(0x01058), P(0x0105c), P(0x01060), P(0x01064), P(0x01230),
+	P(0x01270), P(0x01038), P(0x01078), P(0x010b8), P(0x010f8),
+	P(0x01138), P(0x01178), P(0x011b8), P(0x011f8), P(0x01238),
+	P(0x01278), P(0x012b8), P(0x012f8), P(0x01338), P(0x01378),
+	P(0x013b8), P(0x013f8), P(0x01438), P(0x01478), P(0x014b8),
+	P(0x014f8), P(0x01538), P(0x01578), P(0x015b8), P(0x015f8),
+	P(0x01638), P(0x01678), P(0x016b8), P(0x016f8), P(0x01738),
+	P(0x01778), P(0x017b8), P(0x017f8), P(0x0103c), P(0x0107c),
+	P(0x010bc), P(0x010fc), P(0x0113c), P(0x0117c), P(0x011bc),
+	P(0x011fc), P(0x0123c), P(0x0127c), P(0x012bc), P(0x012fc),
+	P(0x0133c), P(0x0137c), P(0x013bc), P(0x013fc), P(0x0143c),
+	P(0x0147c), P(0x04030), P(0x0403c), P(0x04024), P(0x04060),
+	P(0x04064), P(0x07010), P(0x07034), P(0x07038), P(0x08004),
+	P(0x08008), P(0x0800c), P(0x08018), P(0x08020), P(0x08038),
+	P(0x0803c), P(0x08048), P(0x08054), P(0x08058), P(0x0805c),
+	P(0x08060), P(0x08064), P(0x08070), P(0x080c0), P(0x080c4),
+	P(0x080c8), P(0x080cc), P(0x080d0), P(0x080d4), P(0x080d8),
+	P(0x080e0), P(0x080e4), P(0x080e8), P(0x080ec), P(0x080f0),
+	P(0x080f4), P(0x080f8), P(0x080fc), P(0x08100), P(0x08104),
+	P(0x08108), P(0x0810c), P(0x08110), P(0x08118), P(0x0811c),
+	P(0x08120), P(0x08124), P(0x08128), P(0x0812c), P(0x08130),
+	P(0x08134), P(0x08138), P(0x0813c), P(0x08144), P(0x08168),
+	P(0x0816c), P(0x08170), P(0x08174), P(0x08178), P(0x0817c),
+	P(0x081c0), P(0x081d0), P(0x081ec), P(0x081f0), P(0x081f4),
+	P(0x081f8), P(0x081fc), P(0x08200), P(0x08204), P(0x08208),
+	P(0x0820c), P(0x08210), P(0x08214), P(0x08218), P(0x0821c),
+	P(0x08220), P(0x08224), P(0x08228), P(0x0822c), P(0x08230),
+	P(0x08234), P(0x08238), P(0x0823c), P(0x08240), P(0x08244),
+	P(0x08248), P(0x0824c), P(0x08250), P(0x08254), P(0x08258),
+	P(0x0825c), P(0x08260), P(0x08264), P(0x08270), P(0x08274),
+	P(0x08278), P(0x0827c), P(0x08284), P(0x08288), P(0x0828c),
+	P(0x08294), P(0x08298), P(0x0829c), P(0x08300), P(0x08314),
+	P(0x08328), P(0x0832c), P(0x08330), P(0x08334), P(0x08338),
+	P(0x0833c), P(0x08340), P(0x08344), P(0x09808), P(0x0980c),
+	P(0x09810), P(0x09814), P(0x0981c), P(0x0982c), P(0x09830),
+	P(0x0983c), P(0x0984c), P(0x09854), P(0x09900), P(0x09904),
+	P(0x09908), P(0x0990c), P(0x09910), P(0x0991c), P(0x09920),
+	P(0x09928), P(0x0992c), P(0x09934), P(0x09938), P(0x0993c),
+	P(0x09940), P(0x09948), P(0x0994c), P(0x09954), P(0x09958),
+	P(0x09968), P(0x09970), P(0x09974), P(0x09978), P(0x0997c),
+	P(0x09980), P(0x09984), P(0x09988), P(0x0998c), P(0x09990),
+	P(0x09994), P(0x09998), P(0x0999c), P(0x099a0), P(0x099a4),
+	P(0x099a8), P(0x099ac), P(0x099b0), P(0x099b4), P(0x099dc),
+	P(0x099e0), P(0x099e4), P(0x099e8), P(0x099ec), P(0x099f0),
+	P(0x0a208), P(0x0a210), P(0x0a214), P(0x0a218), P(0x0a220),
+	P(0x0a224), P(0x0a228), P(0x0a22c), P(0x0a234), P(0x0a238),
+	P(0x0a244), P(0x0a248), P(0x0a24c), P(0x0a254), P(0x0a258),
+	P(0x0a25c), P(0x0a260), P(0x0a268), P(0x0a26c), P(0x0d270),
+	P(0x0a278), P(0x0a27c), P(0x0d35c), P(0x0d360), P(0x0d364),
+	P(0x0d368), P(0x0d36c), P(0x0d370), P(0x0d374), P(0x0d378),
+	P(0x0d37c), P(0x0d380), P(0x0d384), P(0x0a388), P(0x0a38c),
+	P(0x0a390), P(0x0a394), P(0x0a398), P(0x0a39c), P(0x0a3a0),
+	P(0x0a3a4), P(0x0a3a8), P(0x0a3ac), P(0x0a3b0), P(0x0a3b4),
+	P(0x0a3b8), P(0x0a3bc), P(0x0a3c0), P(0x0a3c4), P(0x0a3cc),
+	P(0x0a3d0), P(0x0a3d4), P(0x0a3dc), P(0x0a3e0), P(0x0a3e4),
+	P(0x0a3e8), P(0x0a3ec), P(0x07800), P(0x07804), P(0x07808),
+	P(0x0780c), P(0x07810), P(0x07814), P(0x0781c), P(0x07820),
+	P(0x07824), P(0x07828), P(0x0782c), P(0x07830), P(0x07834),
+	P(0x07838), P(0x0783c), P(0x07840), P(0x07844), P(0x07848),
+	P(0x0784c), P(0x07850), P(0x07854), P(0x07858), P(0x0785c),
+	P(0x07860), P(0x07864), P(0x07868), P(0x0786c), P(0x07870)
+};
+
+static const uint32_t ar9285_1_0_cm_vals[] = {
+	0x00000000, 0x00020045, 0x00000005, 0x00000000, 0x00000008,
+	0x00000008, 0x00000010, 0x00000000, 0x0000001f, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x002ffc0f,
+	0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x002ffc0f,
+	0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000002, 0x00000002, 0x0000001f, 0x00000000,
+	0x00000000, 0x00000031, 0x00000002, 0x000004c2, 0x00000000,
+	0x00000000, 0x00000000, 0x00000700, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000fc78f,
+	0x0000000f, 0x00000000, 0x00000000, 0x2a80001a, 0x05dc01e0,
+	0x1f402710, 0x01f40000, 0x00001e00, 0x00000000, 0x00400000,
+	0xffffffff, 0x0000ffff, 0x003f3f3f, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00020000, 0x00020000, 0x00000001,
+	0x00000052, 0x00000000, 0x00000168, 0x000100aa, 0x00003210,
+	0x08f04800, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x32143320, 0xfaa4fa50, 0x00000100, 0x00000000,
+	0x00000000, 0x00003210, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00100000, 0x0010f400,
+	0x00000100, 0x0001e800, 0x00000000, 0x00000000, 0x00000000,
+	0x400000ff, 0x00080922, 0xa8a00010, 0x00000000, 0x40000000,
+	0x003e4180, 0x00000000, 0x0000002c, 0x0000002c, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000040, 0x00000000,
+	0x00000000, 0x00000001, 0x00000302, 0x00000e00, 0x00000000,
+	0x00000000, 0x00010380, 0x00481043, 0x00000000, 0xafe68e30,
+	0xfd14e000, 0x9c0a9f6b, 0x00000000, 0x0000a000, 0x00000000,
+	0x00200400, 0x0040233c, 0x00000044, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x01002310, 0x10000fff, 0x04900000,
+	0x00000001, 0x00000004, 0x1e1f2022, 0x0a0b0c0d, 0x00000000,
+	0x14750604, 0x9280c00a, 0x00020028, 0x5f3ca3de, 0x2108ecff,
+	0x000003ce, 0x1927b515, 0x00000000, 0x00000001, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001,
+	0x201fff00, 0x2def0a00, 0x03051000, 0x00000820, 0x00000000,
+	0x00000000, 0xaaaaaaaa, 0x3c466478, 0x0cc80caa, 0x00000000,
+	0x803e6788, 0x4080a333, 0x00206c10, 0x009c4060, 0x01834061,
+	0x00000400, 0x000003b5, 0x00000000, 0x20202020, 0x20202020,
+	0x00000000, 0xfffffffc, 0x00000000, 0x00000000, 0x0ccb5380,
+	0x15151501, 0xdfa90f01, 0x00000000, 0x0ebae9e6, 0x0d820820,
+	0x39ce739c, 0x050e039c, 0x07ffffef, 0x0fffffe7, 0x17ffffe5,
+	0x1fffffe4, 0x37ffffe3, 0x3fffffe3, 0x57ffffe3, 0x5fffffe2,
+	0x7fffffe2, 0x7f3c7bba, 0xf3307ff0, 0x0c000000, 0x20202020,
+	0x20202020, 0x39ce739c, 0x0000039c, 0x00000001, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x20202020,
+	0x20202020, 0x20202020, 0x39ce739c, 0x0000039c, 0x00000000,
+	0x18c43433, 0x00f70081, 0x00140000, 0x0e4548d8, 0x54214514,
+	0x02025820, 0x71c0d388, 0x924934a8, 0x00000000, 0x00000c04,
+	0x00d86fff, 0x26d2491b, 0x6e36d97b, 0xedb6d96c, 0x71400086,
+	0xfac68800, 0x0001fffe, 0xffeb1a20, 0x000c0db6, 0x6db61b6f,
+	0x6d9b66db, 0x6d8c6dba, 0x00040000, 0xdb003012, 0x04924914,
+	0x21084210, 0xf7d7ffde, 0xc2034080, 0x48609eb4, 0x10142c00
+};
+
+static const struct athn_ini ar9285_1_0_ini = {
+	nitems(ar9285_1_0_regs),
+	ar9285_1_0_regs,
+	NULL,	/* 2GHz only. */
+#ifndef IEEE80211_NO_HT
+	NULL,	/* 2GHz only. */
+	ar9285_1_0_vals_2g40,
+#endif
+	ar9285_1_0_vals_2g20,
+	nitems(ar9285_1_0_cm_regs),
+	ar9285_1_0_cm_regs,
+	ar9285_1_0_cm_vals
+};
+
+/*
+ * AR9285 1.2 initialization values.
+ */
+static const uint16_t ar9285_1_2_regs[] = {
+	P(0x01030), P(0x01070), P(0x010b0), P(0x010f0), P(0x08014),
+	P(0x0801c), P(0x08318), P(0x09804), P(0x09820), P(0x09824),
+	P(0x09828), P(0x09834), P(0x09838), P(0x09840), P(0x09844),
+	P(0x09848), P(0x0a848), P(0x09850), P(0x09858), P(0x0985c),
+	P(0x09860), P(0x09864), P(0x09868), P(0x0986c), P(0x09914),
+	P(0x09918), P(0x09924), P(0x09944), P(0x09960), P(0x09964),
+	P(0x099b8), P(0x099bc), P(0x099c0), P(0x099c4), P(0x099c8),
+	P(0x099cc), P(0x099d0), P(0x099d4), P(0x099d8), P(0x09a00),
+	P(0x09a04), P(0x09a08), P(0x09a0c), P(0x09a10), P(0x09a14),
+	P(0x09a18), P(0x09a1c), P(0x09a20), P(0x09a24), P(0x09a28),
+	P(0x09a2c), P(0x09a30), P(0x09a34), P(0x09a38), P(0x09a3c),
+	P(0x09a40), P(0x09a44), P(0x09a48), P(0x09a4c), P(0x09a50),
+	P(0x09a54), P(0x09a58), P(0x09a5c), P(0x09a60), P(0x09a64),
+	P(0x09a68), P(0x09a6c), P(0x09a70), P(0x09a74), P(0x09a78),
+	P(0x09a7c), P(0x09a80), P(0x09a84), P(0x09a88), P(0x09a8c),
+	P(0x09a90), P(0x09a94), P(0x09a98), P(0x09a9c), P(0x09aa0),
+	P(0x09aa4), P(0x09aa8), P(0x09aac), P(0x09ab0), P(0x09ab4),
+	P(0x09ab8), P(0x09abc), P(0x09ac0), P(0x09ac4), P(0x09ac8),
+	P(0x09acc), P(0x09ad0), P(0x09ad4), P(0x09ad8), P(0x09adc),
+	P(0x09ae0), P(0x09ae4), P(0x09ae8), P(0x09aec), P(0x09af0),
+	P(0x09af4), P(0x09af8), P(0x09afc), P(0x09b00), P(0x09b04),
+	P(0x09b08), P(0x09b0c), P(0x09b10), P(0x09b14), P(0x09b18),
+	P(0x09b1c), P(0x09b20), P(0x09b24), P(0x09b28), P(0x09b2c),
+	P(0x09b30), P(0x09b34), P(0x09b38), P(0x09b3c), P(0x09b40),
+	P(0x09b44), P(0x09b48), P(0x09b4c), P(0x09b50), P(0x09b54),
+	P(0x09b58), P(0x09b5c), P(0x09b60), P(0x09b64), P(0x09b68),
+	P(0x09b6c), P(0x09b70), P(0x09b74), P(0x09b78), P(0x09b7c),
+	P(0x09b80), P(0x09b84), P(0x09b88), P(0x09b8c), P(0x09b90),
+	P(0x09b94), P(0x09b98), P(0x09b9c), P(0x09ba0), P(0x09ba4),
+	P(0x09ba8), P(0x09bac), P(0x09bb0), P(0x09bb4), P(0x09bb8),
+	P(0x09bbc), P(0x09bc0), P(0x09bc4), P(0x09bc8), P(0x09bcc),
+	P(0x09bd0), P(0x09bd4), P(0x09bd8), P(0x09bdc), P(0x09be0),
+	P(0x09be4), P(0x09be8), P(0x09bec), P(0x09bf0), P(0x09bf4),
+	P(0x09bf8), P(0x09bfc), P(0x0aa00), P(0x0aa04), P(0x0aa08),
+	P(0x0aa0c), P(0x0aa10), P(0x0aa14), P(0x0aa18), P(0x0aa1c),
+	P(0x0aa20), P(0x0aa24), P(0x0aa28), P(0x0aa2c), P(0x0aa30),
+	P(0x0aa34), P(0x0aa38), P(0x0aa3c), P(0x0aa40), P(0x0aa44),
+	P(0x0aa48), P(0x0aa4c), P(0x0aa50), P(0x0aa54), P(0x0aa58),
+	P(0x0aa5c), P(0x0aa60), P(0x0aa64), P(0x0aa68), P(0x0aa6c),
+	P(0x0aa70), P(0x0aa74), P(0x0aa78), P(0x0aa7c), P(0x0aa80),
+	P(0x0aa84), P(0x0aa88), P(0x0aa8c), P(0x0aa90), P(0x0aa94),
+	P(0x0aa98), P(0x0aa9c), P(0x0aaa0), P(0x0aaa4), P(0x0aaa8),
+	P(0x0aaac), P(0x0aab0), P(0x0aab4), P(0x0aab8), P(0x0aabc),
+	P(0x0aac0), P(0x0aac4), P(0x0aac8), P(0x0aacc), P(0x0aad0),
+	P(0x0aad4), P(0x0aad8), P(0x0aadc), P(0x0aae0), P(0x0aae4),
+	P(0x0aae8), P(0x0aaec), P(0x0aaf0), P(0x0aaf4), P(0x0aaf8),
+	P(0x0aafc), P(0x0ab00), P(0x0ab04), P(0x0ab08), P(0x0ab0c),
+	P(0x0ab10), P(0x0ab14), P(0x0ab18), P(0x0ab1c), P(0x0ab20),
+	P(0x0ab24), P(0x0ab28), P(0x0ab2c), P(0x0ab30), P(0x0ab34),
+	P(0x0ab38), P(0x0ab3c), P(0x0ab40), P(0x0ab44), P(0x0ab48),
+	P(0x0ab4c), P(0x0ab50), P(0x0ab54), P(0x0ab58), P(0x0ab5c),
+	P(0x0ab60), P(0x0ab64), P(0x0ab68), P(0x0ab6c), P(0x0ab70),
+	P(0x0ab74), P(0x0ab78), P(0x0ab7c), P(0x0ab80), P(0x0ab84),
+	P(0x0ab88), P(0x0ab8c), P(0x0ab90), P(0x0ab94), P(0x0ab98),
+	P(0x0ab9c), P(0x0aba0), P(0x0aba4), P(0x0aba8), P(0x0abac),
+	P(0x0abb0), P(0x0abb4), P(0x0abb8), P(0x0abbc), P(0x0abc0),
+	P(0x0abc4), P(0x0abc8), P(0x0abcc), P(0x0abd0), P(0x0abd4),
+	P(0x0abd8), P(0x0abdc), P(0x0abe0), P(0x0abe4), P(0x0abe8),
+	P(0x0abec), P(0x0abf0), P(0x0abf4), P(0x0abf8), P(0x0abfc),
+	P(0x0a204), P(0x0a20c), P(0x0b20c), P(0x0a21c), P(0x0a230),
+	P(0x0a250), P(0x0a358)
+};
+
+#ifndef IEEE80211_NO_HT
+static const uint32_t ar9285_1_2_vals_2g40[] = {
+	0x000002c0, 0x00000318, 0x00007c70, 0x00000000, 0x10801600,
+	0x12e00057, 0x00006880, 0x000003c4, 0x02020200, 0x01000e0e,
+	0x0a020001, 0x00000e0e, 0x00000007, 0x206a012e, 0x03721620,
+	0x00001053, 0x00001053, 0x6d4000e2, 0x7ec84d2e, 0x3137605e,
+	0x00058d20, 0x0001ce00, 0x5ac640d0, 0x06903881, 0x00001130,
+	0x00000016, 0xd00a800d, 0xffbc1020, 0x00000000, 0x00000000,
+	0x0000421c, 0x00000c00, 0x05eea6d4, 0x06336f77, 0x6af6532f,
+	0x08f186c8, 0x00046384, 0x00000000, 0x00000000, 0x00058084,
+	0x00058088, 0x0005808c, 0x00058100, 0x00058104, 0x00058108,
+	0x0005810c, 0x00058110, 0x00058114, 0x00058180, 0x00058184,
+	0x00058188, 0x0005818c, 0x00058190, 0x00058194, 0x000581a0,
+	0x0005820c, 0x000581a8, 0x00058284, 0x00058288, 0x00058224,
+	0x00058290, 0x00058300, 0x00058304, 0x00058308, 0x0005830c,
+	0x00058380, 0x00058384, 0x00068700, 0x00068704, 0x00068708,
+	0x0006870c, 0x00068780, 0x00068784, 0x00078b00, 0x00078b04,
+	0x00078b08, 0x00078b0c, 0x00078b80, 0x00078b84, 0x00078b88,
+	0x00078b8c, 0x00078b90, 0x000caf80, 0x000caf84, 0x000caf88,
+	0x000caf8c, 0x000caf90, 0x000db30c, 0x000db310, 0x000db384,
+	0x000db388, 0x000db324, 0x000eb704, 0x000eb6a4, 0x000eb6a8,
+	0x000eb710, 0x000eb714, 0x000eb720, 0x000eb724, 0x000eb728,
+	0x000eb72c, 0x000eb7a0, 0x000eb7a4, 0x000eb7a8, 0x000eb7b0,
+	0x000eb7b4, 0x000eb7b8, 0x000eb7a5, 0x000eb7a9, 0x000eb7ad,
+	0x000eb7b1, 0x000eb7b5, 0x000eb7b9, 0x000eb7c5, 0x000eb7c9,
+	0x000eb7d1, 0x000eb7d5, 0x000eb7d9, 0x000eb7c6, 0x000eb7ca,
+	0x000eb7ce, 0x000eb7d2, 0x000eb7d6, 0x000eb7c3, 0x000eb7c7,
+	0x000eb7cb, 0x000eb7cf, 0x000eb7d7, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x00058084, 0x00058088, 0x0005808c,
+	0x00058100, 0x00058104, 0x00058108, 0x0005810c, 0x00058110,
+	0x00058114, 0x00058180, 0x00058184, 0x00058188, 0x0005818c,
+	0x00058190, 0x00058194, 0x000581a0, 0x0005820c, 0x000581a8,
+	0x00058284, 0x00058288, 0x00058224, 0x00058290, 0x00058300,
+	0x00058304, 0x00058308, 0x0005830c, 0x00058380, 0x00058384,
+	0x00068700, 0x00068704, 0x00068708, 0x0006870c, 0x00068780,
+	0x00068784, 0x00078b00, 0x00078b04, 0x00078b08, 0x00078b0c,
+	0x00078b80, 0x00078b84, 0x00078b88, 0x00078b8c, 0x00078b90,
+	0x000caf80, 0x000caf84, 0x000caf88, 0x000caf8c, 0x000caf90,
+	0x000db30c, 0x000db310, 0x000db384, 0x000db388, 0x000db324,
+	0x000eb704, 0x000eb6a4, 0x000eb6a8, 0x000eb710, 0x000eb714,
+	0x000eb720, 0x000eb724, 0x000eb728, 0x000eb72c, 0x000eb7a0,
+	0x000eb7a4, 0x000eb7a8, 0x000eb7b0, 0x000eb7b4, 0x000eb7b8,
+	0x000eb7a5, 0x000eb7a9, 0x000eb7ad, 0x000eb7b1, 0x000eb7b5,
+	0x000eb7b9, 0x000eb7c5, 0x000eb7c9, 0x000eb7d1, 0x000eb7d5,
+	0x000eb7d9, 0x000eb7c6, 0x000eb7ca, 0x000eb7ce, 0x000eb7d2,
+	0x000eb7d6, 0x000eb7c3, 0x000eb7c7, 0x000eb7cb, 0x000eb7cf,
+	0x000eb7d7, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x00000004, 0x0001f000, 0x0001f000, 0x1883800a, 0x00000210,
+	0x0004a000, 0x7999aa0e
+};
+#endif
+
+static const uint32_t ar9285_1_2_vals_2g20[] = {
+	0x00000160, 0x0000018c, 0x00003e38, 0x00000000, 0x08400b00,
+	0x12e0002b, 0x00003440, 0x00000300, 0x02020200, 0x01000e0e,
+	0x0a020001, 0x00000e0e, 0x00000007, 0x206a012e, 0x03721620,
+	0x00001053, 0x00001053, 0x6d4000e2, 0x7ec84d2e, 0x3137605e,
+	0x00058d20, 0x0001ce00, 0x5ac640d0, 0x06903881, 0x00000898,
+	0x0000000b, 0xd00a800d, 0xffbc1020, 0x00000000, 0x00000000,
+	0x0000421c, 0x00000c00, 0x05eea6d4, 0x06336f77, 0x6af6532f,
+	0x08f186c8, 0x00046384, 0x00000000, 0x00000000, 0x00058084,
+	0x00058088, 0x0005808c, 0x00058100, 0x00058104, 0x00058108,
+	0x0005810c, 0x00058110, 0x00058114, 0x00058180, 0x00058184,
+	0x00058188, 0x0005818c, 0x00058190, 0x00058194, 0x000581a0,
+	0x0005820c, 0x000581a8, 0x00058284, 0x00058288, 0x00058224,
+	0x00058290, 0x00058300, 0x00058304, 0x00058308, 0x0005830c,
+	0x00058380, 0x00058384, 0x00068700, 0x00068704, 0x00068708,
+	0x0006870c, 0x00068780, 0x00068784, 0x00078b00, 0x00078b04,
+	0x00078b08, 0x00078b0c, 0x00078b80, 0x00078b84, 0x00078b88,
+	0x00078b8c, 0x00078b90, 0x000caf80, 0x000caf84, 0x000caf88,
+	0x000caf8c, 0x000caf90, 0x000db30c, 0x000db310, 0x000db384,
+	0x000db388, 0x000db324, 0x000eb704, 0x000eb6a4, 0x000eb6a8,
+	0x000eb710, 0x000eb714, 0x000eb720, 0x000eb724, 0x000eb728,
+	0x000eb72c, 0x000eb7a0, 0x000eb7a4, 0x000eb7a8, 0x000eb7b0,
+	0x000eb7b4, 0x000eb7b8, 0x000eb7a5, 0x000eb7a9, 0x000eb7ad,
+	0x000eb7b1, 0x000eb7b5, 0x000eb7b9, 0x000eb7c5, 0x000eb7c9,
+	0x000eb7d1, 0x000eb7d5, 0x000eb7d9, 0x000eb7c6, 0x000eb7ca,
+	0x000eb7ce, 0x000eb7d2, 0x000eb7d6, 0x000eb7c3, 0x000eb7c7,
+	0x000eb7cb, 0x000eb7cf, 0x000eb7d7, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x00058084, 0x00058088, 0x0005808c,
+	0x00058100, 0x00058104, 0x00058108, 0x0005810c, 0x00058110,
+	0x00058114, 0x00058180, 0x00058184, 0x00058188, 0x0005818c,
+	0x00058190, 0x00058194, 0x000581a0, 0x0005820c, 0x000581a8,
+	0x00058284, 0x00058288, 0x00058224, 0x00058290, 0x00058300,
+	0x00058304, 0x00058308, 0x0005830c, 0x00058380, 0x00058384,
+	0x00068700, 0x00068704, 0x00068708, 0x0006870c, 0x00068780,
+	0x00068784, 0x00078b00, 0x00078b04, 0x00078b08, 0x00078b0c,
+	0x00078b80, 0x00078b84, 0x00078b88, 0x00078b8c, 0x00078b90,
+	0x000caf80, 0x000caf84, 0x000caf88, 0x000caf8c, 0x000caf90,
+	0x000db30c, 0x000db310, 0x000db384, 0x000db388, 0x000db324,
+	0x000eb704, 0x000eb6a4, 0x000eb6a8, 0x000eb710, 0x000eb714,
+	0x000eb720, 0x000eb724, 0x000eb728, 0x000eb72c, 0x000eb7a0,
+	0x000eb7a4, 0x000eb7a8, 0x000eb7b0, 0x000eb7b4, 0x000eb7b8,
+	0x000eb7a5, 0x000eb7a9, 0x000eb7ad, 0x000eb7b1, 0x000eb7b5,
+	0x000eb7b9, 0x000eb7c5, 0x000eb7c9, 0x000eb7d1, 0x000eb7d5,
+	0x000eb7d9, 0x000eb7c6, 0x000eb7ca, 0x000eb7ce, 0x000eb7d2,
+	0x000eb7d6, 0x000eb7c3, 0x000eb7c7, 0x000eb7cb, 0x000eb7cf,
+	0x000eb7d7, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db, 0x000eb7db,
+	0x00000004, 0x0001f000, 0x0001f000, 0x1883800a, 0x00000108,
+	0x0004a000, 0x7999aa0e
+};
+
+static const uint16_t ar9285_1_2_cm_regs[] = {
+	P(0x0000c), P(0x00030), P(0x00034), P(0x00040), P(0x00044),
+	P(0x00048), P(0x0004c), P(0x00050), P(0x00054), P(0x00800),
+	P(0x00804), P(0x00808), P(0x0080c), P(0x00810), P(0x00814),
+	P(0x00818), P(0x0081c), P(0x00820), P(0x00824), P(0x01040),
+	P(0x01044), P(0x01048), P(0x0104c), P(0x01050), P(0x01054),
+	P(0x01058), P(0x0105c), P(0x01060), P(0x01064), P(0x01230),
+	P(0x01270), P(0x01038), P(0x01078), P(0x010b8), P(0x010f8),
+	P(0x01138), P(0x01178), P(0x011b8), P(0x011f8), P(0x01238),
+	P(0x01278), P(0x012b8), P(0x012f8), P(0x01338), P(0x01378),
+	P(0x013b8), P(0x013f8), P(0x01438), P(0x01478), P(0x014b8),
+	P(0x014f8), P(0x01538), P(0x01578), P(0x015b8), P(0x015f8),
+	P(0x01638), P(0x01678), P(0x016b8), P(0x016f8), P(0x01738),
+	P(0x01778), P(0x017b8), P(0x017f8), P(0x0103c), P(0x0107c),
+	P(0x010bc), P(0x010fc), P(0x0113c), P(0x0117c), P(0x011bc),
+	P(0x011fc), P(0x0123c), P(0x0127c), P(0x012bc), P(0x012fc),
+	P(0x0133c), P(0x0137c), P(0x013bc), P(0x013fc), P(0x0143c),
+	P(0x0147c), P(0x04030), P(0x0403c), P(0x04024), P(0x04060),
+	P(0x04064), P(0x07010), P(0x07034), P(0x07038), P(0x08004),
+	P(0x08008), P(0x0800c), P(0x08018), P(0x08020), P(0x08038),
+	P(0x0803c), P(0x08048), P(0x08054), P(0x08058), P(0x0805c),
+	P(0x08060), P(0x08064), P(0x08070), P(0x080c0), P(0x080c4),
+	P(0x080c8), P(0x080cc), P(0x080d0), P(0x080d4), P(0x080d8),
+	P(0x080e0), P(0x080e4), P(0x080e8), P(0x080ec), P(0x080f0),
+	P(0x080f4), P(0x080f8), P(0x080fc), P(0x08100), P(0x08104),
+	P(0x08108), P(0x0810c), P(0x08110), P(0x08118), P(0x0811c),
+	P(0x08120), P(0x08124), P(0x08128), P(0x0812c), P(0x08130),
+	P(0x08134), P(0x08138), P(0x0813c), P(0x08144), P(0x08168),
+	P(0x0816c), P(0x08170), P(0x08174), P(0x08178), P(0x0817c),
+	P(0x081c0), P(0x081d0), P(0x081ec), P(0x081f0), P(0x081f4),
+	P(0x081f8), P(0x081fc), P(0x08200), P(0x08204), P(0x08208),
+	P(0x0820c), P(0x08210), P(0x08214), P(0x08218), P(0x0821c),
+	P(0x08220), P(0x08224), P(0x08228), P(0x0822c), P(0x08230),
+	P(0x08234), P(0x08238), P(0x0823c), P(0x08240), P(0x08244),
+	P(0x08248), P(0x0824c), P(0x08250), P(0x08254), P(0x08258),
+	P(0x0825c), P(0x08260), P(0x08264), P(0x08270), P(0x08274),
+	P(0x08278), P(0x0827c), P(0x08284), P(0x08288), P(0x0828c),
+	P(0x08294), P(0x08298), P(0x0829c), P(0x08300), P(0x08314),
+	P(0x08328), P(0x0832c), P(0x08330), P(0x08334), P(0x08338),
+	P(0x0833c), P(0x08340), P(0x08344), P(0x09808), P(0x0980c),
+	P(0x09810), P(0x09814), P(0x0981c), P(0x0982c), P(0x09830),
+	P(0x0983c), P(0x0984c), P(0x09854), P(0x09900), P(0x09904),
+	P(0x09908), P(0x0990c), P(0x09910), P(0x0991c), P(0x09920),
+	P(0x09928), P(0x0992c), P(0x09934), P(0x09938), P(0x0993c),
+	P(0x09940), P(0x09948), P(0x0994c), P(0x09954), P(0x09958),
+	P(0x09968), P(0x09970), P(0x09974), P(0x09978), P(0x0997c),
+	P(0x09980), P(0x09984), P(0x09988), P(0x0998c), P(0x09990),
+	P(0x09994), P(0x09998), P(0x0999c), P(0x099a0), P(0x099a4),
+	P(0x099a8), P(0x099ac), P(0x099b0), P(0x099b4), P(0x099dc),
+	P(0x099e0), P(0x099e4), P(0x099e8), P(0x099ec), P(0x099f0),
+	P(0x0a208), P(0x0a210), P(0x0a214), P(0x0a218), P(0x0a220),
+	P(0x0a224), P(0x0a228), P(0x0a22c), P(0x0a234), P(0x0a238),
+	P(0x0a244), P(0x0a248), P(0x0a24c), P(0x0a254), P(0x0a258),
+	P(0x0a25c), P(0x0a260), P(0x0a268), P(0x0a26c), P(0x0d270),
+	P(0x0d35c), P(0x0d360), P(0x0d364), P(0x0d368), P(0x0d36c),
+	P(0x0d370), P(0x0d374), P(0x0d378), P(0x0d37c), P(0x0d380),
+	P(0x0d384), P(0x0a388), P(0x0a38c), P(0x0a390), P(0x0a39c),
+	P(0x0a3a0), P(0x0a3a4), P(0x0a3a8), P(0x0a3ac), P(0x0a3b0),
+	P(0x0a3b4), P(0x0a3b8), P(0x0a3bc), P(0x0a3c0), P(0x0a3c4),
+	P(0x0a3cc), P(0x0a3d0), P(0x0a3d4), P(0x0a3e4), P(0x0a3e8),
+	P(0x0a3ec), P(0x07800), P(0x07804), P(0x07808), P(0x0780c),
+	P(0x07810), P(0x0781c), P(0x07824), P(0x0782c), P(0x07834),
+	P(0x07844), P(0x07848), P(0x0784c), P(0x07850), P(0x07854),
+	P(0x07858), P(0x0785c), P(0x07860), P(0x07864), P(0x07868),
+	P(0x07870)
+};
+
+static const uint32_t ar9285_1_2_cm_vals[] = {
+	0x00000000, 0x00020045, 0x00000005, 0x00000000, 0x00000008,
+	0x00000008, 0x00000010, 0x00000000, 0x0000001f, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x002ffc0f,
+	0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x002ffc0f,
+	0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000002, 0x00000002, 0x0000001f, 0x00000000,
+	0x00000000, 0x00000031, 0x00000002, 0x000004c2, 0x00000000,
+	0x00000000, 0x00000000, 0x00000700, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000fc78f,
+	0x0000000f, 0x00000000, 0x00000000, 0x2a80001a, 0x05dc01e0,
+	0x1f402710, 0x01f40000, 0x00001e00, 0x00000000, 0x00400000,
+	0xffffffff, 0x0000ffff, 0x003f3f3f, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00020000, 0x00020000, 0x00000001,
+	0x00000052, 0x00000000, 0x00000168, 0x000100aa, 0x00003210,
+	0x08f04810, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0x00000000,
+	0x00000000, 0x32143320, 0xfaa4fa50, 0x00000100, 0x00000000,
+	0x00000000, 0x0000320a, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00100000, 0x0010f400,
+	0x00000100, 0x0001e800, 0x00000000, 0x00000000, 0x00000000,
+	0x400000ff, 0x00080922, 0x88a00010, 0x00000000, 0x40000000,
+	0x003e4180, 0x00000000, 0x0000002c, 0x0000002c, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000040, 0x00000000,
+	0x00000000, 0x00000001, 0x00000302, 0x00000e00, 0x00ff0000,
+	0x00000000, 0x00010380, 0x00481043, 0x00000000, 0xafe68e30,
+	0xfd14e000, 0x9c0a9f6b, 0x00000000, 0x0000a000, 0x00000000,
+	0x00200400, 0x0040233c, 0x00000044, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x01002310, 0x10000fff, 0x04900000,
+	0x00000001, 0x00000004, 0x1e1f2022, 0x0a0b0c0d, 0x00000000,
+	0x14750604, 0x9280c00a, 0x00020028, 0x5f3ca3de, 0x2108ecff,
+	0x000003ce, 0x192bb514, 0x00000000, 0x00000001, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001,
+	0x201fff00, 0x2def0400, 0x03051000, 0x00000820, 0x00000000,
+	0x00000000, 0xaaaaaaaa, 0x3c466478, 0x0cc80caa, 0x00000000,
+	0x803e68c8, 0x4080a333, 0x00206c10, 0x009c4060, 0x01834061,
+	0x00000400, 0x000003b5, 0x00000000, 0x20202020, 0x20202020,
+	0x00000000, 0xfffffffc, 0x00000000, 0x00000000, 0x0ccb5380,
+	0x15151501, 0xdfa90f01, 0x00000000, 0x0ebae9e6, 0x0d820820,
+	0x07ffffef, 0x0fffffe7, 0x17ffffe5, 0x1fffffe4, 0x37ffffe3,
+	0x3fffffe3, 0x57ffffe3, 0x5fffffe2, 0x7fffffe2, 0x7f3c7bba,
+	0xf3307ff0, 0x0c000000, 0x20202020, 0x20202020, 0x00000001,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x20202020, 0x20202020, 0x20202020, 0x00000000, 0x18c43433,
+	0x00f70081, 0x00140000, 0x0e4548d8, 0x54214514, 0x02025830,
+	0x71c0d388, 0x00000000, 0x00d86fff, 0x6e36d97b, 0x71400087,
+	0x000c0db6, 0x6db6246f, 0x6d9b66db, 0x6d8c6dba, 0x00040000,
+	0xdb003012, 0x04924914, 0x21084210, 0xf7d7ffde, 0xc2034080,
+	0x10142c00
+};
+
+static const struct athn_ini ar9285_1_2_ini = {
+	nitems(ar9285_1_2_regs),
+	ar9285_1_2_regs,
+	NULL,	/* 2GHz only. */
+#ifndef IEEE80211_NO_HT
+	NULL,	/* 2GHz only. */
+	ar9285_1_2_vals_2g40,
+#endif
+	ar9285_1_2_vals_2g20,
+	nitems(ar9285_1_2_cm_regs),
+	ar9285_1_2_cm_regs,
+	ar9285_1_2_cm_vals
+};
+
+/*
+ * AR9285 1.2 Tx gains.
+ */
+static const uint16_t ar9285_1_2_tx_gain_regs[] = {
+	P(0x0a300), P(0x0a304), P(0x0a308), P(0x0a30c), P(0x0a310),
+	P(0x0a314), P(0x0a318), P(0x0a31c), P(0x0a320), P(0x0a324),
+	P(0x0a328), P(0x0a32c), P(0x0a330), P(0x0a334), P(0x0a338),
+	P(0x0a33c), P(0x0a340), P(0x0a344), P(0x0a348), P(0x0a34c),
+	P(0x0a350), P(0x0a354), P(0x07814), P(0x07828), P(0x07830),
+	P(0x07838), P(0x0783c), P(0x07840), P(0x0786c), P(0x07820),
+	P(0x0a274), P(0x0a278), P(0x0a27c), P(0x0a394), P(0x0a398),
+	P(0x0a3dc), P(0x0a3e0)
+};
+
+static const uint32_t ar9285_1_2_tx_gain_vals_2g[] = {
+	0x00000000, 0x00009200, 0x00010208, 0x00019608, 0x00022618,
+	0x0002a6c9, 0x00031710, 0x00035718, 0x00038758, 0x0003c75a,
+	0x0004075c, 0x0004475e, 0x0004679f, 0x000487df, 0x0003891e,
+	0x0003a95e, 0x0003e9df, 0x0003e9df, 0x0003e9df, 0x0003e9df,
+	0x0003e9df, 0x0003e9df, 0x924934a8, 0x26d2491b, 0xedb6d96e,
+	0xfac68801, 0x0001fffe, 0xffeb1a20, 0x48609eb4, 0x00000c04,
+	0x0a21a652, 0x39ce739c, 0x050e039c, 0x39ce739c, 0x0000039c,
+	0x39ce739c, 0x0000039c
+};
+
+static const struct athn_gain ar9285_1_2_tx_gain = {
+	nitems(ar9285_1_2_tx_gain_regs),
+	ar9285_1_2_tx_gain_regs,
+	NULL,	/* 2GHz only. */
+	ar9285_1_2_tx_gain_vals_2g
+};
+
+static const uint32_t ar9285_1_2_tx_gain_high_power_vals_2g[] = {
+	0x00000000, 0x00006200, 0x00008201, 0x0000b240, 0x0000d241,
+	0x0000f600, 0x00012800, 0x00016802, 0x0001b805, 0x00021a80,
+	0x00028b00, 0x0002ab40, 0x0002cd80, 0x00033d82, 0x0003891e,
+	0x0003a95e, 0x0003e9df, 0x0003e9df, 0x0003e9df, 0x0003e9df,
+	0x0003e9df, 0x0003e9df, 0x924934a8, 0x26d2491b, 0xedb6d96e,
+	0xfac68803, 0x0001fffe, 0xffeb1a20, 0x08609ebe, 0x00000c00,
+	0x0a216652, 0x0e739ce7, 0x050380e7, 0x0e739ce7, 0x000000e7,
+	0x0e739ce7, 0x000000e7
+};
+
+static const struct athn_gain ar9285_1_2_tx_gain_high_power = {
+	nitems(ar9285_1_2_tx_gain_regs),
+	ar9285_1_2_tx_gain_regs,
+	NULL,	/* 2GHz only. */
+	ar9285_1_2_tx_gain_high_power_vals_2g
+};
+
+/*
+ * AR9285 XE 2.0 Tx gains.
+ */
+static const uint32_t ar9285_2_0_tx_gain_vals_2g[] = {
+	0x00000000, 0x00009200, 0x00010208, 0x00019608, 0x00022618,
+	0x0002a6c9, 0x00031710, 0x00035718, 0x00038758, 0x0003c75a,
+	0x0004075c, 0x0004475e, 0x0004679f, 0x000487df, 0x0003891e,
+	0x0003a95e, 0x0003e9df, 0x0003e9df, 0x0003e9df, 0x0003e9df,
+	0x0003e9df, 0x0003e9df, 0x92497ca8, 0x2ad2491b, 0xedb6da6e,
+	0xdac71441, 0x2481f6fe, 0xba5f638c, 0x48609eb4, 0x00000c04,
+	0x0a21a652, 0x39ce739c, 0x050e039c, 0x39ce739c, 0x0000039c,
+	0x39ce739c, 0x0000039c
+};
+
+static const struct athn_gain ar9285_2_0_tx_gain = {
+	nitems(ar9285_1_2_tx_gain_regs),
+	ar9285_1_2_tx_gain_regs,
+	NULL,	/* 2GHz only. */
+	ar9285_2_0_tx_gain_vals_2g
+};
+
+static const uint32_t ar9285_2_0_tx_gain_high_power_vals_2g[] = {
+	0x00000000, 0x00006200, 0x00008201, 0x0000b240, 0x0000d241,
+	0x0000f600, 0x00012800, 0x00016802, 0x0001b805, 0x00021a80,
+	0x00028b00, 0x0002ab40, 0x0002cd80, 0x00033d82, 0x0003891e,
+	0x0003a95e, 0x0003e9df, 0x0003e9df, 0x0003e9df, 0x0003e9df,
+	0x0003e9df, 0x0003e9df, 0x92497ca8, 0x2ad2491b, 0xedb6da6e,
+	0xdac71443, 0x2481f6fe, 0xba5f638c, 0x08609ebe, 0x00000c00,
+	0x0a216652, 0x0e739ce7, 0x050380e7, 0x0e739ce7, 0x000000e7,
+	0x0e739ce7, 0x000000e7
+};
+
+static const struct athn_gain ar9285_2_0_tx_gain_high_power = {
+	nitems(ar9285_1_2_tx_gain_regs),
+	ar9285_1_2_tx_gain_regs,
+	NULL,	/* 2GHz only. */
+	ar9285_2_0_tx_gain_high_power_vals_2g
+};
+
+// ar9280.h
+
+#define AR9280_MAX_CHAINS	2
+
+#define AR9280_PD_GAIN_BOUNDARY_DEFAULT	56
+#define AR9280_PHY_CCA_MAX_GOOD_VALUE	(-112)
+
+#define AR9280_PHY_SYNTH_CONTROL	0x9874
+
+/* Bits for AR9280_PHY_SYNTH_CONTROL. */
+#define AR9280_BMODE		0x20000000
+#define AR9280_FRACMODE		0x10000000
+#define AR9280_AMODE_REFSEL_M	0x0c000000
+#define AR9280_AMODE_REFSEL_S	26
+
+/*
+ * NB: The AR9280 uses the same ROM layout than the AR5416.
+ */
+
+/* Macro to "pack" registers to 16-bit to save some .rodata space. */
+//#define P(x)	(x)
+
+/*
+ * AR9280 1.0 initialization values.
+ */
+static const uint16_t ar9280_1_0_regs[] = {
+	P(0x01030), P(0x01070), P(0x010b0), P(0x010f0), P(0x08014),
+	P(0x0801c), P(0x09804), P(0x09820), P(0x09824), P(0x09828),
+	P(0x09834), P(0x09838), P(0x09844), P(0x09848), P(0x0a848),
+	P(0x09850), P(0x09858), P(0x0985c), P(0x09860), P(0x0c864),
+	P(0x09868), P(0x0986c), P(0x09914), P(0x09918), P(0x09924),
+	P(0x09944), P(0x09960), P(0x0a960), P(0x09964), P(0x0c9b8),
+	P(0x0c9bc), P(0x099c0), P(0x099c4), P(0x099c8), P(0x099cc),
+	P(0x099d0), P(0x099d4), P(0x099d8), P(0x09a00), P(0x09a04),
+	P(0x09a08), P(0x09a0c), P(0x09a10), P(0x09a14), P(0x09a18),
+	P(0x09a1c), P(0x09a20), P(0x09a24), P(0x09a28), P(0x09a2c),
+	P(0x09a30), P(0x09a34), P(0x09a38), P(0x09a3c), P(0x09a40),
+	P(0x09a44), P(0x09a48), P(0x09a4c), P(0x09a50), P(0x09a54),
+	P(0x09a58), P(0x09a5c), P(0x09a60), P(0x09a64), P(0x09a68),
+	P(0x09a6c), P(0x09a70), P(0x09a74), P(0x09a78), P(0x09a7c),
+	P(0x09a80), P(0x09a84), P(0x09a88), P(0x09a8c), P(0x09a90),
+	P(0x09a94), P(0x09a98), P(0x09a9c), P(0x09aa0), P(0x09aa4),
+	P(0x09aa8), P(0x09aac), P(0x09ab0), P(0x09ab4), P(0x09ab8),
+	P(0x09abc), P(0x09ac0), P(0x09ac4), P(0x09ac8), P(0x09acc),
+	P(0x09ad0), P(0x09ad4), P(0x09ad8), P(0x09adc), P(0x09ae0),
+	P(0x09ae4), P(0x09ae8), P(0x09aec), P(0x09af0), P(0x09af4),
+	P(0x09af8), P(0x09afc), P(0x09b00), P(0x09b04), P(0x09b08),
+	P(0x09b0c), P(0x09b10), P(0x09b14), P(0x09b18), P(0x09b1c),
+	P(0x09b20), P(0x09b24), P(0x09b28), P(0x09b2c), P(0x09b30),
+	P(0x09b34), P(0x09b38), P(0x09b3c), P(0x09b40), P(0x09b44),
+	P(0x09b48), P(0x09b4c), P(0x09b50), P(0x09b54), P(0x09b58),
+	P(0x09b5c), P(0x09b60), P(0x09b64), P(0x09b68), P(0x09b6c),
+	P(0x09b70), P(0x09b74), P(0x09b78), P(0x09b7c), P(0x09b80),
+	P(0x09b84), P(0x09b88), P(0x09b8c), P(0x09b90), P(0x09b94),
+	P(0x09b98), P(0x09b9c), P(0x09ba0), P(0x09ba4), P(0x09ba8),
+	P(0x09bac), P(0x09bb0), P(0x09bb4), P(0x09bb8), P(0x09bbc),
+	P(0x09bc0), P(0x09bc4), P(0x09bc8), P(0x09bcc), P(0x09bd0),
+	P(0x09bd4), P(0x09bd8), P(0x09bdc), P(0x09be0), P(0x09be4),
+	P(0x09be8), P(0x09bec), P(0x09bf0), P(0x09bf4), P(0x09bf8),
+	P(0x09bfc), P(0x0a204), P(0x0a208), P(0x0a20c), P(0x0b20c),
+	P(0x0a21c), P(0x0a230), P(0x0a274), P(0x0a300), P(0x0a304),
+	P(0x0a308), P(0x0a30c), P(0x0a310), P(0x0a314), P(0x0a318),
+	P(0x0a31c), P(0x0a320), P(0x0a324), P(0x0a328), P(0x0a32c),
+	P(0x0a330), P(0x0a334), P(0x0a338), P(0x0a33c), P(0x0a340),
+	P(0x0a344), P(0x0a348), P(0x0a34c), P(0x0a350), P(0x0a354),
+	P(0x0784c), P(0x07854), P(0x07870), P(0x0788c)
+};
+
+static const uint32_t ar9280_1_0_vals_5g20[] = {
+	0x00000230, 0x00000168, 0x00000e60, 0x0000a000, 0x03e803e8,
+	0x128d8027, 0x00000300, 0x02020200, 0x00000e0e, 0x0a020001,
+	0x00000e0e, 0x00000007, 0x1372161e, 0x00028566, 0x00028566,
+	0x6d4000e2, 0x7ec82d2e, 0x3139605e, 0x00049d18, 0x0001ce00,
+	0x5ac64190, 0x06903081, 0x000007d0, 0x0000000a, 0xd00a8a07,
+	0xdfbc1010, 0x00000010, 0x00000010, 0x00000210, 0x0000001a,
+	0x00000600, 0x05eea6d4, 0x06336f77, 0x60f6532c, 0x08f186c8,
+	0x00046384, 0x00000000, 0x00000000, 0x00008184, 0x00008188,
+	0x0000818c, 0x00008190, 0x00008194, 0x00008200, 0x00008204,
+	0x00008208, 0x0000820c, 0x00008210, 0x00008214, 0x00008280,
+	0x00008284, 0x00008288, 0x0000828c, 0x00008290, 0x00008300,
+	0x00008304, 0x00008308, 0x0000830c, 0x00008310, 0x00008314,
+	0x00008380, 0x00008384, 0x00008388, 0x0000838c, 0x00008390,
+	0x00008394, 0x0000a380, 0x0000a384, 0x0000a388, 0x0000a38c,
+	0x0000a390, 0x0000a394, 0x0000a780, 0x0000a784, 0x0000a788,
+	0x0000a78c, 0x0000a790, 0x0000a794, 0x0000ab84, 0x0000ab88,
+	0x0000ab8c, 0x0000ab90, 0x0000ab94, 0x0000af80, 0x0000af84,
+	0x0000af88, 0x0000af8c, 0x0000af90, 0x0000af94, 0x0000b380,
+	0x0000b384, 0x0000b388, 0x0000b38c, 0x0000b390, 0x0000b394,
+	0x0000b398, 0x0000b780, 0x0000b784, 0x0000b788, 0x0000b78c,
+	0x0000b790, 0x0000b794, 0x0000b798, 0x0000d784, 0x0000d788,
+	0x0000d78c, 0x0000d790, 0x0000f780, 0x0000f784, 0x0000f788,
+	0x0000f78c, 0x0000f790, 0x0000f794, 0x0000f7a4, 0x0000f7a8,
+	0x0000f7ac, 0x0000f7b0, 0x0000f7b4, 0x0000f7a1, 0x0000f7a5,
+	0x0000f7a9, 0x0000f7ad, 0x0000f7b1, 0x0000f7b5, 0x0000f7c5,
+	0x0000f7c9, 0x0000f7cd, 0x0000f7d1, 0x0000f7d5, 0x0000f7c2,
+	0x0000f7c6, 0x0000f7ca, 0x0000f7ce, 0x0000f7d2, 0x0000f7d6,
+	0x0000f7c3, 0x0000f7c7, 0x0000f7cb, 0x0000f7d3, 0x0000f7d7,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x00000444, 0x803e4788, 0x000c6019, 0x000c6019,
+	0x1883800a, 0x00000000, 0x0a19c652, 0x00000000, 0x00003002,
+	0x00006004, 0x0000a006, 0x0000e012, 0x00011014, 0x0001504a,
+	0x0001904c, 0x0001c04e, 0x00020092, 0x0002410a, 0x0002710c,
+	0x0002b18b, 0x0002e1cc, 0x000321ec, 0x000321ec, 0x000321ec,
+	0x000321ec, 0x000321ec, 0x000321ec, 0x000321ec, 0x000321ec,
+	0x0e4f048c, 0x12031828, 0x807ec400, 0x00010000
+};
+
+#ifndef IEEE80211_NO_HT
+static const uint32_t ar9280_1_0_vals_5g40[] = {
+	0x00000460, 0x000002d0, 0x00001cc0, 0x00014000, 0x07d007d0,
+	0x128d804f, 0x000003c4, 0x02020200, 0x00000e0e, 0x0a020001,
+	0x00000e0e, 0x00000007, 0x1372161e, 0x00028566, 0x00028566,
+	0x6d4000e2, 0x7ec82d2e, 0x3139605e, 0x00049d18, 0x0001ce00,
+	0x5ac64190, 0x06903081, 0x000007d0, 0x00000014, 0xd00a8a07,
+	0xdfbc1010, 0x00000010, 0x00000010, 0x00000210, 0x0000001a,
+	0x00000600, 0x05eea6d4, 0x06336f77, 0x60f6532c, 0x08f186c8,
+	0x00046384, 0x00000000, 0x00000000, 0x00008184, 0x00008188,
+	0x0000818c, 0x00008190, 0x00008194, 0x00008200, 0x00008204,
+	0x00008208, 0x0000820c, 0x00008210, 0x00008214, 0x00008280,
+	0x00008284, 0x00008288, 0x0000828c, 0x00008290, 0x00008300,
+	0x00008304, 0x00008308, 0x0000830c, 0x00008310, 0x00008314,
+	0x00008380, 0x00008384, 0x00008388, 0x0000838c, 0x00008390,
+	0x00008394, 0x0000a380, 0x0000a384, 0x0000a388, 0x0000a38c,
+	0x0000a390, 0x0000a394, 0x0000a780, 0x0000a784, 0x0000a788,
+	0x0000a78c, 0x0000a790, 0x0000a794, 0x0000ab84, 0x0000ab88,
+	0x0000ab8c, 0x0000ab90, 0x0000ab94, 0x0000af80, 0x0000af84,
+	0x0000af88, 0x0000af8c, 0x0000af90, 0x0000af94, 0x0000b380,
+	0x0000b384, 0x0000b388, 0x0000b38c, 0x0000b390, 0x0000b394,
+	0x0000b398, 0x0000b780, 0x0000b784, 0x0000b788, 0x0000b78c,
+	0x0000b790, 0x0000b794, 0x0000b798, 0x0000d784, 0x0000d788,
+	0x0000d78c, 0x0000d790, 0x0000f780, 0x0000f784, 0x0000f788,
+	0x0000f78c, 0x0000f790, 0x0000f794, 0x0000f7a4, 0x0000f7a8,
+	0x0000f7ac, 0x0000f7b0, 0x0000f7b4, 0x0000f7a1, 0x0000f7a5,
+	0x0000f7a9, 0x0000f7ad, 0x0000f7b1, 0x0000f7b5, 0x0000f7c5,
+	0x0000f7c9, 0x0000f7cd, 0x0000f7d1, 0x0000f7d5, 0x0000f7c2,
+	0x0000f7c6, 0x0000f7ca, 0x0000f7ce, 0x0000f7d2, 0x0000f7d6,
+	0x0000f7c3, 0x0000f7c7, 0x0000f7cb, 0x0000f7d3, 0x0000f7d7,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x00000444, 0x803e4788, 0x000c6019, 0x000c6019,
+	0x1883800a, 0x00000000, 0x0a19c652, 0x00000000, 0x00003002,
+	0x00006004, 0x0000a006, 0x0000e012, 0x00011014, 0x0001504a,
+	0x0001904c, 0x0001c04e, 0x00020092, 0x0002410a, 0x0002710c,
+	0x0002b18b, 0x0002e1cc, 0x000321ec, 0x000321ec, 0x000321ec,
+	0x000321ec, 0x000321ec, 0x000321ec, 0x000321ec, 0x000321ec,
+	0x0e4f048c, 0x12031828, 0x807ec400, 0x00010000
+};
+
+static const uint32_t ar9280_1_0_vals_2g40[] = {
+	0x000002c0, 0x00000318, 0x00007c70, 0x00016000, 0x10801080,
+	0x12e00057, 0x000003c4, 0x02020200, 0x00000e0e, 0x0a020001,
+	0x00000e0e, 0x00000007, 0x137216a0, 0x00028563, 0x00028563,
+	0x6d4000e2, 0x7ec82d2e, 0x3139605e, 0x00049d20, 0x0001ce00,
+	0x5ac64190, 0x06903881, 0x00000898, 0x00000016, 0xd00a8a0d,
+	0xdfbc1010, 0x00000010, 0x00000010, 0x00000210, 0x0000001a,
+	0x00000c00, 0x05eea6d4, 0x06336f77, 0x60f6532c, 0x08f186c8,
+	0x00046384, 0x00000000, 0x00000000, 0x00000214, 0x00000218,
+	0x00000224, 0x00000228, 0x0000022c, 0x00000230, 0x000002a4,
+	0x000002a8, 0x000002ac, 0x000002b0, 0x000002b4, 0x000002b8,
+	0x00000390, 0x00000394, 0x00000398, 0x00000334, 0x00000338,
+	0x000003ac, 0x000003b0, 0x000003b4, 0x000003b8, 0x000003a5,
+	0x000003a9, 0x000003ad, 0x00008194, 0x000081a0, 0x0000820c,
+	0x000081a8, 0x00008284, 0x00008288, 0x00008224, 0x00008290,
+	0x00008300, 0x00008304, 0x00008308, 0x0000830c, 0x00008380,
+	0x00008384, 0x00008700, 0x00008704, 0x00008708, 0x0000870c,
+	0x00008780, 0x00008784, 0x00008b00, 0x00008b04, 0x00008b08,
+	0x00008b0c, 0x00008b80, 0x00008b84, 0x00008b88, 0x00008b8c,
+	0x00008b90, 0x00008f80, 0x00008f84, 0x00008f88, 0x00008f8c,
+	0x00008f90, 0x0000930c, 0x00009310, 0x00009384, 0x00009388,
+	0x00009324, 0x00009704, 0x000096a4, 0x000096a8, 0x00009710,
+	0x00009714, 0x00009720, 0x00009724, 0x00009728, 0x0000972c,
+	0x000097a0, 0x000097a4, 0x000097a8, 0x000097b0, 0x000097b4,
+	0x000097b8, 0x000097a5, 0x000097a9, 0x000097ad, 0x000097b1,
+	0x000097b5, 0x000097b9, 0x000097c5, 0x000097c9, 0x000097d1,
+	0x000097d5, 0x000097d9, 0x000097c6, 0x000097ca, 0x000097ce,
+	0x000097d2, 0x000097d6, 0x000097c3, 0x000097c7, 0x000097cb,
+	0x000097cf, 0x000097d7, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x00000444, 0x803e4788, 0x000c6019, 0x000c6019,
+	0x1883800a, 0x00000210, 0x0a1aa652, 0x00000000, 0x00003002,
+	0x00008009, 0x0000b00b, 0x0000e012, 0x00012048, 0x0001604a,
+	0x0001a211, 0x0001e213, 0x0002121b, 0x00024412, 0x00028414,
+	0x0002b44a, 0x00030649, 0x0003364b, 0x00038a49, 0x0003be48,
+	0x0003ee4a, 0x00042e88, 0x00046e8a, 0x00049ec9, 0x0004bf42,
+	0x0e4d048c, 0x12035828, 0x807ec000, 0x00110000
+};
+#endif
+
+static const uint32_t ar9280_1_0_vals_2g20[] = {
+	0x00000160, 0x0000018c, 0x00003e38, 0x0000b000, 0x08400840,
+	0x12e0002b, 0x00000300, 0x02020200, 0x00000e0e, 0x0a020001,
+	0x00000e0e, 0x00000007, 0x137216a0, 0x00028563, 0x00028563,
+	0x6d4000e2, 0x7ec82d2e, 0x3139605e, 0x00049d20, 0x0001ce00,
+	0x5ac64190, 0x06903881, 0x00000898, 0x0000000b, 0xd00a8a0d,
+	0xdfbc1010, 0x00000010, 0x00000010, 0x00000210, 0x0000001a,
+	0x00000c00, 0x05eea6d4, 0x06336f77, 0x60f6532c, 0x08f186c8,
+	0x00046384, 0x00000000, 0x00000000, 0x00000214, 0x00000218,
+	0x00000224, 0x00000228, 0x0000022c, 0x00000230, 0x000002a4,
+	0x000002a8, 0x000002ac, 0x000002b0, 0x000002b4, 0x000002b8,
+	0x00000390, 0x00000394, 0x00000398, 0x00000334, 0x00000338,
+	0x000003ac, 0x000003b0, 0x000003b4, 0x000003b8, 0x000003a5,
+	0x000003a9, 0x000003ad, 0x00008194, 0x000081a0, 0x0000820c,
+	0x000081a8, 0x00008284, 0x00008288, 0x00008224, 0x00008290,
+	0x00008300, 0x00008304, 0x00008308, 0x0000830c, 0x00008380,
+	0x00008384, 0x00008700, 0x00008704, 0x00008708, 0x0000870c,
+	0x00008780, 0x00008784, 0x00008b00, 0x00008b04, 0x00008b08,
+	0x00008b0c, 0x00008b80, 0x00008b84, 0x00008b88, 0x00008b8c,
+	0x00008b90, 0x00008f80, 0x00008f84, 0x00008f88, 0x00008f8c,
+	0x00008f90, 0x0000930c, 0x00009310, 0x00009384, 0x00009388,
+	0x00009324, 0x00009704, 0x000096a4, 0x000096a8, 0x00009710,
+	0x00009714, 0x00009720, 0x00009724, 0x00009728, 0x0000972c,
+	0x000097a0, 0x000097a4, 0x000097a8, 0x000097b0, 0x000097b4,
+	0x000097b8, 0x000097a5, 0x000097a9, 0x000097ad, 0x000097b1,
+	0x000097b5, 0x000097b9, 0x000097c5, 0x000097c9, 0x000097d1,
+	0x000097d5, 0x000097d9, 0x000097c6, 0x000097ca, 0x000097ce,
+	0x000097d2, 0x000097d6, 0x000097c3, 0x000097c7, 0x000097cb,
+	0x000097cf, 0x000097d7, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x00000444, 0x803e4788, 0x000c6019, 0x000c6019,
+	0x1883800a, 0x00000108, 0x0a1aa652, 0x00000000, 0x00003002,
+	0x00008009, 0x0000b00b, 0x0000e012, 0x00012048, 0x0001604a,
+	0x0001a211, 0x0001e213, 0x0002121b, 0x00024412, 0x00028414,
+	0x0002b44a, 0x00030649, 0x0003364b, 0x00038a49, 0x0003be48,
+	0x0003ee4a, 0x00042e88, 0x00046e8a, 0x00049ec9, 0x0004bf42,
+	0x0e4d048c, 0x12035828, 0x807ec000, 0x00110000
+};
+
+static const uint16_t ar9280_1_0_cm_regs[] = {
+	P(0x0000c), P(0x00030), P(0x00034), P(0x00040), P(0x00044),
+	P(0x00048), P(0x0004c), P(0x00050), P(0x00054), P(0x00800),
+	P(0x00804), P(0x00808), P(0x0080c), P(0x00810), P(0x00814),
+	P(0x00818), P(0x0081c), P(0x00820), P(0x00824), P(0x01040),
+	P(0x01044), P(0x01048), P(0x0104c), P(0x01050), P(0x01054),
+	P(0x01058), P(0x0105c), P(0x01060), P(0x01064), P(0x01230),
+	P(0x01270), P(0x01038), P(0x01078), P(0x010b8), P(0x010f8),
+	P(0x01138), P(0x01178), P(0x011b8), P(0x011f8), P(0x01238),
+	P(0x01278), P(0x012b8), P(0x012f8), P(0x01338), P(0x01378),
+	P(0x013b8), P(0x013f8), P(0x01438), P(0x01478), P(0x014b8),
+	P(0x014f8), P(0x01538), P(0x01578), P(0x015b8), P(0x015f8),
+	P(0x01638), P(0x01678), P(0x016b8), P(0x016f8), P(0x01738),
+	P(0x01778), P(0x017b8), P(0x017f8), P(0x0103c), P(0x0107c),
+	P(0x010bc), P(0x010fc), P(0x0113c), P(0x0117c), P(0x011bc),
+	P(0x011fc), P(0x0123c), P(0x0127c), P(0x012bc), P(0x012fc),
+	P(0x0133c), P(0x0137c), P(0x013bc), P(0x013fc), P(0x0143c),
+	P(0x0147c), P(0x04030), P(0x0403c), P(0x04024), P(0x07010),
+	P(0x07038), P(0x08004), P(0x08008), P(0x0800c), P(0x08018),
+	P(0x08020), P(0x08038), P(0x0803c), P(0x08048), P(0x08054),
+	P(0x08058), P(0x0805c), P(0x08060), P(0x08064), P(0x08070),
+	P(0x080c0), P(0x080c4), P(0x080c8), P(0x080cc), P(0x080d0),
+	P(0x080d4), P(0x080d8), P(0x080e0), P(0x080e4), P(0x080e8),
+	P(0x080ec), P(0x080f0), P(0x080f4), P(0x080f8), P(0x080fc),
+	P(0x08100), P(0x08104), P(0x08108), P(0x0810c), P(0x08110),
+	P(0x08118), P(0x0811c), P(0x08120), P(0x08124), P(0x08128),
+	P(0x0812c), P(0x08130), P(0x08134), P(0x08138), P(0x0813c),
+	P(0x08144), P(0x08168), P(0x0816c), P(0x08170), P(0x08174),
+	P(0x08178), P(0x0817c), P(0x081c4), P(0x081d0), P(0x081ec),
+	P(0x081f0), P(0x081f4), P(0x081f8), P(0x081fc), P(0x08200),
+	P(0x08204), P(0x08208), P(0x0820c), P(0x08210), P(0x08214),
+	P(0x08218), P(0x0821c), P(0x08220), P(0x08224), P(0x08228),
+	P(0x0822c), P(0x08230), P(0x08234), P(0x08238), P(0x0823c),
+	P(0x08240), P(0x08244), P(0x08248), P(0x0824c), P(0x08250),
+	P(0x08254), P(0x08258), P(0x0825c), P(0x08260), P(0x08270),
+	P(0x08274), P(0x08278), P(0x0827c), P(0x08284), P(0x08288),
+	P(0x0828c), P(0x08294), P(0x08298), P(0x08300), P(0x08304),
+	P(0x08308), P(0x0830c), P(0x08310), P(0x08314), P(0x08318),
+	P(0x08328), P(0x0832c), P(0x08330), P(0x08334), P(0x08338),
+	P(0x0833c), P(0x08340), P(0x08344), P(0x09808), P(0x0980c),
+	P(0x09810), P(0x09814), P(0x0981c), P(0x0982c), P(0x09830),
+	P(0x0983c), P(0x09840), P(0x0984c), P(0x0a84c), P(0x09854),
+	P(0x09900), P(0x09904), P(0x09908), P(0x0990c), P(0x0991c),
+	P(0x09920), P(0x0a920), P(0x09928), P(0x0992c), P(0x09934),
+	P(0x09938), P(0x0993c), P(0x09948), P(0x0994c), P(0x09954),
+	P(0x09958), P(0x09940), P(0x0c95c), P(0x0c968), P(0x09970),
+	P(0x09974), P(0x09978), P(0x0997c), P(0x09980), P(0x09984),
+	P(0x09988), P(0x0998c), P(0x09990), P(0x09994), P(0x09998),
+	P(0x0999c), P(0x099a0), P(0x099a4), P(0x099a8), P(0x099ac),
+	P(0x099b0), P(0x099b4), P(0x099dc), P(0x099e0), P(0x099e4),
+	P(0x099e8), P(0x099ec), P(0x099fc), P(0x0a210), P(0x0a214),
+	P(0x0a218), P(0x0a220), P(0x0a224), P(0x0a228), P(0x0a22c),
+	P(0x0a234), P(0x0a238), P(0x0a23c), P(0x0a240), P(0x0a244),
+	P(0x0a248), P(0x0a24c), P(0x0a250), P(0x0a254), P(0x0a258),
+	P(0x0a25c), P(0x0a260), P(0x0a268), P(0x0a26c), P(0x0b26c),
+	P(0x0d270), P(0x0a278), P(0x0a27c), P(0x0a358), P(0x0d35c),
+	P(0x0d360), P(0x0d364), P(0x0d368), P(0x0d36c), P(0x0d370),
+	P(0x0d374), P(0x0d378), P(0x0d37c), P(0x0d380), P(0x0d384),
+	P(0x0a388), P(0x0a38c), P(0x0a390), P(0x0a394), P(0x0a398),
+	P(0x0a39c), P(0x0a3a0), P(0x0a3a4), P(0x0a3a8), P(0x0a3ac),
+	P(0x0a3b0), P(0x0a3b4), P(0x0a3b8), P(0x0a3bc), P(0x0a3c0),
+	P(0x0a3c4), P(0x0a3c8), P(0x0a3cc), P(0x0a3d0), P(0x0a3d4),
+	P(0x0a3dc), P(0x0a3e0), P(0x0a3e4), P(0x0a3e8), P(0x0a3ec),
+	P(0x07800), P(0x07804), P(0x07808), P(0x0780c), P(0x07810),
+	P(0x07814), P(0x07818), P(0x0781c), P(0x07820), P(0x07824),
+	P(0x07828), P(0x0782c), P(0x07830), P(0x07834), P(0x07838),
+	P(0x0783c), P(0x07840), P(0x07844), P(0x07848), P(0x07850),
+	P(0x07858), P(0x07860), P(0x07864), P(0x07868), P(0x0786c),
+	P(0x07874), P(0x07878), P(0x0787c), P(0x07880), P(0x07884),
+	P(0x07888), P(0x07890), P(0x07894), P(0x07898)
+};
+
+static const uint32_t ar9280_1_0_cm_vals[] = {
+	0x00000000, 0x00020015, 0x00000005, 0x00000000, 0x00000008,
+	0x00000008, 0x00000010, 0x00000000, 0x0000001f, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x002ffc0f,
+	0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x002ffc0f,
+	0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000002, 0x00000002, 0x0000001f, 0x00000033,
+	0x000004c2, 0x00000000, 0x00000000, 0x00000000, 0x00000700,
+	0x00000000, 0x00000000, 0x00000000, 0x40000000, 0x00000000,
+	0x00000000, 0x000fc78f, 0x0000000f, 0x00000000, 0x00000000,
+	0x2a82301a, 0x05dc01e0, 0x1f402710, 0x01f40000, 0x00001e00,
+	0x00000000, 0x00400000, 0xffffffff, 0x0000ffff, 0x003f3f3f,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00020000,
+	0x00020000, 0x00000001, 0x00000052, 0x00000000, 0x00000168,
+	0x000100aa, 0x00003210, 0x08f04800, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x32143320, 0xfaa4fa50,
+	0x00000100, 0x00000000, 0x00000000, 0x00003210, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00100000, 0x0010f400, 0x00000100, 0x0001e800, 0x00000000,
+	0x00000000, 0x00000000, 0x400000ff, 0x00080922, 0x00000000,
+	0x40000000, 0x003e4180, 0x00000000, 0x0000002c, 0x0000002c,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000007, 0x00000302, 0x00000e00, 0x00000000,
+	0x00000000, 0x000107ff, 0x00000000, 0x00000000, 0xaf268e30,
+	0xfd14e000, 0x9c0a9f6b, 0x00000000, 0x0000a000, 0x00000000,
+	0x00200400, 0x206a01ae, 0x0040233c, 0x0040233c, 0x00000044,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x10000fff,
+	0x04900000, 0x04900000, 0x00000001, 0x00000004, 0x1e1f2022,
+	0x0a0b0c0d, 0x00000000, 0x9280c00a, 0x00020028, 0xe250a51e,
+	0x3388ffff, 0x00781204, 0x004b6a8e, 0x000003ce, 0x190fb514,
+	0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000001, 0x201fff00, 0x006f00c4,
+	0x03051000, 0x00000820, 0x00000000, 0x00000000, 0xaaaaaaaa,
+	0x3c466478, 0x0cc80caa, 0x00001042, 0x4080a333, 0x40206c10,
+	0x009c4060, 0x01834061, 0x00000400, 0x000003b5, 0x23277200,
+	0x20202020, 0x20202020, 0x13c889af, 0x38490a20, 0x00007bb6,
+	0x0fff3ffc, 0x00000001, 0x001da000, 0x00000000, 0x0cdbd380,
+	0x0f0f0f01, 0xdfa91f01, 0x00000000, 0x0ebae9c6, 0x0ebae9c6,
+	0x00820820, 0x1ce739ce, 0x050701ce, 0x7999aa0f, 0x07ffffef,
+	0x0fffffe7, 0x17ffffe5, 0x1fffffe4, 0x37ffffe3, 0x3fffffe3,
+	0x57ffffe3, 0x5fffffe2, 0x7fffffe2, 0x7f3c7bba, 0xf3307ff0,
+	0x0c000000, 0x20202020, 0x20202020, 0x1ce739ce, 0x000001ce,
+	0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000246, 0x20202020, 0x20202020, 0x20202020,
+	0x1ce739ce, 0x000001ce, 0x00000000, 0x18c43433, 0x00f38081,
+	0x00040000, 0xdb005012, 0x04924914, 0x21084210, 0x6d801300,
+	0x0019beff, 0x07e40000, 0x00492000, 0x92492480, 0x00040000,
+	0xdb005012, 0x04924914, 0x21084210, 0x6d801300, 0x0019beff,
+	0x07e40000, 0x00492000, 0x92492480, 0x00120000, 0x54214514,
+	0x92592692, 0x52802000, 0x0a8e370e, 0xc0102850, 0x812d4000,
+	0x001b6db0, 0x00376b63, 0x06db6db6, 0x006d8000, 0xffeffffe,
+	0xffeffffe, 0x00060aeb, 0x5a108000, 0x2a850160
+};
+
+static const struct athn_ini ar9280_1_0_ini = {
+	nitems(ar9280_1_0_regs),
+	ar9280_1_0_regs,
+	ar9280_1_0_vals_5g20,
+#ifndef IEEE80211_NO_HT
+	ar9280_1_0_vals_5g40,
+	ar9280_1_0_vals_2g40,
+#endif
+	ar9280_1_0_vals_2g20,
+	nitems(ar9280_1_0_cm_regs),
+	ar9280_1_0_cm_regs,
+	ar9280_1_0_cm_vals
+};
+
+/*
+ * AR9280 2.0 initialization values.
+ */
+static const uint16_t ar9280_2_0_regs[] = {
+	P(0x01030), P(0x01070), P(0x010b0), P(0x010f0), P(0x08014),
+	P(0x0801c), P(0x08120), P(0x081d0), P(0x08318), P(0x09804),
+	P(0x09820), P(0x09824), P(0x09828), P(0x09834), P(0x09838),
+	P(0x09840), P(0x09844), P(0x09850), P(0x09858), P(0x0985c),
+	P(0x09860), P(0x09864), P(0x09868), P(0x0986c), P(0x09914),
+	P(0x09918), P(0x09924), P(0x09944), P(0x09960), P(0x0a960),
+	P(0x09964), P(0x0c968), P(0x099b8), P(0x099bc), P(0x099c0),
+	P(0x099c4), P(0x099c8), P(0x099cc), P(0x099d0), P(0x099d4),
+	P(0x099d8), P(0x0a204), P(0x0a20c), P(0x0b20c), P(0x0a21c),
+	P(0x0a230), P(0x0a23c), P(0x0a250), P(0x0a358), P(0x0a388),
+	P(0x0a3d8), P(0x07894)
+};
+
+static const uint32_t ar9280_2_0_vals_5g20[] = {
+	0x00000230, 0x00000168, 0x00000e60, 0x00000000, 0x03e803e8,
+	0x128d8027, 0x08f04800, 0x00003210, 0x00003e80, 0x00000300,
+	0x02020200, 0x01000e0e, 0x0a020001, 0x00000e0e, 0x00000007,
+	0x206a022e, 0x0372161e, 0x6c4000e2, 0x7ec88d2e, 0x31395d5e,
+	0x00048d18, 0x0001ce00, 0x5ac640d0, 0x06903081, 0x000007d0,
+	0x0000000a, 0xd00a8a0b, 0xffbc1010, 0x00000010, 0x00000010,
+	0x00000210, 0x000003b5, 0x0000001c, 0x00000a00, 0x05eea6d4,
+	0x06336f77, 0x60f65329, 0x08f186c8, 0x00046384, 0x00000000,
+	0x00000000, 0x00000444, 0x00000014, 0x00000014, 0x1883800a,
+	0x00000000, 0x13c88000, 0x001ff000, 0x7999aa02, 0x0c000000,
+	0x00000000, 0x5a508000
+};
+
+#ifndef IEEE80211_NO_HT
+static const uint32_t ar9280_2_0_vals_5g40[] = {
+	0x00000460, 0x000002d0, 0x00001cc0, 0x00000000, 0x07d007d0,
+	0x128d804f, 0x08f04800, 0x00003210, 0x00007d00, 0x000003c4,
+	0x02020200, 0x01000e0e, 0x0a020001, 0x00000e0e, 0x00000007,
+	0x206a022e, 0x0372161e, 0x6d4000e2, 0x7ec88d2e, 0x3139605e,
+	0x00048d18, 0x0001ce00, 0x5ac640d0, 0x06903081, 0x00000fa0,
+	0x00000014, 0xd00a8a0b, 0xffbc1010, 0x00000010, 0x00000010,
+	0x00000210, 0x000003b5, 0x0000001c, 0x00000a00, 0x05eea6d4,
+	0x06336f77, 0x60f65329, 0x08f186c8, 0x00046384, 0x00000000,
+	0x00000000, 0x00000444, 0x00000014, 0x00000014, 0x1883800a,
+	0x00000000, 0x13c88000, 0x001ff000, 0x7999aa02, 0x0c000000,
+	0x00000000, 0x5a508000
+};
+
+static const uint32_t ar9280_2_0_vals_2g40[] = {
+	0x000002c0, 0x00000318, 0x00007c70, 0x00000000, 0x10801600,
+	0x12e00057, 0x08f04810, 0x0000320a, 0x00006880, 0x000003c4,
+	0x02020200, 0x01000e0e, 0x0a020001, 0x00000e0e, 0x00000007,
+	0x206a012e, 0x037216a0, 0x6d4000e2, 0x7ec84d2e, 0x3139605e,
+	0x00048d20, 0x0001ce00, 0x5ac640d0, 0x06903881, 0x00001130,
+	0x00000268, 0xd00a8a0d, 0xffbc1010, 0x00000010, 0x00000010,
+	0x00000210, 0x000003ce, 0x0000001c, 0x00000c00, 0x05eea6d4,
+	0x06336f77, 0x60f65329, 0x08f186c8, 0x00046384, 0x00000000,
+	0x00000000, 0x00000444, 0x0001f019, 0x0001f019, 0x1883800a,
+	0x00000210, 0x13c88001, 0x0004a000, 0x7999aa0e, 0x08000000,
+	0x00000000, 0x5a508000
+};
+#endif
+
+static const uint32_t ar9280_2_0_vals_2g20[] = {
+	0x00000160, 0x0000018c, 0x00003e38, 0x00000000, 0x08400b00,
+	0x12e0002b, 0x08f04810, 0x0000320a, 0x00003440, 0x00000300,
+	0x02020200, 0x01000e0e, 0x0a020001, 0x00000e0e, 0x00000007,
+	0x206a012e, 0x037216a0, 0x6c4000e2, 0x7ec84d2e, 0x31395d5e,
+	0x00048d20, 0x0001ce00, 0x5ac640d0, 0x06903881, 0x00000898,
+	0x0000000b, 0xd00a8a0d, 0xffbc1010, 0x00000010, 0x00000010,
+	0x00000210, 0x000003ce, 0x0000001c, 0x00000c00, 0x05eea6d4,
+	0x06336f77, 0x60f65329, 0x08f186c8, 0x00046384, 0x00000000,
+	0x00000000, 0x00000444, 0x0001f019, 0x0001f019, 0x1883800a,
+	0x00000108, 0x13c88000, 0x0004a000, 0x7999aa0e, 0x0c000000,
+	0x00000000, 0x5a508000
+};
+
+static const uint16_t ar9280_2_0_cm_regs[] = {
+	P(0x0000c), P(0x00030), P(0x00034), P(0x00040), P(0x00044),
+	P(0x00048), P(0x0004c), P(0x00050), P(0x00054), P(0x00800),
+	P(0x00804), P(0x00808), P(0x0080c), P(0x00810), P(0x00814),
+	P(0x00818), P(0x0081c), P(0x00820), P(0x00824), P(0x01040),
+	P(0x01044), P(0x01048), P(0x0104c), P(0x01050), P(0x01054),
+	P(0x01058), P(0x0105c), P(0x01060), P(0x01064), P(0x01230),
+	P(0x01270), P(0x01038), P(0x01078), P(0x010b8), P(0x010f8),
+	P(0x01138), P(0x01178), P(0x011b8), P(0x011f8), P(0x01238),
+	P(0x01278), P(0x012b8), P(0x012f8), P(0x01338), P(0x01378),
+	P(0x013b8), P(0x013f8), P(0x01438), P(0x01478), P(0x014b8),
+	P(0x014f8), P(0x01538), P(0x01578), P(0x015b8), P(0x015f8),
+	P(0x01638), P(0x01678), P(0x016b8), P(0x016f8), P(0x01738),
+	P(0x01778), P(0x017b8), P(0x017f8), P(0x0103c), P(0x0107c),
+	P(0x010bc), P(0x010fc), P(0x0113c), P(0x0117c), P(0x011bc),
+	P(0x011fc), P(0x0123c), P(0x0127c), P(0x012bc), P(0x012fc),
+	P(0x0133c), P(0x0137c), P(0x013bc), P(0x013fc), P(0x0143c),
+	P(0x0147c), P(0x04030), P(0x0403c), P(0x04024), P(0x04060),
+	P(0x04064), P(0x07010), P(0x07034), P(0x07038), P(0x08004),
+	P(0x08008), P(0x0800c), P(0x08018), P(0x08020), P(0x08038),
+	P(0x0803c), P(0x08048), P(0x08054), P(0x08058), P(0x0805c),
+	P(0x08060), P(0x08064), P(0x08070), P(0x080c0), P(0x080c4),
+	P(0x080c8), P(0x080cc), P(0x080d0), P(0x080d4), P(0x080d8),
+	P(0x080e0), P(0x080e4), P(0x080e8), P(0x080ec), P(0x080f0),
+	P(0x080f4), P(0x080f8), P(0x080fc), P(0x08100), P(0x08104),
+	P(0x08108), P(0x0810c), P(0x08110), P(0x08118), P(0x0811c),
+	P(0x08124), P(0x08128), P(0x0812c), P(0x08130), P(0x08134),
+	P(0x08138), P(0x0813c), P(0x08144), P(0x08168), P(0x0816c),
+	P(0x08170), P(0x08174), P(0x08178), P(0x0817c), P(0x081c0),
+	P(0x081ec), P(0x081f0), P(0x081f4), P(0x081f8), P(0x081fc),
+	P(0x08200), P(0x08204), P(0x08208), P(0x0820c), P(0x08210),
+	P(0x08214), P(0x08218), P(0x0821c), P(0x08220), P(0x08224),
+	P(0x08228), P(0x0822c), P(0x08230), P(0x08234), P(0x08238),
+	P(0x0823c), P(0x08240), P(0x08244), P(0x08248), P(0x0824c),
+	P(0x08250), P(0x08254), P(0x08258), P(0x0825c), P(0x08260),
+	P(0x08264), P(0x08270), P(0x08274), P(0x08278), P(0x0827c),
+	P(0x08284), P(0x08288), P(0x0828c), P(0x08294), P(0x08298),
+	P(0x0829c), P(0x08300), P(0x08314), P(0x08328), P(0x0832c),
+	P(0x08330), P(0x08334), P(0x08338), P(0x0833c), P(0x08340),
+	P(0x08344), P(0x09808), P(0x0980c), P(0x09810), P(0x09814),
+	P(0x0981c), P(0x0982c), P(0x09830), P(0x0983c), P(0x0984c),
+	P(0x0a84c), P(0x09854), P(0x09900), P(0x09904), P(0x09908),
+	P(0x0990c), P(0x09910), P(0x0991c), P(0x09920), P(0x0a920),
+	P(0x09928), P(0x0992c), P(0x09934), P(0x09938), P(0x0993c),
+	P(0x09948), P(0x0994c), P(0x09954), P(0x09958), P(0x09940),
+	P(0x0c95c), P(0x09970), P(0x09974), P(0x09978), P(0x0997c),
+	P(0x09980), P(0x09984), P(0x09988), P(0x0998c), P(0x09990),
+	P(0x09994), P(0x09998), P(0x0999c), P(0x099a0), P(0x099a4),
+	P(0x099a8), P(0x099ac), P(0x099b0), P(0x099b4), P(0x099dc),
+	P(0x099e0), P(0x099e4), P(0x099e8), P(0x099ec), P(0x099f0),
+	P(0x099fc), P(0x0a208), P(0x0a210), P(0x0a214), P(0x0a218),
+	P(0x0a220), P(0x0a224), P(0x0a228), P(0x0a22c), P(0x0a234),
+	P(0x0a238), P(0x0a240), P(0x0a244), P(0x0a248), P(0x0a24c),
+	P(0x0a254), P(0x0a258), P(0x0a25c), P(0x0a260), P(0x0a268),
+	P(0x0a26c), P(0x0b26c), P(0x0d270), P(0x0a278), P(0x0d35c),
+	P(0x0d360), P(0x0d364), P(0x0d368), P(0x0d36c), P(0x0d370),
+	P(0x0d374), P(0x0d378), P(0x0d37c), P(0x0d380), P(0x0d384),
+	P(0x0a38c), P(0x0a390), P(0x0a394), P(0x0a398), P(0x0a39c),
+	P(0x0a3a0), P(0x0a3a4), P(0x0a3a8), P(0x0a3ac), P(0x0a3b0),
+	P(0x0a3b4), P(0x0a3b8), P(0x0a3bc), P(0x0a3c0), P(0x0a3c4),
+	P(0x0a3c8), P(0x0a3cc), P(0x0a3d0), P(0x0a3d4), P(0x0a3dc),
+	P(0x0a3e0), P(0x0a3e4), P(0x0a3e8), P(0x0a3ec), P(0x07800),
+	P(0x07804), P(0x07808), P(0x0780c), P(0x07810), P(0x07818),
+	P(0x07824), P(0x07828), P(0x0782c), P(0x07830), P(0x07834),
+	P(0x0783c), P(0x07848), P(0x0784c), P(0x07850), P(0x07854),
+	P(0x07858), P(0x07860), P(0x07864), P(0x07868), P(0x0786c),
+	P(0x07870), P(0x07874), P(0x07878), P(0x0787c), P(0x07880),
+	P(0x07884), P(0x07888), P(0x0788c), P(0x07890), P(0x07898)
+};
+
+static const uint32_t ar9280_2_0_cm_vals[] = {
+	0x00000000, 0x00020015, 0x00000005, 0x00000000, 0x00000008,
+	0x00000008, 0x00000010, 0x00000000, 0x0000001f, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x002ffc0f,
+	0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x002ffc0f,
+	0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x002ffc0f, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000002, 0x00000002, 0x0000001f, 0x00000000,
+	0x00000000, 0x00000033, 0x00000002, 0x000004c2, 0x00000000,
+	0x00000000, 0x00000000, 0x00000700, 0x00000000, 0x00000000,
+	0x00000000, 0x40000000, 0x00000000, 0x00000000, 0x000fc78f,
+	0x0000000f, 0x00000000, 0x00000000, 0x2a80001a, 0x05dc01e0,
+	0x1f402710, 0x01f40000, 0x00001e00, 0x00000000, 0x00400000,
+	0xffffffff, 0x0000ffff, 0x003f3f3f, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00020000, 0x00020000, 0x00000001,
+	0x00000052, 0x00000000, 0x00000168, 0x000100aa, 0x00003210,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0xffffffff, 0x00000000, 0x00000000,
+	0x32143320, 0xfaa4fa50, 0x00000100, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00100000, 0x0010f400, 0x00000100, 0x0001e800,
+	0x00000000, 0x00000000, 0x00000000, 0x400000ff, 0x00080922,
+	0xa8a00010, 0x00000000, 0x40000000, 0x003e4180, 0x00000000,
+	0x0000002c, 0x0000002c, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000040, 0x00000000, 0x00000000, 0x00000007,
+	0x00000302, 0x00000e00, 0x00ff0000, 0x00000000, 0x000107ff,
+	0x00481043, 0x00000000, 0xafa68e30, 0xfd14e000, 0x9c0a9f6b,
+	0x00000000, 0x0000a000, 0x00000000, 0x00200400, 0x0040233c,
+	0x0040233c, 0x00000044, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x01002310, 0x10000fff, 0x04900000, 0x04900000,
+	0x00000001, 0x00000004, 0x1e1f2022, 0x0a0b0c0d, 0x00000000,
+	0x9280c00a, 0x00020028, 0x5f3ca3de, 0x2108ecff, 0x14750604,
+	0x004b6a8e, 0x190fb515, 0x00000000, 0x00000001, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001,
+	0x201fff00, 0x006f0000, 0x03051000, 0x00000820, 0x00000000,
+	0x00000000, 0xaaaaaaaa, 0x3c466478, 0x0cc80caa, 0x00000000,
+	0x00001042, 0x803e4788, 0x4080a333, 0x40206c10, 0x009c4060,
+	0x01834061, 0x00000400, 0x000003b5, 0x233f7180, 0x20202020,
+	0x20202020, 0x38490a20, 0x00007bb6, 0x0fff3ffc, 0x00000000,
+	0x00000000, 0x0cdbd380, 0x0f0f0f01, 0xdfa91f01, 0x00000000,
+	0x0e79e5c6, 0x0e79e5c6, 0x00820820, 0x1ce739ce, 0x07ffffef,
+	0x0fffffe7, 0x17ffffe5, 0x1fffffe4, 0x37ffffe3, 0x3fffffe3,
+	0x57ffffe3, 0x5fffffe2, 0x7fffffe2, 0x7f3c7bba, 0xf3307ff0,
+	0x20202020, 0x20202020, 0x1ce739ce, 0x000001ce, 0x00000001,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000246, 0x20202020, 0x20202020, 0x20202020, 0x1ce739ce,
+	0x000001ce, 0x00000000, 0x18c43433, 0x00f70081, 0x00040000,
+	0xdb005012, 0x04924914, 0x21084210, 0x6d801300, 0x07e41000,
+	0x00040000, 0xdb005012, 0x04924914, 0x21084210, 0x6d801300,
+	0x07e40000, 0x00100000, 0x773f0567, 0x54214514, 0x12035828,
+	0x9259269a, 0x52802000, 0x0a8e370e, 0xc0102850, 0x812d4000,
+	0x807ec400, 0x001b6db0, 0x00376b63, 0x06db6db6, 0x006d8000,
+	0xffeffffe, 0xffeffffe, 0x00010000, 0x02060aeb, 0x2a850160
+};
+
+static const struct athn_ini ar9280_2_0_ini = {
+	nitems(ar9280_2_0_regs),
+	ar9280_2_0_regs,
+	ar9280_2_0_vals_5g20,
+#ifndef IEEE80211_NO_HT
+	ar9280_2_0_vals_5g40,
+	ar9280_2_0_vals_2g40,
+#endif
+	ar9280_2_0_vals_2g20,
+	nitems(ar9280_2_0_cm_regs),
+	ar9280_2_0_cm_regs,
+	ar9280_2_0_cm_vals
+};
+
+/*
+ * AR9280 2.0 Tx gains.
+ */
+static const uint16_t ar9280_2_0_tx_gain_regs[] = {
+	P(0x0a274), P(0x0a27c), P(0x0a300), P(0x0a304), P(0x0a308),
+	P(0x0a30c), P(0x0a310), P(0x0a314), P(0x0a318), P(0x0a31c),
+	P(0x0a320), P(0x0a324), P(0x0a328), P(0x0a32c), P(0x0a330),
+	P(0x0a334), P(0x0a338), P(0x0a33c), P(0x0a340), P(0x0a344),
+	P(0x0a348), P(0x0a34c), P(0x0a350), P(0x0a354), P(0x07814),
+	P(0x07838), P(0x0781c), P(0x07840), P(0x07820), P(0x07844)
+};
+
+static const uint32_t ar9280_2_0_tx_gain_vals_5g[] = {
+	0x0a19c652, 0x050701ce, 0x00000000, 0x00003002, 0x00006004,
+	0x0000a006, 0x0000e012, 0x00011014, 0x0001504a, 0x0001904c,
+	0x0001c04e, 0x00020092, 0x0002410a, 0x0002710c, 0x0002b18b,
+	0x0002e1cc, 0x000321ec, 0x000321ec, 0x000321ec, 0x000321ec,
+	0x000321ec, 0x000321ec, 0x000321ec, 0x000321ec, 0x0019beff,
+	0x0019beff, 0x00392000, 0x00392000, 0x92592480, 0x92592480
+};
+
+static const uint32_t ar9280_2_0_tx_gain_vals_2g[] = {
+	0x0a1aa652, 0x050701ce, 0x00000000, 0x00003002, 0x00008009,
+	0x0000b00b, 0x0000e012, 0x00012048, 0x0001604a, 0x0001a211,
+	0x0001e213, 0x0002121b, 0x00024412, 0x00028414, 0x0002b44a,
+	0x00030649, 0x0003364b, 0x00038a49, 0x0003be48, 0x0003ee4a,
+	0x00042e88, 0x00046e8a, 0x00049ec9, 0x0004bf42, 0x0019beff,
+	0x0019beff, 0x00392000, 0x00392000, 0x92592480, 0x92592480
+};
+
+static const struct athn_gain ar9280_2_0_tx_gain = {
+	nitems(ar9280_2_0_tx_gain_regs),
+	ar9280_2_0_tx_gain_regs,
+	ar9280_2_0_tx_gain_vals_5g,
+	ar9280_2_0_tx_gain_vals_2g
+};
+
+static const uint32_t ar9280_2_0_tx_gain_high_power_vals_5g[] = {
+	0x0a19e652, 0x050739ce, 0x00000000, 0x00003002, 0x00006004,
+	0x0000a006, 0x0000e012, 0x00011014, 0x0001504a, 0x0001904c,
+	0x0001c04e, 0x00021092, 0x0002510a, 0x0002910c, 0x0002c18b,
+	0x0002f1cc, 0x000321eb, 0x000341ec, 0x000341ec, 0x000341ec,
+	0x000341ec, 0x000341ec, 0x000341ec, 0x000341ec, 0x00198eff,
+	0x00198eff, 0x00172000, 0x00172000, 0xf258a480, 0xf258a480
+};
+
+static const uint32_t ar9280_2_0_tx_gain_high_power_vals_2g[] = {
+	0x0a1aa652, 0x050739ce, 0x00000000, 0x00004002, 0x00007008,
+	0x0000c010, 0x00010012, 0x00013014, 0x0001820a, 0x0001b211,
+	0x0001e213, 0x00022411, 0x00025413, 0x00029811, 0x0002c813,
+	0x00030a14, 0x00035a50, 0x00039c4c, 0x0003de8a, 0x00042e92,
+	0x00046ed2, 0x0004bed5, 0x0004ff54, 0x00055fd5, 0x00198eff,
+	0x00198eff, 0x00172000, 0x00172000, 0xf258a480, 0xf258a480
+};
+
+static const struct athn_gain ar9280_2_0_tx_gain_high_power = {
+	nitems(ar9280_2_0_tx_gain_regs),
+	ar9280_2_0_tx_gain_regs,
+	ar9280_2_0_tx_gain_high_power_vals_5g,
+	ar9280_2_0_tx_gain_high_power_vals_2g
+};
+
+/*
+ * AR9280 2.0 Rx gains.
+ */
+static const uint16_t ar9280_2_0_rx_gain_regs[] = {
+	P(0x09a00), P(0x09a04), P(0x09a08), P(0x09a0c), P(0x09a10),
+	P(0x09a14), P(0x09a18), P(0x09a1c), P(0x09a20), P(0x09a24),
+	P(0x09a28), P(0x09a2c), P(0x09a30), P(0x09a34), P(0x09a38),
+	P(0x09a3c), P(0x09a40), P(0x09a44), P(0x09a48), P(0x09a4c),
+	P(0x09a50), P(0x09a54), P(0x09a58), P(0x09a5c), P(0x09a60),
+	P(0x09a64), P(0x09a68), P(0x09a6c), P(0x09a70), P(0x09a74),
+	P(0x09a78), P(0x09a7c), P(0x09a80), P(0x09a84), P(0x09a88),
+	P(0x09a8c), P(0x09a90), P(0x09a94), P(0x09a98), P(0x09a9c),
+	P(0x09aa0), P(0x09aa4), P(0x09aa8), P(0x09aac), P(0x09ab0),
+	P(0x09ab4), P(0x09ab8), P(0x09abc), P(0x09ac0), P(0x09ac4),
+	P(0x09ac8), P(0x09acc), P(0x09ad0), P(0x09ad4), P(0x09ad8),
+	P(0x09adc), P(0x09ae0), P(0x09ae4), P(0x09ae8), P(0x09aec),
+	P(0x09af0), P(0x09af4), P(0x09af8), P(0x09afc), P(0x09b00),
+	P(0x09b04), P(0x09b08), P(0x09b0c), P(0x09b10), P(0x09b14),
+	P(0x09b18), P(0x09b1c), P(0x09b20), P(0x09b24), P(0x09b28),
+	P(0x09b2c), P(0x09b30), P(0x09b34), P(0x09b38), P(0x09b3c),
+	P(0x09b40), P(0x09b44), P(0x09b48), P(0x09b4c), P(0x09b50),
+	P(0x09b54), P(0x09b58), P(0x09b5c), P(0x09b60), P(0x09b64),
+	P(0x09b68), P(0x09b6c), P(0x09b70), P(0x09b74), P(0x09b78),
+	P(0x09b7c), P(0x09b80), P(0x09b84), P(0x09b88), P(0x09b8c),
+	P(0x09b90), P(0x09b94), P(0x09b98), P(0x09b9c), P(0x09ba0),
+	P(0x09ba4), P(0x09ba8), P(0x09bac), P(0x09bb0), P(0x09bb4),
+	P(0x09bb8), P(0x09bbc), P(0x09bc0), P(0x09bc4), P(0x09bc8),
+	P(0x09bcc), P(0x09bd0), P(0x09bd4), P(0x09bd8), P(0x09bdc),
+	P(0x09be0), P(0x09be4), P(0x09be8), P(0x09bec), P(0x09bf0),
+	P(0x09bf4), P(0x09bf8), P(0x09bfc), P(0x09848), P(0x0a848)
+};
+
+static const uint32_t ar9280_2_0_rx_gain_vals_5g[] = {
+	0x00008184, 0x00008188, 0x0000818c, 0x00008190, 0x00008194,
+	0x00008200, 0x00008204, 0x00008208, 0x0000820c, 0x00008210,
+	0x00008214, 0x00008280, 0x00008284, 0x00008288, 0x0000828c,
+	0x00008290, 0x00008300, 0x00008304, 0x00008308, 0x0000830c,
+	0x00008310, 0x00008314, 0x00008380, 0x00008384, 0x00008388,
+	0x0000838c, 0x00008390, 0x00008394, 0x0000a380, 0x0000a384,
+	0x0000a388, 0x0000a38c, 0x0000a390, 0x0000a394, 0x0000a780,
+	0x0000a784, 0x0000a788, 0x0000a78c, 0x0000a790, 0x0000a794,
+	0x0000ab84, 0x0000ab88, 0x0000ab8c, 0x0000ab90, 0x0000ab94,
+	0x0000af80, 0x0000af84, 0x0000af88, 0x0000af8c, 0x0000af90,
+	0x0000af94, 0x0000b380, 0x0000b384, 0x0000b388, 0x0000b38c,
+	0x0000b390, 0x0000b394, 0x0000b398, 0x0000b780, 0x0000b784,
+	0x0000b788, 0x0000b78c, 0x0000b790, 0x0000b794, 0x0000b798,
+	0x0000d784, 0x0000d788, 0x0000d78c, 0x0000d790, 0x0000f780,
+	0x0000f784, 0x0000f788, 0x0000f78c, 0x0000f790, 0x0000f794,
+	0x0000f7a4, 0x0000f7a8, 0x0000f7ac, 0x0000f7b0, 0x0000f7b4,
+	0x0000f7a1, 0x0000f7a5, 0x0000f7a9, 0x0000f7ad, 0x0000f7b1,
+	0x0000f7b5, 0x0000f7c5, 0x0000f7c9, 0x0000f7cd, 0x0000f7d1,
+	0x0000f7d5, 0x0000f7c2, 0x0000f7c6, 0x0000f7ca, 0x0000f7ce,
+	0x0000f7d2, 0x0000f7d6, 0x0000f7c3, 0x0000f7c7, 0x0000f7cb,
+	0x0000f7d3, 0x0000f7d7, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x00001066, 0x00001066
+};
+
+static const uint32_t ar9280_2_0_rx_gain_vals_2g[] = {
+	0x00000290, 0x00000300, 0x00000304, 0x00000308, 0x0000030c,
+	0x00008000, 0x00008004, 0x00008008, 0x0000800c, 0x00008080,
+	0x00008084, 0x00008088, 0x0000808c, 0x00008100, 0x00008104,
+	0x00008108, 0x0000810c, 0x00008110, 0x00008114, 0x00008180,
+	0x00008184, 0x00008188, 0x0000818c, 0x00008190, 0x00008194,
+	0x000081a0, 0x0000820c, 0x000081a8, 0x00008284, 0x00008288,
+	0x00008224, 0x00008290, 0x00008300, 0x00008304, 0x00008308,
+	0x0000830c, 0x00008380, 0x00008384, 0x00008700, 0x00008704,
+	0x00008708, 0x0000870c, 0x00008780, 0x00008784, 0x00008b00,
+	0x00008b04, 0x00008b08, 0x00008b0c, 0x00008b80, 0x00008b84,
+	0x00008b88, 0x00008b8c, 0x00008b90, 0x00008f80, 0x00008f84,
+	0x00008f88, 0x00008f8c, 0x00008f90, 0x0000930c, 0x00009310,
+	0x00009384, 0x00009388, 0x00009324, 0x00009704, 0x000096a4,
+	0x000096a8, 0x00009710, 0x00009714, 0x00009720, 0x00009724,
+	0x00009728, 0x0000972c, 0x000097a0, 0x000097a4, 0x000097a8,
+	0x000097b0, 0x000097b4, 0x000097b8, 0x000097a5, 0x000097a9,
+	0x000097ad, 0x000097b1, 0x000097b5, 0x000097b9, 0x000097c5,
+	0x000097c9, 0x000097d1, 0x000097d5, 0x000097d9, 0x000097c6,
+	0x000097ca, 0x000097ce, 0x000097d2, 0x000097d6, 0x000097c3,
+	0x000097c7, 0x000097cb, 0x000097cf, 0x000097d7, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x000097db, 0x000097db,
+	0x000097db, 0x000097db, 0x000097db, 0x00001063, 0x00001063
+};
+
+static const struct athn_gain ar9280_2_0_rx_gain = {
+	nitems(ar9280_2_0_rx_gain_regs),
+	ar9280_2_0_rx_gain_regs,
+	ar9280_2_0_rx_gain_vals_5g,
+	ar9280_2_0_rx_gain_vals_2g
+};
+
+static const uint32_t ar9280_2_0_rx_gain_13db_backoff_vals_5g[] = {
+	0x00008184, 0x00008188, 0x0000818c, 0x00008190, 0x00008194,
+	0x00008200, 0x00008204, 0x00008208, 0x0000820c, 0x00008210,
+	0x00008214, 0x00008280, 0x00008284, 0x00008288, 0x0000828c,
+	0x00008290, 0x00008300, 0x00008304, 0x00008308, 0x0000830c,
+	0x00008310, 0x00008314, 0x00008380, 0x00008384, 0x00008388,
+	0x0000838c, 0x00008390, 0x00008394, 0x0000a380, 0x0000a384,
+	0x0000a388, 0x0000a38c, 0x0000a390, 0x0000a394, 0x0000a780,
+	0x0000a784, 0x0000a788, 0x0000a78c, 0x0000a790, 0x0000a794,
+	0x0000ab84, 0x0000ab88, 0x0000ab8c, 0x0000ab90, 0x0000ab94,
+	0x0000af80, 0x0000af84, 0x0000af88, 0x0000af8c, 0x0000af90,
+	0x0000af94, 0x0000b380, 0x0000b384, 0x0000b388, 0x0000b38c,
+	0x0000b390, 0x0000b394, 0x0000b398, 0x0000b780, 0x0000b784,
+	0x0000b788, 0x0000b78c, 0x0000b790, 0x0000b794, 0x0000b798,
+	0x0000d784, 0x0000d788, 0x0000d78c, 0x0000d790, 0x0000f780,
+	0x0000f784, 0x0000f788, 0x0000f78c, 0x0000f790, 0x0000f794,
+	0x0000f7a4, 0x0000f7a8, 0x0000f7ac, 0x0000f7b0, 0x0000f7b4,
+	0x0000f7a1, 0x0000f7a5, 0x0000f7a9, 0x0000f7ad, 0x0000f7b1,
+	0x0000f7b5, 0x0000f7c5, 0x0000f7c9, 0x0000f7cd, 0x0000f7d1,
+	0x0000f7d5, 0x0000f7c2, 0x0000f7c6, 0x0000f7ca, 0x0000f7ce,
+	0x0000f7d2, 0x0000f7d6, 0x0000f7c3, 0x0000f7c7, 0x0000f7cb,
+	0x0000f7d3, 0x0000f7d7, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x00001066, 0x00001066
+};
+
+static const uint32_t ar9280_2_0_rx_gain_13db_backoff_vals_2g[] = {
+	0x00000290, 0x00000300, 0x00000304, 0x00000308, 0x0000030c,
+	0x00008000, 0x00008004, 0x00008008, 0x0000800c, 0x00008080,
+	0x00008084, 0x00008088, 0x0000808c, 0x00008100, 0x00008104,
+	0x00008108, 0x0000810c, 0x00008110, 0x00008114, 0x00008180,
+	0x00008184, 0x00008188, 0x0000818c, 0x00008190, 0x00008194,
+	0x000081a0, 0x0000820c, 0x000081a8, 0x00008284, 0x00008288,
+	0x00008224, 0x00008290, 0x00008300, 0x00008304, 0x00008308,
+	0x0000830c, 0x00008380, 0x00008384, 0x00008700, 0x00008704,
+	0x00008708, 0x0000870c, 0x00008780, 0x00008784, 0x00008b00,
+	0x00008b04, 0x00008b08, 0x00008b0c, 0x00008b80, 0x00008b84,
+	0x00008b88, 0x00008b8c, 0x00008b90, 0x00008f80, 0x00008f84,
+	0x00008f88, 0x00008f8c, 0x00008f90, 0x00009310, 0x00009314,
+	0x00009320, 0x00009324, 0x00009328, 0x0000932c, 0x00009330,
+	0x00009334, 0x00009321, 0x00009325, 0x00009329, 0x0000932d,
+	0x00009331, 0x00009335, 0x00009322, 0x00009326, 0x0000932a,
+	0x0000932e, 0x00009332, 0x00009336, 0x00009323, 0x00009327,
+	0x0000932b, 0x0000932f, 0x00009333, 0x00009337, 0x00009343,
+	0x00009347, 0x0000934b, 0x0000934f, 0x00009353, 0x00009357,
+	0x0000935b, 0x0000935b, 0x0000935b, 0x0000935b, 0x0000935b,
+	0x0000935b, 0x0000935b, 0x0000935b, 0x0000935b, 0x0000935b,
+	0x0000935b, 0x0000935b, 0x0000935b, 0x0000935b, 0x0000935b,
+	0x0000935b, 0x0000935b, 0x0000935b, 0x0000935b, 0x0000935b,
+	0x0000935b, 0x0000935b, 0x0000935b, 0x0000935b, 0x0000935b,
+	0x0000935b, 0x0000935b, 0x0000935b, 0x0000935b, 0x0000935b,
+	0x0000935b, 0x0000935b, 0x0000935b, 0x0000935b, 0x0000935b,
+	0x0000935b, 0x0000935b, 0x0000935b, 0x0000105a, 0x0000105a
+};
+
+static const struct athn_gain ar9280_2_0_rx_gain_13db_backoff = {
+	nitems(ar9280_2_0_rx_gain_regs),
+	ar9280_2_0_rx_gain_regs,
+	ar9280_2_0_rx_gain_13db_backoff_vals_5g,
+	ar9280_2_0_rx_gain_13db_backoff_vals_2g
+};
+
+static const uint32_t ar9280_2_0_rx_gain_23db_backoff_vals_5g[] = {
+	0x00008184, 0x00008188, 0x0000818c, 0x00008190, 0x00008194,
+	0x00008200, 0x00008204, 0x00008208, 0x0000820c, 0x00008210,
+	0x00008214, 0x00008280, 0x00008284, 0x00008288, 0x0000828c,
+	0x00008290, 0x00008300, 0x00008304, 0x00008308, 0x0000830c,
+	0x00008310, 0x00008314, 0x00008380, 0x00008384, 0x00008388,
+	0x0000838c, 0x00008390, 0x00008394, 0x0000a380, 0x0000a384,
+	0x0000a388, 0x0000a38c, 0x0000a390, 0x0000a394, 0x0000a780,
+	0x0000a784, 0x0000a788, 0x0000a78c, 0x0000a790, 0x0000a794,
+	0x0000ab84, 0x0000ab88, 0x0000ab8c, 0x0000ab90, 0x0000ab94,
+	0x0000af80, 0x0000af84, 0x0000af88, 0x0000af8c, 0x0000af90,
+	0x0000af94, 0x0000b380, 0x0000b384, 0x0000b388, 0x0000b38c,
+	0x0000b390, 0x0000b394, 0x0000b398, 0x0000b780, 0x0000b784,
+	0x0000b788, 0x0000b78c, 0x0000b790, 0x0000b794, 0x0000b798,
+	0x0000d784, 0x0000d788, 0x0000d78c, 0x0000d790, 0x0000f780,
+	0x0000f784, 0x0000f788, 0x0000f78c, 0x0000f790, 0x0000f794,
+	0x0000f7a4, 0x0000f7a8, 0x0000f7ac, 0x0000f7b0, 0x0000f7b4,
+	0x0000f7a1, 0x0000f7a5, 0x0000f7a9, 0x0000f7ad, 0x0000f7b1,
+	0x0000f7b5, 0x0000f7c5, 0x0000f7c9, 0x0000f7cd, 0x0000f7d1,
+	0x0000f7d5, 0x0000f7c2, 0x0000f7c6, 0x0000f7ca, 0x0000f7ce,
+	0x0000f7d2, 0x0000f7d6, 0x0000f7c3, 0x0000f7c7, 0x0000f7cb,
+	0x0000f7d3, 0x0000f7d7, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db, 0x0000f7db,
+	0x0000f7db, 0x0000f7db, 0x0000f7db, 0x00001066, 0x00001066
+};
+
+static const uint32_t ar9280_2_0_rx_gain_23db_backoff_vals_2g[] = {
+	0x00000290, 0x00000300, 0x00000304, 0x00000308, 0x0000030c,
+	0x00008000, 0x00008004, 0x00008008, 0x0000800c, 0x00008080,
+	0x00008084, 0x00008088, 0x0000808c, 0x00008100, 0x00008104,
+	0x00008108, 0x0000810c, 0x00008110, 0x00008114, 0x00008180,
+	0x00008184, 0x00008188, 0x0000818c, 0x00008190, 0x00008194,
+	0x000081a0, 0x0000820c, 0x000081a8, 0x00008284, 0x00008288,
+	0x00008224, 0x00008290, 0x00008300, 0x00008304, 0x00008308,
+	0x0000830c, 0x00008380, 0x00008384, 0x00008700, 0x00008704,
+	0x00008708, 0x0000870c, 0x00008780, 0x00008784, 0x00008b00,
+	0x00008b04, 0x00008b08, 0x00008b0c, 0x00008b10, 0x00008b14,
+	0x00008b01, 0x00008b05, 0x00008b09, 0x00008b0d, 0x00008b11,
+	0x00008b15, 0x00008b02, 0x00008b06, 0x00008b0a, 0x00008b0e,
+	0x00008b12, 0x00008b16, 0x00008b03, 0x00008b07, 0x00008b0b,
+	0x00008b0f, 0x00008b13, 0x00008b17, 0x00008b23, 0x00008b27,
+	0x00008b2b, 0x00008b2f, 0x00008b33, 0x00008b37, 0x00008b43,
+	0x00008b47, 0x00008b4b, 0x00008b4f, 0x00008b53, 0x00008b57,
+	0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b,
+	0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b,
+	0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b,
+	0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b,
+	0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b,
+	0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b,
+	0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b,
+	0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b,
+	0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00008b5b,
+	0x00008b5b, 0x00008b5b, 0x00008b5b, 0x00001050, 0x00001050
+};
+
+static const struct athn_gain ar9280_2_0_rx_gain_23db_backoff = {
+	nitems(ar9280_2_0_rx_gain_regs),
+	ar9280_2_0_rx_gain_regs,
+	ar9280_2_0_rx_gain_23db_backoff_vals_5g,
+	ar9280_2_0_rx_gain_23db_backoff_vals_2g
+};
+
+/*
+ * Serializer/Deserializer programming.
+ */
+static const uint32_t ar9280_1_0_serdes[] = {
+	0x9248fd00,
+	0x24924924,
+	0xa8000019,
+	0x13160820,
+	0xe5980560,
+#ifdef ATHN_PCIE_CLKREQ
+	0x401deffc,
+#else
+	0x401deffd,
+#endif
+	0x1aaabe40,
+	0xbe105554,
+	0x00043007
+};
+
+static const uint32_t ar9280_2_0_serdes[] = {
+	0x9248fd00,
+	0x24924924,
+	0xa8000019,
+	0x13160820,
+	0xe5980560,
+#ifdef ATHN_PCIE_CLKREQ
+	0xc01dcffc,
+#else
+	0xc01dcffd,
+#endif
+	0x1aaabe41,
+	0xbe105554,
+	0x00043007
+};
+#pragma pack on
+struct ar5416_base_eep_header {
+	uint16_t	length;
+	uint16_t	checksum;
+	uint16_t	version;
+	uint8_t		opCapFlags;
+	uint8_t		eepMisc;
+	uint16_t	regDmn[2];
+	uint8_t		macAddr[6];
+	uint8_t		rxMask;
+	uint8_t		txMask;
+	uint16_t	rfSilent;
+	uint16_t	blueToothOptions;
+	uint16_t	deviceCap;
+	uint32_t	binBuildNumber;
+	uint8_t		deviceType;
+	/* End of common header. */
+	uint8_t		pwdclkind;
+	uint8_t		futureBase_1[2];
+	uint8_t		rxGainType;
+#define AR5416_EEP_RXGAIN_23DB_BACKOFF	0
+#define AR5416_EEP_RXGAIN_13DB_BACKOFF	1
+#define AR5416_EEP_RXGAIN_ORIG		2
+
+	uint8_t		dacHiPwrMode_5G;
+	uint8_t		openLoopPwrCntl;
+	uint8_t		dacLpMode;
+	uint8_t		txGainType;
+	uint8_t		rcChainMask;
+	uint8_t		desiredScaleCCK;
+	uint8_t		pwrTableOffset;
+	uint8_t		frac_n_5g;
+	uint8_t		futureBase_2[21];
+} __packed;
+#pragma pack off
+
+#define	IEEE80211_FC1_MORE_FRAG			0x04
+#define	IEEE80211_FC1_RETRY			0x08
+#define	IEEE80211_FC1_PWR_MGT			0x10
+#define	IEEE80211_FC1_MORE_DATA			0x20
+#define	IEEE80211_FC1_PROTECTED			0x40
+#define	IEEE80211_FC1_WEP			0x40	/* pre-RSNA compat */
+#define	IEEE80211_FC1_ORDER			0x80
diff -r 484d3f8e5978 sys/src/9/pc/mkfile
--- a/sys/src/9/pc/mkfile	Tue Sep 29 07:28:47 2020 -0700
+++ b/sys/src/9/pc/mkfile	Fri Oct 09 08:48:49 2020 +0300
@@ -127,6 +127,7 @@
 ether8169.$O:			../port/ethermii.h
 etherdp83820.$O:		../port/ethermii.h
 etherigbe.$O:			../port/ethermii.h
+etheralc.$O:			../port/ethermii.h
 ethervgbe.$O:			../port/ethermii.h
 ethervt6102.$O:			../port/ethermii.h
 ethervt6105m.$O:		../port/ethermii.h
@@ -134,6 +135,8 @@
 etheriwl.$O:			../port/wifi.h
 etherwpi.$O:			../port/wifi.h
 etherrt2860.$O: 		../port/wifi.h
+etherathn.$O: 			../port/wifi.h
+
 l.$O rebootcode.$O apbootstrap.$O:	mem.h
 
 initcode.out:		init9.$O initcode.$O /$objtype/lib/libc.a
diff -r 484d3f8e5978 sys/src/9/pc/pc
--- a/sys/src/9/pc/pc	Tue Sep 29 07:28:47 2020 -0700
+++ b/sys/src/9/pc/pc	Fri Oct 09 08:48:49 2020 +0300
@@ -72,6 +72,7 @@
 	ethervgbe	pci ethermii
 	ethervt6102	pci ethermii
 	ethervt6105m	pci ethermii
+	etheralc	pci ethermii
 	ethersink
 	ethersmc	pci devi82365 cis
 	etheryuk	pci
@@ -79,6 +80,7 @@
 	etheriwl	pci wifi
 	etherwpi	pci wifi
 	etherrt2860	pci wifi
+	etherathn	pci wifi
 	ethervirtio	pci
 	ethermedium
 	pcmciamodem
diff -r 484d3f8e5978 sys/src/9/pc64/mkfile
--- a/sys/src/9/pc64/mkfile	Tue Sep 29 07:28:47 2020 -0700
+++ b/sys/src/9/pc64/mkfile	Fri Oct 09 08:48:49 2020 +0300
@@ -131,6 +131,7 @@
 ether8169.$O:			../port/ethermii.h
 etherdp83820.$O:		../port/ethermii.h
 etherigbe.$O:			../port/ethermii.h
+etheralc.$O:			../port/ethermii.h
 ethervgbe.$O:			../port/ethermii.h
 ethervt6102.$O:			../port/ethermii.h
 ethervt6105m.$O:		../port/ethermii.h
@@ -138,6 +139,7 @@
 etheriwl.$O:			../port/wifi.h
 etherwpi.$O:			../port/wifi.h
 etherrt2860.$O: 		../port/wifi.h
+etherathn.$O: 			../port/wifi.h
 
 initcode.out:		init9.$O initcode.$O /$objtype/lib/libc.a
 	$LD -l -R1 -s -o $target $prereq
diff -r 484d3f8e5978 sys/src/9/pc64/pc64
--- a/sys/src/9/pc64/pc64	Tue Sep 29 07:28:47 2020 -0700
+++ b/sys/src/9/pc64/pc64	Fri Oct 09 08:48:49 2020 +0300
@@ -67,6 +67,7 @@
 #	etherelnk3	pci
 #	etherga620	pci
 	etherigbe	pci ethermii
+	etheralc	pci ethermii
 #	ethervgbe	pci ethermii
 #	ethervt6102	pci ethermii
 #	ethervt6105m	pci ethermii
@@ -77,6 +78,7 @@
 	etheriwl	pci wifi
 	etherwpi	pci wifi
 	etherrt2860	pci wifi
+	etherathn	pci wifi
 	ethervirtio	pci
 	ethermedium
 #	pcmciamodem
